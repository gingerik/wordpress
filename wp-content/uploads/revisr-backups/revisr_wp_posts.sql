
/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;
DROP TABLE IF EXISTS `wp_posts`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_posts` (
  `ID` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `post_author` bigint(20) unsigned NOT NULL DEFAULT '0',
  `post_date` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_date_gmt` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_content` longtext NOT NULL,
  `post_title` text NOT NULL,
  `post_excerpt` text NOT NULL,
  `post_status` varchar(20) NOT NULL DEFAULT 'publish',
  `comment_status` varchar(20) NOT NULL DEFAULT 'open',
  `ping_status` varchar(20) NOT NULL DEFAULT 'open',
  `post_password` varchar(20) NOT NULL DEFAULT '',
  `post_name` varchar(200) NOT NULL DEFAULT '',
  `to_ping` text NOT NULL,
  `pinged` text NOT NULL,
  `post_modified` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_modified_gmt` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_content_filtered` longtext NOT NULL,
  `post_parent` bigint(20) unsigned NOT NULL DEFAULT '0',
  `guid` varchar(255) NOT NULL DEFAULT '',
  `menu_order` int(11) NOT NULL DEFAULT '0',
  `post_type` varchar(20) NOT NULL DEFAULT 'post',
  `post_mime_type` varchar(100) NOT NULL DEFAULT '',
  `comment_count` bigint(20) NOT NULL DEFAULT '0',
  PRIMARY KEY (`ID`),
  KEY `post_name` (`post_name`),
  KEY `type_status_date` (`post_type`,`post_status`,`post_date`,`ID`),
  KEY `post_parent` (`post_parent`),
  KEY `post_author` (`post_author`)
) ENGINE=InnoDB AUTO_INCREMENT=273 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

LOCK TABLES `wp_posts` WRITE;
/*!40000 ALTER TABLE `wp_posts` DISABLE KEYS */;
INSERT INTO `wp_posts` VALUES (2,1,'2014-10-11 15:51:08','2014-10-11 15:51:08','','General','','publish','open','open','','sample-page','','','2014-10-11 18:34:19','2014-10-11 16:34:19','',0,'http://gingerik.nl/?page_id=2',0,'page','',0),(4,1,'2014-10-11 18:33:04','2014-10-11 16:33:04','## Installation\r\n\r\n_Make sure you download the latest plugings from [1] and [2]._\r\n\r\nInstall the plugins.\r\n\r\n```bash\r\ncd /tmp\r\n# install wp-gfm\r\nwget https://github.com/makotokw/wp-gfm/archive/v0.7.2.tar.gz -O wp-gfm-0.7.2.tar.gz\r\nsudo tar -xvf wp-gfm-0.7.2.tar.gz -C /var/lib/wordpress/wp-content/plugins\r\n# install wp-code-prettify\r\nwget https://downloads.wordpress.org/plugin/wp-code-prettify.zip\r\nsudo unzip wp-code-prettify.zip -d /var/lib/wordpress/wp-content/plugins\r\n```\r\n\r\n## Configuration\r\n\r\n* Visit <http://blog.gingerik.nl/wp-admin/plugins.php> and activate the plugins;\r\n* Visit <http://blog.gingerik.nl/wp-admin/options-general.php?page=wp-gfm> and check `All contents are markdown!`;\r\n* Visit <http://blog.gingerik.nl/wp-admin/options-general.php?page=wp-code-prettify> and:\r\n  - set _Always load the js/css files?_ to `Yes`;\r\n  - add some custom CSS to change the line numbering and indent when adding `.linenums`:\r\n\r\n```css file\r\n/* style file contents */\r\npre.prettyprint.file {\r\n    margin-left: 2em;\r\n    margin-right: 2em;\r\n}\r\n\r\n/* style line numbers */\r\nol {\r\n    counter-reset: item;\r\n    margin-left: 0;\r\n    padding-left: 0;\r\n}\r\nol > li {\r\n    display: block;\r\n    margin-bottom: .25em;\r\n    margin-left: 2em;\r\n}\r\nol > li:before {\r\n    display: inline-block;\r\n    content: counter(item, decimal-leading-zero) \" \";\r\n    counter-increment: item;\r\n    width: 2em;\r\n    margin-left: -2em;\r\n}\r\n```\r\n\r\n[1] <https://github.com/makotokw/wp-gfm>\r\n[2] <https://wordpress.org/plugins/wp-code-prettify>\r\n','Install Markdown & Prettify on Wordpress','','publish','open','open','','markdown','','','2014-10-15 09:41:34','2014-10-15 07:41:34','',0,'http://gingerik.nl/?p=4',0,'post','',0),(5,1,'2014-10-11 18:08:12','2014-10-11 16:08:12','[markdown]\r\n\r\n# Install Markdown on Wordpress\r\n\r\nFrom the official repository[1].\r\nSurf to https://github.com/makotokw/wp-gfm/releases and download the latest release.\r\n\r\n```bash\r\nwget https://github.com/makotokw/wp-gfm/archive/v0.7.2.tar.gz -O wp-gfm-0.7.2.tar.gz\r\nsudo cp wp-gfm-0.7.2.tar.gz  /var/lib/wordpress/wp-content/plugins/\r\n```\r\n\r\n[1] https://github.com/makotokw/wp-gfm\r\n\r\n[/markdown]','Markdown','','inherit','open','open','','4-revision-v1','','','2014-10-11 18:08:12','2014-10-11 16:08:12','',4,'http://gingerik.nl/?p=5',0,'revision','',0),(6,1,'2014-10-11 18:15:26','2014-10-11 16:15:26','# Install Markdown on Wordpress\r\n\r\nFrom the official repository[1].\r\nSurf to https://github.com/makotokw/wp-gfm/releases and download the latest release.\r\n\r\n```bash\r\ncd /tmp\r\nwget https://github.com/makotokw/wp-gfm/archive/v0.7.2.tar.gz -O wp-gfm-0.7.2.tar.gz\r\nsudo tar -xvf wp-gfm-0.7.2.tar.gz -C /var/lib/wordpress/wp-content/plugins\r\n```\r\n\r\n[1] https://github.com/makotokw/wp-gfm\r\n','Markdown','','inherit','open','open','','4-revision-v1','','','2014-10-11 18:15:26','2014-10-11 16:15:26','',4,'http://gingerik.nl/?p=6',0,'revision','',0),(7,1,'2014-10-11 18:16:38','2014-10-11 16:16:38','# Install Markdown on Wordpress\r\n\r\nFrom the official repository[1].\r\nSurf to https://github.com/makotokw/wp-gfm/releases and download the latest release.\r\n\r\n```bash\r\ncd /tmp\r\nwget https://github.com/makotokw/wp-gfm/archive/v0.7.2.tar.gz -O wp-gfm-0.7.2.tar.gz\r\nsudo tar -xvf wp-gfm-0.7.2.tar.gz -C /var/lib/wordpress/wp-content/plugins\r\n```\r\n\r\nGo to http://gingerik.nl/wp-admin/options-general.php?page=wp-gfm and check `All contents are markdown!`.\r\n\r\n[1] https://github.com/makotokw/wp-gfm\r\n','Markdown','','inherit','open','open','','4-revision-v1','','','2014-10-11 18:16:38','2014-10-11 16:16:38','',4,'http://gingerik.nl/?p=7',0,'revision','',0),(8,1,'2014-10-11 18:17:20','2014-10-11 16:17:20','# Install Markdown on Wordpress\r\n\r\nFrom the official repository[1].\r\nSurf to <https://github.com/makotokw/wp-gfm/releases> and download the latest release.\r\n\r\n```bash\r\ncd /tmp\r\nwget https://github.com/makotokw/wp-gfm/archive/v0.7.2.tar.gz -O wp-gfm-0.7.2.tar.gz\r\nsudo tar -xvf wp-gfm-0.7.2.tar.gz -C /var/lib/wordpress/wp-content/plugins\r\n```\r\n\r\nGo to <http://gingerik.nl/wp-admin/options-general.php?page=wp-gfm> and check `All contents are markdown!`.\r\n\r\n[1] <https://github.com/makotokw/wp-gfm>\r\n','Markdown','','inherit','open','open','','4-revision-v1','','','2014-10-11 18:17:20','2014-10-11 16:17:20','',4,'http://gingerik.nl/?p=8',0,'revision','',0),(9,1,'2014-10-11 18:21:34','2014-10-11 16:21:34','# Install Markdown on Wordpress\r\n\r\nFrom the official repository[1].\r\nSurf to <https://github.com/makotokw/wp-gfm/releases> and download the latest release.\r\n\r\n```bash\r\ncd /tmp\r\n\r\nwget https://github.com/makotokw/wp-gfm/archive/v0.7.2.tar.gz -O wp-gfm-0.7.2.tar.gz\r\nsudo tar -xvf wp-gfm-0.7.2.tar.gz -C /var/lib/wordpress/wp-content/plugins\r\n\r\nwget https://downloads.wordpress.org/plugin/wp-code-prettify.zip\r\nsudo unzip wp-code-prettify.zip -d /var/lib/wordpress/wp-content/plugins\r\n```\r\n\r\n* Visit <http://gingerik.nl/wp-admin/plugins.php> and activate the plugins;\r\n* Visit <http://gingerik.nl/wp-admin/options-general.php?page=wp-gfm> and check `All contents are markdown!`.\r\n\r\n[1] <https://github.com/makotokw/wp-gfm>\r\n','Markdown','','inherit','open','open','','4-revision-v1','','','2014-10-11 18:21:34','2014-10-11 16:21:34','',4,'http://gingerik.nl/?p=9',0,'revision','',0),(10,1,'2014-10-11 18:23:11','2014-10-11 16:23:11','# Install Markdown on Wordpress\r\n\r\nMake sure you download the latest plugings from [1] and [2].\r\n\r\n* Install the plugins\r\n\r\n```bash\r\ncd /tmp\r\n\r\nwget https://github.com/makotokw/wp-gfm/archive/v0.7.2.tar.gz -O wp-gfm-0.7.2.tar.gz\r\nsudo tar -xvf wp-gfm-0.7.2.tar.gz -C /var/lib/wordpress/wp-content/plugins\r\n\r\nwget https://downloads.wordpress.org/plugin/wp-code-prettify.zip\r\nsudo unzip wp-code-prettify.zip -d /var/lib/wordpress/wp-content/plugins\r\n```\r\n\r\n* Visit <http://gingerik.nl/wp-admin/plugins.php> and activate the plugins;\r\n* Visit <http://gingerik.nl/wp-admin/options-general.php?page=wp-gfm> and check `All contents are markdown!`.\r\n\r\n[1] <https://github.com/makotokw/wp-gfm>\r\n[2] <https://wordpress.org/plugins/wp-code-prettify>\r\n','Markdown','','inherit','open','open','','4-revision-v1','','','2014-10-11 18:23:11','2014-10-11 16:23:11','',4,'http://gingerik.nl/?p=10',0,'revision','',0),(11,1,'2014-10-11 18:23:35','2014-10-11 16:23:35','# Install Markdown on Wordpress\r\n\r\n_Make sure you download the latest plugings from [1] and [2]._\r\n\r\n* Install the plugins\r\n\r\n```bash\r\ncd /tmp\r\n\r\nwget https://github.com/makotokw/wp-gfm/archive/v0.7.2.tar.gz -O wp-gfm-0.7.2.tar.gz\r\nsudo tar -xvf wp-gfm-0.7.2.tar.gz -C /var/lib/wordpress/wp-content/plugins\r\n\r\nwget https://downloads.wordpress.org/plugin/wp-code-prettify.zip\r\nsudo unzip wp-code-prettify.zip -d /var/lib/wordpress/wp-content/plugins\r\n```\r\n\r\n* Visit <http://gingerik.nl/wp-admin/plugins.php> and activate the plugins;\r\n* Visit <http://gingerik.nl/wp-admin/options-general.php?page=wp-gfm> and check `All contents are markdown!`.\r\n\r\n[1] <https://github.com/makotokw/wp-gfm>\r\n[2] <https://wordpress.org/plugins/wp-code-prettify>\r\n','Markdown','','inherit','open','open','','4-revision-v1','','','2014-10-11 18:23:35','2014-10-11 16:23:35','',4,'http://gingerik.nl/?p=11',0,'revision','',0),(12,1,'2014-10-11 18:25:53','2014-10-11 16:25:53','# Install Markdown on Wordpress\r\n\r\n_Make sure you download the latest plugings from [1] and [2]._\r\n\r\n* Install the plugins\r\n```bash\r\ncd /tmp\r\n\r\nwget https://github.com/makotokw/wp-gfm/archive/v0.7.2.tar.gz -O wp-gfm-0.7.2.tar.gz\r\nsudo tar -xvf wp-gfm-0.7.2.tar.gz -C /var/lib/wordpress/wp-content/plugins\r\n\r\nwget https://downloads.wordpress.org/plugin/wp-code-prettify.zip\r\nsudo unzip wp-code-prettify.zip -d /var/lib/wordpress/wp-content/plugins\r\n```\r\n* Visit <http://gingerik.nl/wp-admin/plugins.php> and activate the plugins;\r\n* Visit <http://gingerik.nl/wp-admin/options-general.php?page=wp-gfm> and check `All contents are markdown!`;\r\n* Visit <https://wordpress.org/plugins/wp-code-prettify> and set `Allways load the js/css files?` to `Yes`.\r\n\r\n[1] <https://github.com/makotokw/wp-gfm>\r\n[2] <https://wordpress.org/plugins/wp-code-prettify>\r\n','Markdown','','inherit','open','open','','4-revision-v1','','','2014-10-11 18:25:53','2014-10-11 16:25:53','',4,'http://gingerik.nl/?p=12',0,'revision','',0),(13,1,'2014-10-11 18:33:04','2014-10-11 16:33:04','# Install Markdown on Wordpress\r\n\r\n_Make sure you download the latest plugings from [1] and [2]._\r\n\r\n* Install the plugins\r\n```bash\r\ncd /tmp\r\n\r\nwget https://github.com/makotokw/wp-gfm/archive/v0.7.2.tar.gz -O wp-gfm-0.7.2.tar.gz\r\nsudo tar -xvf wp-gfm-0.7.2.tar.gz -C /var/lib/wordpress/wp-content/plugins\r\n\r\nwget https://downloads.wordpress.org/plugin/wp-code-prettify.zip\r\nsudo unzip wp-code-prettify.zip -d /var/lib/wordpress/wp-content/plugins\r\n```\r\n* Visit <http://gingerik.nl/wp-admin/plugins.php> and activate the plugins;\r\n* Visit <http://gingerik.nl/wp-admin/options-general.php?page=wp-gfm> and check `All contents are markdown!`;\r\n* Visit <https://wordpress.org/plugins/wp-code-prettify> and set `Always load the js/css files?` to `Yes`.\r\n\r\n[1] <https://github.com/makotokw/wp-gfm>\r\n[2] <https://wordpress.org/plugins/wp-code-prettify>\r\n','Markdown','','inherit','open','open','','4-revision-v1','','','2014-10-11 18:33:04','2014-10-11 16:33:04','',4,'http://gingerik.nl/?p=13',0,'revision','',0),(14,1,'2014-10-11 18:34:19','2014-10-11 16:34:19','','General','','inherit','open','open','','2-revision-v1','','','2014-10-11 18:34:19','2014-10-11 16:34:19','',2,'http://gingerik.nl/?p=14',0,'revision','',0),(15,1,'2014-10-11 18:38:17','2014-10-11 16:38:17','In my DD-WRT firmware, the NAT loopback is broken. Therefore, if I want to connect to an external hostname from within the internal network, this fails. Though it _does_ work if I connect from outside the LAN!\r\n\r\nThe fix is easy[1], simply add the following command in `administration > commands` as a `startup command`:\r\n\r\n```bash\r\niptables -t nat -I POSTROUTING -o br0 -s 192.168.1.0/24 -d 192.168.1.0/24 -j MASQUERADE\r\n```\r\n\r\n[1] <http://hax.at/text/41>','DD-WRT: internal port forward via a hostname','','publish','open','open','','dd-wrt-internal-port-forward-via-a-hostname','','','2014-10-12 00:38:23','2014-10-11 22:38:23','',0,'http://gingerik.nl/?p=15',0,'post','',0),(16,1,'2014-10-11 18:35:42','2014-10-11 16:35:42','\r\n\r\ndd-wrt internal port forward from external hostname / ip adress\r\n03.03.2011\r\n\r\n\r\nIn recent DD-WRT versions NAT loopback is broken, therefore if you want to connect to an external ip / hostname from the internal network, this does not work even though it works if you connect from outside your lan!\r\n\r\nthe fix is easy, simply add the following command in administration -> commands as a startup command:\r\n\r\niptables -t nat -I POSTROUTING -o br0 -s 192.168.144.0/24 -d 192.168.144.0/24 -j MASQUERADE\r\n\r\n(of course you need to change 192.168.144.0 to your local lan subnet!)\r\n\r\n[1] http://hax.at/text/41','DD-WRT: internal port forward via hostname','','inherit','open','open','','15-revision-v1','','','2014-10-11 18:35:42','2014-10-11 16:35:42','',15,'http://gingerik.nl/?p=16',0,'revision','',0),(17,1,'2014-10-11 18:37:58','2014-10-11 16:37:58','In recent DD-WRT versions the NAT loopback is broken. Therefore, if you want to connect to an external hostname from within the internal network, this fails. Though it _does_ work if you connect from outside your LAN!\r\n\r\nThe fix is easy[1], simply add the following command in `administration > commands` as a `startup command`:\r\n\r\n```bash\r\niptables -t nat -I POSTROUTING -o br0 -s 192.168.1.0/24 -d 192.168.1.0/24 -j MASQUERADE\r\n```\r\n\r\n[1] http://hax.at/text/41','DD-WRT: internal port forward via a hostname','','inherit','open','open','','15-revision-v1','','','2014-10-11 18:37:58','2014-10-11 16:37:58','',15,'http://gingerik.nl/?p=17',0,'revision','',0),(18,1,'2014-10-11 18:38:17','2014-10-11 16:38:17','In recent DD-WRT versions the NAT loopback is broken. Therefore, if you want to connect to an external hostname from within the internal network, this fails. Though it _does_ work if you connect from outside your LAN!\r\n\r\nThe fix is easy[1], simply add the following command in `administration > commands` as a `startup command`:\r\n\r\n```bash\r\niptables -t nat -I POSTROUTING -o br0 -s 192.168.1.0/24 -d 192.168.1.0/24 -j MASQUERADE\r\n```\r\n\r\n[1] <http://hax.at/text/41>','DD-WRT: internal port forward via a hostname','','inherit','open','open','','15-revision-v1','','','2014-10-11 18:38:17','2014-10-11 16:38:17','',15,'http://gingerik.nl/?p=18',0,'revision','',0),(20,1,'2014-10-11 18:39:32','2014-10-11 16:39:32','In my DD-WRT firmware, the NAT loopback is broken. Therefore, if you want to connect to an external hostname from within the internal network, this fails. Though it _does_ work if you connect from outside your LAN!\r\n\r\nThe fix is easy[1], simply add the following command in `administration > commands` as a `startup command`:\r\n\r\n```bash\r\niptables -t nat -I POSTROUTING -o br0 -s 192.168.1.0/24 -d 192.168.1.0/24 -j MASQUERADE\r\n```\r\n\r\n[1] <http://hax.at/text/41>','DD-WRT: internal port forward via a hostname','','inherit','open','open','','15-revision-v1','','','2014-10-11 18:39:32','2014-10-11 16:39:32','',15,'http://gingerik.nl/?p=20',0,'revision','',0),(21,1,'2014-10-11 18:40:34','2014-10-11 16:40:34','In my DD-WRT firmware, the NAT loopback is broken. Therefore, if I want to connect to an external hostname from within the internal network, this fails. Though it _does_ work if I connect from outside the LAN!\r\n\r\nThe fix is easy[1], simply add the following command in `administration > commands` as a `startup command`:\r\n\r\n```bash\r\niptables -t nat -I POSTROUTING -o br0 -s 192.168.1.0/24 -d 192.168.1.0/24 -j MASQUERADE\r\n```\r\n\r\n[1] <http://hax.at/text/41>','DD-WRT: internal port forward via a hostname','','inherit','open','open','','15-revision-v1','','','2014-10-11 18:40:34','2014-10-11 16:40:34','',15,'http://gingerik.nl/?p=21',0,'revision','',0),(22,1,'2014-10-11 10:05:13','2014-10-11 08:05:13','_Install and configure using the alternate Debian method[1]._\r\n\r\n## Installation\r\n\r\nInstall WordPress, Apache & MySQL.\r\n\r\n```bash\r\nsudo apt-get install wordpress apache2 mysql-server\r\n```\r\n\r\n## Configuration\r\n\r\nSet-up MySQL.\r\n\r\n```bash\r\ncd /usr/share/doc/wordpress/examples/\r\nsudo gunzip setup-mysql.gzip\r\nsudo bash setup-mysql -n wordpress blog.gingerik.nl\r\n```\r\n\r\nConfigure & reload Apache. First edit `/etc/apache2/sites-available/blog.gingerik.nl` and add the following contents:\r\n\r\n```.linenumbers\r\nNameVirtualHost *:80\r\n\r\n<VirtualHost *:80>\r\n    UseCanonicalName Off\r\n    VirtualDocumentRoot /usr/share/wordpress\r\n    Options All\r\n\r\n    # wp-content in /srv/www/wp-content/$0\r\n    RewriteEngine On\r\n    RewriteRule ^/wp-content/(.*)$ /srv/www/wp-content/%{HTTP_HOST}/$1\r\n</VirtualHost>\r\n```\r\n\r\nThen enable the site & some modules.\r\n\r\n```bash\r\nsudo a2dissite default\r\nsudo a2ensite blog.gingerik.nl\r\nsudo a2enmod rewrite\r\nsudo a2enmod vhost_alias\r\nsudo service apache2 restart\r\n```\r\n\r\nNow visit <http://blog.gingerik.nl> to start blogging!\r\n\r\n## Extra\r\n\r\n### Install theme\r\n\r\n```bash\r\ncd /tmp\r\nwget https://downloads.wordpress.org/theme/sparkling.1.6.0.zip\r\nsudo unzip sparkling.1.6.0.zip -d /var/lib/wordpress/wp-content/themes/\r\n```\r\n\r\nAnd activate your theme!\r\n\r\n[1] <https://wiki.debian.org/WordPress>','WordPress installation ','','publish','open','open','','wordpress-installation','','','2014-10-15 08:59:52','2014-10-15 06:59:52','',0,'http://gingerik.nl/?p=22',0,'post','',0),(23,1,'2014-10-12 00:40:56','2014-10-11 22:40:56','','WordPress installation ','','inherit','open','open','','22-revision-v1','','','2014-10-12 00:40:56','2014-10-11 22:40:56','',22,'http://gingerik.nl/?p=23',0,'revision','',0),(24,1,'2014-10-12 07:51:16','2014-10-12 05:51:16','\r\n_Make sure you download the latest plugings from [1] and [2]._\r\n\r\n* Install the plugins\r\n```bash .linenums\r\ncd /tmp\r\n\r\nwget https://github.com/makotokw/wp-gfm/archive/v0.7.2.tar.gz -O wp-gfm-0.7.2.tar.gz\r\nsudo tar -xvf wp-gfm-0.7.2.tar.gz -C /var/lib/wordpress/wp-content/plugins\r\n\r\nwget https://downloads.wordpress.org/plugin/wp-code-prettify.zip\r\nsudo unzip wp-code-prettify.zip -d /var/lib/wordpress/wp-content/plugins\r\n```\r\n* Visit <http://gingerik.nl/wp-admin/plugins.php> and activate the plugins;\r\n* Visit <http://gingerik.nl/wp-admin/options-general.php?page=wp-gfm> and check `All contents are markdown!`;\r\n* Visit <https://wordpress.org/plugins/wp-code-prettify> and set `Always load the js/css files?` to `Yes`.\r\n\r\n[1] <https://github.com/makotokw/wp-gfm>\r\n[2] <https://wordpress.org/plugins/wp-code-prettify>\r\n','Install Markdown on Wordpress','','inherit','open','open','','4-revision-v1','','','2014-10-12 07:51:16','2014-10-12 05:51:16','',4,'http://gingerik.nl/?p=24',0,'revision','',0),(25,1,'2014-10-12 14:04:28','2014-10-12 12:04:28','```bash\r\nsudo apt-get install wordpress apache2 mysql-server\r\ncd /usr/share/doc/wordpress/examples/\r\nsudo gunzip setup-mysql.gzip\r\nsudo bash setup-mysql -n wordpress blog.gingerik.nl\r\nsudo vim /etc/apache2/sites-available/blog.gingerik.nl\r\n```\r\n\r\nAdd the following contents:\r\n\r\n```.linenumbers\r\nNameVirtualHost *:80\r\n\r\n<VirtualHost *:80>\r\n    UseCanonicalName Off\r\n    VirtualDocumentRoot /usr/share/wordpress\r\n    Options All\r\n\r\n    # wp-content in /srv/www/wp-content/$0\r\n    RewriteEngine On\r\n    RewriteRule ^/wp-content/(.*)$ /srv/www/wp-content/%{HTTP_HOST}/$1\r\n</VirtualHost>\r\n```\r\n\r\n```bash\r\ncd /etc/apache2/sites-enabled/\r\nsudo ln -s ../sites-available/blog.gingerik.nl\r\nsudo a2enmod rewrite\r\nsudo a2enmod vhost_alias\r\nsudo service apache2 restart\r\n```\r\n\r\n[1] <https://wiki.debian.org/WordPress>','WordPress installation ','','inherit','open','open','','22-revision-v1','','','2014-10-12 14:04:28','2014-10-12 12:04:28','',22,'http://blog.gingerik.nl/?p=25',0,'revision','',0),(26,1,'2014-10-12 14:04:58','2014-10-12 12:04:58','```\r\nsudo apt-get install wordpress apache2 mysql-server\r\ncd /usr/share/doc/wordpress/examples/\r\nsudo gunzip setup-mysql.gzip\r\nsudo bash setup-mysql -n wordpress blog.gingerik.nl\r\nsudo vim /etc/apache2/sites-available/blog.gingerik.nl\r\n```\r\n\r\nAdd the following contents:\r\n\r\n```.linenumbers\r\nNameVirtualHost *:80\r\n\r\n<VirtualHost *:80>\r\n    UseCanonicalName Off\r\n    VirtualDocumentRoot /usr/share/wordpress\r\n    Options All\r\n\r\n    # wp-content in /srv/www/wp-content/$0\r\n    RewriteEngine On\r\n    RewriteRule ^/wp-content/(.*)$ /srv/www/wp-content/%{HTTP_HOST}/$1\r\n</VirtualHost>\r\n```\r\n\r\n```bash\r\ncd /etc/apache2/sites-enabled/\r\nsudo ln -s ../sites-available/blog.gingerik.nl\r\nsudo a2enmod rewrite\r\nsudo a2enmod vhost_alias\r\nsudo service apache2 restart\r\n```\r\n\r\n[1] <https://wiki.debian.org/WordPress>','WordPress installation ','','inherit','open','open','','22-revision-v1','','','2014-10-12 14:04:58','2014-10-12 12:04:58','',22,'http://blog.gingerik.nl/?p=26',0,'revision','',0),(27,1,'2014-10-12 14:05:06','2014-10-12 12:05:06','```sh\r\nsudo apt-get install wordpress apache2 mysql-server\r\ncd /usr/share/doc/wordpress/examples/\r\nsudo gunzip setup-mysql.gzip\r\nsudo bash setup-mysql -n wordpress blog.gingerik.nl\r\nsudo vim /etc/apache2/sites-available/blog.gingerik.nl\r\n```\r\n\r\nAdd the following contents:\r\n\r\n```.linenumbers\r\nNameVirtualHost *:80\r\n\r\n<VirtualHost *:80>\r\n    UseCanonicalName Off\r\n    VirtualDocumentRoot /usr/share/wordpress\r\n    Options All\r\n\r\n    # wp-content in /srv/www/wp-content/$0\r\n    RewriteEngine On\r\n    RewriteRule ^/wp-content/(.*)$ /srv/www/wp-content/%{HTTP_HOST}/$1\r\n</VirtualHost>\r\n```\r\n\r\n```bash\r\ncd /etc/apache2/sites-enabled/\r\nsudo ln -s ../sites-available/blog.gingerik.nl\r\nsudo a2enmod rewrite\r\nsudo a2enmod vhost_alias\r\nsudo service apache2 restart\r\n```\r\n\r\n[1] <https://wiki.debian.org/WordPress>','WordPress installation ','','inherit','open','open','','22-revision-v1','','','2014-10-12 14:05:06','2014-10-12 12:05:06','',22,'http://blog.gingerik.nl/?p=27',0,'revision','',0),(28,1,'2014-10-12 14:05:13','2014-10-12 12:05:13','```bash\r\nsudo apt-get install wordpress apache2 mysql-server\r\ncd /usr/share/doc/wordpress/examples/\r\nsudo gunzip setup-mysql.gzip\r\nsudo bash setup-mysql -n wordpress blog.gingerik.nl\r\nsudo vim /etc/apache2/sites-available/blog.gingerik.nl\r\n```\r\n\r\nAdd the following contents:\r\n\r\n```.linenumbers\r\nNameVirtualHost *:80\r\n\r\n<VirtualHost *:80>\r\n    UseCanonicalName Off\r\n    VirtualDocumentRoot /usr/share/wordpress\r\n    Options All\r\n\r\n    # wp-content in /srv/www/wp-content/$0\r\n    RewriteEngine On\r\n    RewriteRule ^/wp-content/(.*)$ /srv/www/wp-content/%{HTTP_HOST}/$1\r\n</VirtualHost>\r\n```\r\n\r\n```bash\r\ncd /etc/apache2/sites-enabled/\r\nsudo ln -s ../sites-available/blog.gingerik.nl\r\nsudo a2enmod rewrite\r\nsudo a2enmod vhost_alias\r\nsudo service apache2 restart\r\n```\r\n\r\n[1] <https://wiki.debian.org/WordPress>','WordPress installation ','','inherit','open','open','','22-revision-v1','','','2014-10-12 14:05:13','2014-10-12 12:05:13','',22,'http://blog.gingerik.nl/?p=28',0,'revision','',0),(29,1,'2014-10-12 14:05:54','2014-10-12 12:05:54','Install and configure using the alternate Debian method[1].\r\n\r\n```bash\r\nsudo apt-get install wordpress apache2 mysql-server\r\ncd /usr/share/doc/wordpress/examples/\r\nsudo gunzip setup-mysql.gzip\r\nsudo bash setup-mysql -n wordpress blog.gingerik.nl\r\nsudo vim /etc/apache2/sites-available/blog.gingerik.nl\r\n```\r\n\r\nAdd the following contents:\r\n\r\n```.linenumbers\r\nNameVirtualHost *:80\r\n\r\n<VirtualHost *:80>\r\n    UseCanonicalName Off\r\n    VirtualDocumentRoot /usr/share/wordpress\r\n    Options All\r\n\r\n    # wp-content in /srv/www/wp-content/$0\r\n    RewriteEngine On\r\n    RewriteRule ^/wp-content/(.*)$ /srv/www/wp-content/%{HTTP_HOST}/$1\r\n</VirtualHost>\r\n```\r\n\r\n```bash\r\ncd /etc/apache2/sites-enabled/\r\nsudo ln -s ../sites-available/blog.gingerik.nl\r\nsudo a2enmod rewrite\r\nsudo a2enmod vhost_alias\r\nsudo service apache2 restart\r\n```\r\n\r\n[1] <https://wiki.debian.org/WordPress>','WordPress installation ','','inherit','open','open','','22-revision-v1','','','2014-10-12 14:05:54','2014-10-12 12:05:54','',22,'http://blog.gingerik.nl/?p=29',0,'revision','',0),(30,1,'2014-10-14 11:59:19','2014-10-14 09:59:19','_Install and configure using the alternate Debian method[1]._\r\n\r\n## Installation\r\n\r\nInstall WordPress, Apache & MySQL.\r\n\r\n```bash\r\nsudo apt-get install wordpress apache2 mysql-server\r\n```\r\n\r\n## Configuration\r\n\r\nSet-up MySQL.\r\n\r\n```bash\r\ncd /usr/share/doc/wordpress/examples/\r\nsudo gunzip setup-mysql.gzip\r\nsudo bash setup-mysql -n wordpress blog.gingerik.nl\r\n```\r\n\r\nConfigure & reload Apache. First edit `/etc/apache2/sites-available/blog.gingerik.nl` and add the following contents:\r\n\r\n```.linenumbers\r\nNameVirtualHost *:80\r\n\r\n<VirtualHost *:80>\r\n    UseCanonicalName Off\r\n    VirtualDocumentRoot /usr/share/wordpress\r\n    Options All\r\n\r\n    # wp-content in /srv/www/wp-content/$0\r\n    RewriteEngine On\r\n    RewriteRule ^/wp-content/(.*)$ /srv/www/wp-content/%{HTTP_HOST}/$1\r\n</VirtualHost>\r\n```\r\n\r\nThen enable the site & some modules.\r\n\r\n```bash\r\ncd /etc/apache2/sites-enabled/\r\nsudo ln -s ../sites-available/blog.gingerik.nl\r\nsudo a2enmod rewrite\r\nsudo a2enmod vhost_alias\r\nsudo service apache2 restart\r\n```\r\n\r\nNow visit <http://blog.gingerik.nl> to start blogging!\r\n\r\n## Extra\r\n\r\n### Install theme\r\n\r\n```bash\r\ncd /tmp\r\nwget https://downloads.wordpress.org/theme/sparkling.1.6.0.zip\r\nsudo unzip sparkling.1.6.0.zip -d /var/lib/wordpress/wp-content/themes/\r\n```\r\n\r\nAnd activate your theme!\r\n\r\n[1] <https://wiki.debian.org/WordPress>','WordPress installation ','','inherit','open','open','','22-autosave-v1','','','2014-10-14 11:59:19','2014-10-14 09:59:19','',22,'http://blog.gingerik.nl/?p=30',0,'revision','',0),(31,1,'2014-10-12 14:07:01','2014-10-12 12:07:01','_Install and configure using the alternate Debian method[1]._\r\n\r\n## Installation\r\n\r\n```bash\r\nsudo apt-get install wordpress apache2 mysql-server\r\n```\r\n\r\n## Configuration\r\n\r\n```bash\r\ncd /usr/share/doc/wordpress/examples/\r\nsudo gunzip setup-mysql.gzip\r\nsudo bash setup-mysql -n wordpress blog.gingerik.nl\r\nsudo vim /etc/apache2/sites-available/blog.gingerik.nl\r\n```\r\n\r\nAdd the following contents:\r\n\r\n```.linenumbers\r\nNameVirtualHost *:80\r\n\r\n<VirtualHost *:80>\r\n    UseCanonicalName Off\r\n    VirtualDocumentRoot /usr/share/wordpress\r\n    Options All\r\n\r\n    # wp-content in /srv/www/wp-content/$0\r\n    RewriteEngine On\r\n    RewriteRule ^/wp-content/(.*)$ /srv/www/wp-content/%{HTTP_HOST}/$1\r\n</VirtualHost>\r\n```\r\n\r\n```bash\r\ncd /etc/apache2/sites-enabled/\r\nsudo ln -s ../sites-available/blog.gingerik.nl\r\nsudo a2enmod rewrite\r\nsudo a2enmod vhost_alias\r\nsudo service apache2 restart\r\n```\r\n\r\n[1] <https://wiki.debian.org/WordPress>','WordPress installation ','','inherit','open','open','','22-revision-v1','','','2014-10-12 14:07:01','2014-10-12 12:07:01','',22,'http://blog.gingerik.nl/?p=31',0,'revision','',0),(32,1,'2014-10-12 14:11:48','2014-10-12 12:11:48','_Install and configure using the alternate Debian method[1]._\r\n\r\n## Installation\r\n\r\nInstall WordPress, Apache & MySQL.\r\n\r\n```bash\r\nsudo apt-get install wordpress apache2 mysql-server\r\n```\r\n\r\n## Configuration\r\n\r\nSet-up MySQL.\r\n\r\n```bash\r\ncd /usr/share/doc/wordpress/examples/\r\nsudo gunzip setup-mysql.gzip\r\nsudo bash setup-mysql -n wordpress blog.gingerik.nl\r\n```\r\n\r\nConfigure & reload Apache. First edit `/etc/apache2/sites-available/blog.gingerik.nl` and add the following contents:\r\n\r\n```.linenumbers\r\nNameVirtualHost *:80\r\n\r\n<VirtualHost *:80>\r\n    UseCanonicalName Off\r\n    VirtualDocumentRoot /usr/share/wordpress\r\n    Options All\r\n\r\n    # wp-content in /srv/www/wp-content/$0\r\n    RewriteEngine On\r\n    RewriteRule ^/wp-content/(.*)$ /srv/www/wp-content/%{HTTP_HOST}/$1\r\n</VirtualHost>\r\n```\r\n\r\nThen enable the site & some modules.\r\n\r\n```bash\r\ncd /etc/apache2/sites-enabled/\r\nsudo ln -s ../sites-available/blog.gingerik.nl\r\nsudo a2enmod rewrite\r\nsudo a2enmod vhost_alias\r\nsudo service apache2 restart\r\n```\r\n\r\nNow visit <blog.gingerik.nl> to start blogging!\r\n\r\n[1] <https://wiki.debian.org/WordPress>','WordPress installation ','','inherit','open','open','','22-revision-v1','','','2014-10-12 14:11:48','2014-10-12 12:11:48','',22,'http://blog.gingerik.nl/?p=32',0,'revision','',0),(33,1,'2014-10-12 14:12:16','2014-10-12 12:12:16','_Install and configure using the alternate Debian method[1]._\r\n\r\n## Installation\r\n\r\nInstall WordPress, Apache & MySQL.\r\n\r\n```bash\r\nsudo apt-get install wordpress apache2 mysql-server\r\n```\r\n\r\n## Configuration\r\n\r\nSet-up MySQL.\r\n\r\n```bash\r\ncd /usr/share/doc/wordpress/examples/\r\nsudo gunzip setup-mysql.gzip\r\nsudo bash setup-mysql -n wordpress blog.gingerik.nl\r\n```\r\n\r\nConfigure & reload Apache. First edit `/etc/apache2/sites-available/blog.gingerik.nl` and add the following contents:\r\n\r\n```.linenumbers\r\nNameVirtualHost *:80\r\n\r\n<VirtualHost *:80>\r\n    UseCanonicalName Off\r\n    VirtualDocumentRoot /usr/share/wordpress\r\n    Options All\r\n\r\n    # wp-content in /srv/www/wp-content/$0\r\n    RewriteEngine On\r\n    RewriteRule ^/wp-content/(.*)$ /srv/www/wp-content/%{HTTP_HOST}/$1\r\n</VirtualHost>\r\n```\r\n\r\nThen enable the site & some modules.\r\n\r\n```bash\r\ncd /etc/apache2/sites-enabled/\r\nsudo ln -s ../sites-available/blog.gingerik.nl\r\nsudo a2enmod rewrite\r\nsudo a2enmod vhost_alias\r\nsudo service apache2 restart\r\n```\r\n\r\nNow visit <http://blog.gingerik.nl> to start blogging!\r\n\r\n[1] <https://wiki.debian.org/WordPress>','WordPress installation ','','inherit','open','open','','22-revision-v1','','','2014-10-12 14:12:16','2014-10-12 12:12:16','',22,'http://blog.gingerik.nl/?p=33',0,'revision','',0),(34,1,'2014-10-15 08:59:12','2014-10-15 06:59:12','## Installation\n\n_Make sure you download the latest plugings from [1] and [2]._\n\nInstall the plugins.\n\n```bash\ncd /tmp\n# install wp-gfm\nwget https://github.com/makotokw/wp-gfm/archive/v0.7.2.tar.gz -O wp-gfm-0.7.2.tar.gz\nsudo tar -xvf wp-gfm-0.7.2.tar.gz -C /var/lib/wordpress/wp-content/plugins\n# install wp-code-prettify\nwget https://downloads.wordpress.org/plugin/wp-code-prettify.zip\nsudo unzip wp-code-prettify.zip -d /var/lib/wordpress/wp-content/plugins\n```\n\n## Configuration\n\n* Visit <http://blog.gingerik.nl/wp-admin/plugins.php> and activate the plugins;\n* Visit <http://blog.gingerik.nl/wp-admin/options-general.php?page=wp-gfm> and check `All contents are markdown!`;\n* Visit <http://blog.gingerik.nl/wp-admin/options-general.php?page=wp-code-prettify> and:\n  - set _Always load the js/css files?_ to `Yes`;\n  - add some custom CSS to change the line numbering and indent when adding `.linenums`:\n\n```\npre.linenums {\n    margin-left: 2em;\n}\nol {\n    counter-reset: item;\n    margin-left: 0;\n    padding-left: 0;\n}\nol > li {\n    display: block;\n    margin-bottom: .25em;\n    margin-left: 2em;\n}\nol > li:before {\n    display: inline-block;\n    content: counter(item, decimal-leading-zero) \" \";\n    counter-increment: item;\n    width: 2em;\n    margin-left: -2em;\n}\n```\n\n[1] <https://github.com/makotokw/wp-gfm>\n[2] <https://wordpress.org/plugins/wp-code-prettify>\n','Install Markdown & Prettify on Wordpress','','inherit','open','open','','4-autosave-v1','','','2014-10-15 08:59:12','2014-10-15 06:59:12','',4,'http://blog.gingerik.nl/?p=34',0,'revision','',0),(35,1,'2014-10-12 14:15:31','2014-10-12 12:15:31','_Make sure you download the latest plugings from [1] and [2]._\r\n\r\n* Install the plugins\r\n```bash\r\ncd /tmp\r\n\r\nwget https://github.com/makotokw/wp-gfm/archive/v0.7.2.tar.gz -O wp-gfm-0.7.2.tar.gz\r\nsudo tar -xvf wp-gfm-0.7.2.tar.gz -C /var/lib/wordpress/wp-content/plugins\r\n\r\nwget https://downloads.wordpress.org/plugin/wp-code-prettify.zip\r\nsudo unzip wp-code-prettify.zip -d /var/lib/wordpress/wp-content/plugins\r\n```\r\n* Visit <http://gingerik.nl/wp-admin/plugins.php> and activate the plugins;\r\n* Visit <http://gingerik.nl/wp-admin/options-general.php?page=wp-gfm> and check `All contents are markdown!`;\r\n* Visit <https://wordpress.org/plugins/wp-code-prettify> and:\r\n  - set `Always load the js/css files?` to `Yes`;\r\n  - add some custom CSS to change the line numbering:\r\n\r\n```\r\nol {\r\n    counter-reset: item;\r\n    margin-left: 0;\r\n    padding-left: 0;\r\n}\r\nol > li {\r\n    display: block;\r\n    margin-bottom: .25em;\r\n    margin-left: 2em;\r\n}\r\nol > li:before {\r\n    display: inline-block;\r\n    content: counter(item, decimal-leading-zero) \" \";\r\n    counter-increment: item;\r\n    width: 2em;\r\n    margin-left: -2em;\r\n}\r\n```\r\n\r\n[1] <https://github.com/makotokw/wp-gfm>\r\n[2] <https://wordpress.org/plugins/wp-code-prettify>\r\n','Install Markdown & Prettify on Wordpress','','inherit','open','open','','4-revision-v1','','','2014-10-12 14:15:31','2014-10-12 12:15:31','',4,'http://blog.gingerik.nl/?p=35',0,'revision','',0),(36,1,'2014-10-12 14:19:34','2014-10-12 12:19:34','## Installation\r\n\r\n_Make sure you download the latest plugings from [1] and [2]._\r\n\r\nInstall the plugins.\r\n\r\n```bash\r\ncd /tmp\r\n# install wp-gfm\r\nwget https://github.com/makotokw/wp-gfm/archive/v0.7.2.tar.gz -O wp-gfm-0.7.2.tar.gz\r\nsudo tar -xvf wp-gfm-0.7.2.tar.gz -C /var/lib/wordpress/wp-content/plugins\r\n# install wp-code-prettify\r\nwget https://downloads.wordpress.org/plugin/wp-code-prettify.zip\r\nsudo unzip wp-code-prettify.zip -d /var/lib/wordpress/wp-content/plugins\r\n```\r\n\r\n## Configuration\r\n\r\n* Visit <http://blog.gingerik.nl/wp-admin/plugins.php> and activate the plugins;\r\n* Visit <http://blog.gingerik.nl/wp-admin/options-general.php?page=wp-gfm> and check `All contents are markdown!`;\r\n* Visit <https://wordpress.org/plugins/wp-code-prettify> and:\r\n  - set `Always load the js/css files?` to `Yes`;\r\n  - add some custom CSS to change the line numbering:\r\n\r\n```\r\nol {\r\n    counter-reset: item;\r\n    margin-left: 0;\r\n    padding-left: 0;\r\n}\r\nol > li {\r\n    display: block;\r\n    margin-bottom: .25em;\r\n    margin-left: 2em;\r\n}\r\nol > li:before {\r\n    display: inline-block;\r\n    content: counter(item, decimal-leading-zero) \" \";\r\n    counter-increment: item;\r\n    width: 2em;\r\n    margin-left: -2em;\r\n}\r\n```\r\n\r\n[1] <https://github.com/makotokw/wp-gfm>\r\n[2] <https://wordpress.org/plugins/wp-code-prettify>\r\n','Install Markdown & Prettify on Wordpress','','inherit','open','open','','4-revision-v1','','','2014-10-12 14:19:34','2014-10-12 12:19:34','',4,'http://blog.gingerik.nl/?p=36',0,'revision','',0),(37,1,'2014-08-03 14:21:34','2014-08-03 12:21:34','_Note that your device needs to be **rooted** in order for this to work!_\r\n\r\n## Preparation\r\n\r\nFirstly, pull `SystemUI.apk` and the device-specific framework from your device.\r\n\r\n```bash\r\nadb shell cp /system/priv-app/SystemUI.apk /sdcard/\r\nadb shell cp /system/framework/framework-res.apk /sdcard/\r\nadb pull /sdcard/SystemUI.apk .\r\nadb pull /sdcard/framework-res.apk .\r\n```\r\n\r\n## Decompiling\r\n\r\nNext, download `apktool_2.0.0rc2.jar` from [1], set the correct framework and decompile[2] `SystemUI.apk`.\r\n\r\n```bash\r\nwget https://bitbucket.org/iBotPeaches/apktool/downloads/apktool_2.0.0rc2.jar\r\njava -jar apktool_2.0.0rc2.jar if framework-res.apk\r\njava -jar apktool_2.0.0rc2.jar d SystemUI.apk\r\n```\r\n\r\n## Modification\r\n\r\nNow modify the package[3]: search for `onsText` and update the `TextView`\'s appropriate attribute to `android:maxLength=\"0\"`.\r\n\r\n```bash\r\nsed -i \'/onsText/ s/maxLength=\"[0-9]\\+\"/maxLength=\"0\"/\' SystemUI/res/layout/status_bar.xml\r\n```\r\n\r\n## Recompiling\r\n\r\nRecompile the modified version while preserving the signature (using `-c`), which will allow you to replace the APK later on.\r\n\r\n```bash\r\njava -jar apktool_2.0.0rc2.jar b SystemUI -c\r\n```\r\n\r\n## Re-installation\r\n\r\nFinally, push the modified `SystemUI.apk` to the device and install it.\r\n\r\n```bash\r\nadb push SystemUI/dist/SystemUI.apk /sdcard/SystemUI.apk\r\nadb shell su -c \"mount -o remount,rw /system\"\r\nadb shell su -c \"cp /system/priv-app/SystemUI.apk /system/priv-app/SystemUI.apk.BAK\"\r\nadb shell su -c \"cp /system/priv-app/SystemUI.odex /system/priv-app/SystemUI.odex.BAK\"\r\nadb shell su -c \"cp /sdcard/SystemUI.apk /system/priv-app/SystemUI.apk\"\r\nadb shell su -c \"rm /system/priv-app/SystemUI.odex\"\r\nadb shell su -c \"chmod 644 /system/priv-app/SystemUI.apk\"\r\nadb shell su -c \"mount -o remount,ro /system\"\r\nadb shell su -c \"reboot\"\r\n```\r\n\r\n[1] <https://code.google.com/p/android-apktool/>  \r\n[2] <http://forum.xda-developers.com/showthread.php?t=1760133>  \r\n[3] <http://forum.xda-developers.com/showthread.php?t=2021796>  \r\n','Hide the carrier label on your Moto G','','publish','open','open','','hide-the-carrier-label-on-your-moto-g','','','2014-11-14 09:46:57','2014-11-14 08:46:57','',0,'http://blog.gingerik.nl/?p=37',0,'post','',0),(38,1,'2014-10-12 14:24:35','2014-10-12 12:24:35','Firstly, pull `SystemUI.apk` and the device-specific framework from your device.\r\n\r\n    $ adb shell cp /system/priv-app/SystemUI.apk /sdcard/\r\n    $ adb shell cp /system/framework/framework-res.apk /sdcard/\r\n    $ adb pull /sdcard/SystemUI.apk .\r\n    $ adb pull /sdcard/framework-res.apk .\r\n\r\nNext, download `apktool_2.0.0b8.jar` from [1], set the correct framework and decompile[2] `SystemUI.apk`.\r\n\r\n    $ wget http://connortumbleson.com/apktool/test_versions/apktool_2.0.0b9.jar\r\n    $ java -jar apktool_2.0.0b9.jar if framework-res.apk\r\n    $ java -jar apktool_2.0.0b9.jar d SystemUI.apk\r\n\r\nNow modify the package[3]: search for `onsText` and update the `TextView`\'s appropriate attribute to `android:maxLength=\"0\"`.\r\n\r\n    $ sed -i \'/onsText/ s/maxLength=\"[0-9]\\+\"/maxLength=\"0\"/\' SystemUI/res/layout/status_bar.xml\r\n\r\nRecompile the modified version while preserving the signature (using `-c`), which will allow you to replace the APK later on.\r\n\r\n    $ java -jar apktool_2.0.0b9.jar b SystemUI -c\r\n\r\nFinally, push the modified `SystemUI.apk` to the device and install it.\r\n\r\n    $ adb push SystemUI/dist/SystemUI.apk /sdcard/SystemUI.apk\r\n    $ adb shell\r\n    $ su\r\n    # mount -o remount,rw /system\r\n    # cp /system/priv-app/SystemUI.apk /system/priv-app/SystemUI.apk.BAK\r\n    # cp /system/priv-app/SystemUI.odex /system/priv-app/SystemUI.odex.BAK\r\n    # cp /sdcard/SystemUI.apk /system/priv-app/SystemUI.apk\r\n    # rm /system/priv-app/SystemUI.odex\r\n    # chmod 644 /system/priv-app/SystemUI.apk\r\n    # mount -o remount,ro /system\r\n    # reboot\r\n\r\n[1] <https://code.google.com/p/android-apktool/>  \r\n[2] <http://forum.xda-developers.com/showthread.php?t=1760133>  \r\n[3] <http://forum.xda-developers.com/showthread.php?t=2021796>  \r\n','Hide the carrier label on your Moto G','','inherit','open','open','','37-revision-v1','','','2014-10-12 14:24:35','2014-10-12 12:24:35','',37,'http://blog.gingerik.nl/?p=38',0,'revision','',0),(39,1,'2014-10-12 14:27:24','2014-10-12 12:27:24','Firstly, pull `SystemUI.apk` and the device-specific framework from your device.\r\n\r\n```bash\r\nadb shell cp /system/priv-app/SystemUI.apk /sdcard/\r\nadb shell cp /system/framework/framework-res.apk /sdcard/\r\nadb pull /sdcard/SystemUI.apk .\r\nadb pull /sdcard/framework-res.apk .\r\n```\r\n\r\nNext, download `apktool_2.0.0b8.jar` from [1], set the correct framework and decompile[2] `SystemUI.apk`.\r\n\r\n```bash\r\nwget http://connortumbleson.com/apktool/test_versions/apktool_2.0.0b9.jar\r\njava -jar apktool_2.0.0b9.jar if framework-res.apk\r\njava -jar apktool_2.0.0b9.jar d SystemUI.apk\r\n```\r\n\r\nNow modify the package[3]: search for `onsText` and update the `TextView`\'s appropriate attribute to `android:maxLength=\"0\"`.\r\n\r\n```bash\r\nsed -i \'/onsText/ s/maxLength=\"[0-9]\\+\"/maxLength=\"0\"/\' SystemUI/res/layout/status_bar.xml\r\n```\r\n\r\nRecompile the modified version while preserving the signature (using `-c`), which will allow you to replace the APK later on.\r\n\r\n```bash\r\njava -jar apktool_2.0.0b9.jar b SystemUI -c\r\n```\r\n\r\nFinally, push the modified `SystemUI.apk` to the device and install it.\r\n\r\n```bash\r\nadb push SystemUI/dist/SystemUI.apk /sdcard/SystemUI.apk\r\nadb shell\r\nsu\r\nmount -o remount,rw /system\r\ncp /system/priv-app/SystemUI.apk /system/priv-app/SystemUI.apk.BAK\r\ncp /system/priv-app/SystemUI.odex /system/priv-app/SystemUI.odex.BAK\r\ncp /sdcard/SystemUI.apk /system/priv-app/SystemUI.apk\r\nrm /system/priv-app/SystemUI.odex\r\nchmod 644 /system/priv-app/SystemUI.apk\r\nmount -o remount,ro /system\r\nreboot\r\n```\r\n\r\n[1] <https://code.google.com/p/android-apktool/>  \r\n[2] <http://forum.xda-developers.com/showthread.php?t=1760133>  \r\n[3] <http://forum.xda-developers.com/showthread.php?t=2021796>  \r\n','Hide the carrier label on your Moto G','','inherit','open','open','','37-revision-v1','','','2014-10-12 14:27:24','2014-10-12 12:27:24','',37,'http://blog.gingerik.nl/?p=39',0,'revision','',0),(40,1,'2014-10-12 14:29:45','2014-10-12 12:29:45','Firstly, pull `SystemUI.apk` and the device-specific framework from your device.\r\n\r\n```bash\r\nadb shell cp /system/priv-app/SystemUI.apk /sdcard/\r\nadb shell cp /system/framework/framework-res.apk /sdcard/\r\nadb pull /sdcard/SystemUI.apk .\r\nadb pull /sdcard/framework-res.apk .\r\n```\r\n\r\nNext, download `apktool_2.0.0b8.jar` from [1], set the correct framework and decompile[2] `SystemUI.apk`.\r\n\r\n```bash\r\nwget http://connortumbleson.com/apktool/test_versions/apktool_2.0.0b9.jar\r\njava -jar apktool_2.0.0b9.jar if framework-res.apk\r\njava -jar apktool_2.0.0b9.jar d SystemUI.apk\r\n```\r\n\r\nNow modify the package[3]: search for `onsText` and update the `TextView`\'s appropriate attribute to `android:maxLength=\"0\"`.\r\n\r\n```bash\r\nsed -i \'/onsText/ s/maxLength=\"[0-9]\\+\"/maxLength=\"0\"/\' SystemUI/res/layout/status_bar.xml\r\n```\r\n\r\nRecompile the modified version while preserving the signature (using `-c`), which will allow you to replace the APK later on.\r\n\r\n```bash\r\njava -jar apktool_2.0.0b9.jar b SystemUI -c\r\n```\r\n\r\nFinally, push the modified `SystemUI.apk` to the device and install it.\r\n\r\n```bash\r\nadb push SystemUI/dist/SystemUI.apk /sdcard/SystemUI.apk\r\nadb shell \"su -c \'mount -o remount,rw /system; cp /system/priv-app/SystemUI.apk /system/priv-app/SystemUI.apk.BAK; cp /system/priv-app/SystemUI.odex /system/priv-app/SystemUI.odex.BAK; cp /sdcard/SystemUI.apk /system/priv-app/SystemUI.apk; rm /system/priv-app/SystemUI.odex; chmod 644 /system/priv-app/SystemUI.apk; mount -o remount,ro /system; reboot\'\"\r\n```\r\n\r\n[1] <https://code.google.com/p/android-apktool/>  \r\n[2] <http://forum.xda-developers.com/showthread.php?t=1760133>  \r\n[3] <http://forum.xda-developers.com/showthread.php?t=2021796>  \r\n','Hide the carrier label on your Moto G','','inherit','open','open','','37-revision-v1','','','2014-10-12 14:29:45','2014-10-12 12:29:45','',37,'http://blog.gingerik.nl/?p=40',0,'revision','',0),(41,1,'2014-10-12 14:31:44','2014-10-12 12:31:44','Firstly, pull `SystemUI.apk` and the device-specific framework from your device.\r\n\r\n```bash\r\nadb shell cp /system/priv-app/SystemUI.apk /sdcard/\r\nadb shell cp /system/framework/framework-res.apk /sdcard/\r\nadb pull /sdcard/SystemUI.apk .\r\nadb pull /sdcard/framework-res.apk .\r\n```\r\n\r\nNext, download `apktool_2.0.0b8.jar` from [1], set the correct framework and decompile[2] `SystemUI.apk`.\r\n\r\n```bash\r\nwget http://connortumbleson.com/apktool/test_versions/apktool_2.0.0b9.jar\r\njava -jar apktool_2.0.0b9.jar if framework-res.apk\r\njava -jar apktool_2.0.0b9.jar d SystemUI.apk\r\n```\r\n\r\nNow modify the package[3]: search for `onsText` and update the `TextView`\'s appropriate attribute to `android:maxLength=\"0\"`.\r\n\r\n```bash\r\nsed -i \'/onsText/ s/maxLength=\"[0-9]\\+\"/maxLength=\"0\"/\' SystemUI/res/layout/status_bar.xml\r\n```\r\n\r\nRecompile the modified version while preserving the signature (using `-c`), which will allow you to replace the APK later on.\r\n\r\n```bash\r\njava -jar apktool_2.0.0b9.jar b SystemUI -c\r\n```\r\n\r\nFinally, push the modified `SystemUI.apk` to the device and install it.\r\n\r\n```bash\r\nadb push SystemUI/dist/SystemUI.apk /sdcard/SystemUI.apk\r\nadb shell su -c \"mount -o remount,rw /system\"\r\nadb shell su -c \"cp /system/priv-app/SystemUI.apk /system/priv-app/SystemUI.apk.BAK\"\r\nadb shell su -c \"cp /system/priv-app/SystemUI.odex /system/priv-app/SystemUI.odex.BAK\"\r\nadb shell su -c \"cp /sdcard/SystemUI.apk /system/priv-app/SystemUI.apk\"\r\nadb shell su -c \"rm /system/priv-app/SystemUI.odex\"\r\nadb shell su -c \"chmod 644 /system/priv-app/SystemUI.apk\"\r\nadb shell su -c \"mount -o remount,ro /system\"\r\nadb shell su -c \"reboot\"\r\n```\r\n\r\n[1] <https://code.google.com/p/android-apktool/>  \r\n[2] <http://forum.xda-developers.com/showthread.php?t=1760133>  \r\n[3] <http://forum.xda-developers.com/showthread.php?t=2021796>  \r\n','Hide the carrier label on your Moto G','','inherit','open','open','','37-revision-v1','','','2014-10-12 14:31:44','2014-10-12 12:31:44','',37,'http://blog.gingerik.nl/?p=41',0,'revision','',0),(42,1,'2014-10-12 14:32:45','2014-10-12 12:32:45','_Note that your device needs to be rooted in order for this to work!_\r\n\r\nFirstly, pull `SystemUI.apk` and the device-specific framework from your device.\r\n\r\n```bash\r\nadb shell cp /system/priv-app/SystemUI.apk /sdcard/\r\nadb shell cp /system/framework/framework-res.apk /sdcard/\r\nadb pull /sdcard/SystemUI.apk .\r\nadb pull /sdcard/framework-res.apk .\r\n```\r\n\r\nNext, download `apktool_2.0.0b8.jar` from [1], set the correct framework and decompile[2] `SystemUI.apk`.\r\n\r\n```bash\r\nwget http://connortumbleson.com/apktool/test_versions/apktool_2.0.0b9.jar\r\njava -jar apktool_2.0.0b9.jar if framework-res.apk\r\njava -jar apktool_2.0.0b9.jar d SystemUI.apk\r\n```\r\n\r\nNow modify the package[3]: search for `onsText` and update the `TextView`\'s appropriate attribute to `android:maxLength=\"0\"`.\r\n\r\n```bash\r\nsed -i \'/onsText/ s/maxLength=\"[0-9]\\+\"/maxLength=\"0\"/\' SystemUI/res/layout/status_bar.xml\r\n```\r\n\r\nRecompile the modified version while preserving the signature (using `-c`), which will allow you to replace the APK later on.\r\n\r\n```bash\r\njava -jar apktool_2.0.0b9.jar b SystemUI -c\r\n```\r\n\r\nFinally, push the modified `SystemUI.apk` to the device and install it.\r\n\r\n```bash\r\nadb push SystemUI/dist/SystemUI.apk /sdcard/SystemUI.apk\r\nadb shell su -c \"mount -o remount,rw /system\"\r\nadb shell su -c \"cp /system/priv-app/SystemUI.apk /system/priv-app/SystemUI.apk.BAK\"\r\nadb shell su -c \"cp /system/priv-app/SystemUI.odex /system/priv-app/SystemUI.odex.BAK\"\r\nadb shell su -c \"cp /sdcard/SystemUI.apk /system/priv-app/SystemUI.apk\"\r\nadb shell su -c \"rm /system/priv-app/SystemUI.odex\"\r\nadb shell su -c \"chmod 644 /system/priv-app/SystemUI.apk\"\r\nadb shell su -c \"mount -o remount,ro /system\"\r\nadb shell su -c \"reboot\"\r\n```\r\n\r\n[1] <https://code.google.com/p/android-apktool/>  \r\n[2] <http://forum.xda-developers.com/showthread.php?t=1760133>  \r\n[3] <http://forum.xda-developers.com/showthread.php?t=2021796>  \r\n','Hide the carrier label on your Moto G','','inherit','open','open','','37-revision-v1','','','2014-10-12 14:32:45','2014-10-12 12:32:45','',37,'http://blog.gingerik.nl/?p=42',0,'revision','',0),(43,1,'2014-11-14 09:46:55','2014-11-14 08:46:55','_Note that your device needs to be **rooted** in order for this to work!_\n\n## Preparation\n\nFirstly, pull `SystemUI.apk` and the device-specific framework from your device.\n\n```bash\nadb shell cp /system/priv-app/SystemUI.apk /sdcard/\nadb shell cp /system/framework/framework-res.apk /sdcard/\nadb pull /sdcard/SystemUI.apk .\nadb pull /sdcard/framework-res.apk .\n```\n\n## Decompiling\n\nNext, download `apktool_2.0.0rc2.jar` from [1], set the correct framework and decompile[2] `SystemUI.apk`.\n\n```bash\nwget https://bitbucket.org/iBotPeaches/apktool/downloads/apktool_2.0.0rc2.jar\njava -jar apktool_2.0.0rc2.jar if framework-res.apk\njava -jar apktool_2.0.0rc2.jar d SystemUI.apk\n```\n\n## Modification\n\nNow modify the package[3]: search for `onsText` and update the `TextView`\'s appropriate attribute to `android:maxLength=\"0\"`.\n\n```bash\nsed -i \'/onsText/ s/maxLength=\"[0-9]\\+\"/maxLength=\"0\"/\' SystemUI/res/layout/status_bar.xml\n```\n\n## Recompiling\n\nRecompile the modified version while preserving the signature (using `-c`), which will allow you to replace the APK later on.\n\n```bash\njava -jar apktool_2.0.0rc2.jar b SystemUI -c\n```\n\n## Re-installation\n\nFinally, push the modified `SystemUI.apk` to the device and install it.\n\n```bash\nadb push SystemUI/dist/SystemUI.apk /sdcard/SystemUI.apk\nadb shell su -c \"mount -o remount,rw /system\"\nadb shell su -c \"cp /system/priv-app/SystemUI.apk /system/priv-app/SystemUI.apk.BAK\"\nadb shell su -c \"cp /system/priv-app/SystemUI.odex /system/priv-app/SystemUI.odex.BAK\"\nadb shell su -c \"cp /sdcard/SystemUI.apk /system/priv-app/SystemUI.apk\"\nadb shell su -c \"rm /system/priv-app/SystemUI.odex\"\nadb shell su -c \"chmod 644 /system/priv-app/SystemUI.apk\"\nadb shell su -c \"mount -o remount,ro /system\"\nadb shell su -c \"reboot\"\n```\n\n[1] <https://code.google.com/p/android-apktool/>  \n[2] <http://forum.xda-developers.com/showthread.php?t=1760133>  \n[3] <http://forum.xda-developers.com/showthread.php?t=2021796>  \n','Hide the carrier label on your Moto G','','inherit','open','open','','37-autosave-v1','','','2014-11-14 09:46:55','2014-11-14 08:46:55','',37,'http://blog.gingerik.nl/?p=43',0,'revision','',0),(44,1,'2014-10-12 14:34:05','2014-10-12 12:34:05','_Note that your device needs to be **rooted** in order for this to work!_\r\n\r\n## Preparation\r\n\r\nFirstly, pull `SystemUI.apk` and the device-specific framework from your device.\r\n\r\n```bash\r\nadb shell cp /system/priv-app/SystemUI.apk /sdcard/\r\nadb shell cp /system/framework/framework-res.apk /sdcard/\r\nadb pull /sdcard/SystemUI.apk .\r\nadb pull /sdcard/framework-res.apk .\r\n```\r\n\r\n## Decompiling\r\n\r\nNext, download `apktool_2.0.0b8.jar` from [1], set the correct framework and decompile[2] `SystemUI.apk`.\r\n\r\n```bash\r\nwget http://connortumbleson.com/apktool/test_versions/apktool_2.0.0b9.jar\r\njava -jar apktool_2.0.0b9.jar if framework-res.apk\r\njava -jar apktool_2.0.0b9.jar d SystemUI.apk\r\n```\r\n\r\n## Modification\r\n\r\nNow modify the package[3]: search for `onsText` and update the `TextView`\'s appropriate attribute to `android:maxLength=\"0\"`.\r\n\r\n```bash\r\nsed -i \'/onsText/ s/maxLength=\"[0-9]\\+\"/maxLength=\"0\"/\' SystemUI/res/layout/status_bar.xml\r\n```\r\n\r\n## Recompiling\r\n\r\nRecompile the modified version while preserving the signature (using `-c`), which will allow you to replace the APK later on.\r\n\r\n```bash\r\njava -jar apktool_2.0.0b9.jar b SystemUI -c\r\n```\r\n\r\n## Re-installation\r\n\r\nFinally, push the modified `SystemUI.apk` to the device and install it.\r\n\r\n```bash\r\nadb push SystemUI/dist/SystemUI.apk /sdcard/SystemUI.apk\r\nadb shell su -c \"mount -o remount,rw /system\"\r\nadb shell su -c \"cp /system/priv-app/SystemUI.apk /system/priv-app/SystemUI.apk.BAK\"\r\nadb shell su -c \"cp /system/priv-app/SystemUI.odex /system/priv-app/SystemUI.odex.BAK\"\r\nadb shell su -c \"cp /sdcard/SystemUI.apk /system/priv-app/SystemUI.apk\"\r\nadb shell su -c \"rm /system/priv-app/SystemUI.odex\"\r\nadb shell su -c \"chmod 644 /system/priv-app/SystemUI.apk\"\r\nadb shell su -c \"mount -o remount,ro /system\"\r\nadb shell su -c \"reboot\"\r\n```\r\n\r\n[1] <https://code.google.com/p/android-apktool/>  \r\n[2] <http://forum.xda-developers.com/showthread.php?t=1760133>  \r\n[3] <http://forum.xda-developers.com/showthread.php?t=2021796>  \r\n','Hide the carrier label on your Moto G','','inherit','open','open','','37-revision-v1','','','2014-10-12 14:34:05','2014-10-12 12:34:05','',37,'http://blog.gingerik.nl/?p=44',0,'revision','',0),(45,1,'2013-10-28 17:35:54','2013-10-28 16:35:54','This post (inspired by [2] and [3]) describes how to enable Yubikey [1] access to any server.\r\nThe setup aims at forcing a Yubikey when logging in over the Internet\r\nbut allows for direct access on your Local Area Network.\r\n\r\n## Installation\r\n\r\nFirstly, install the Yubico PAM library\r\n\r\n```bash\r\nsudo apt-get install libpam-yubico\r\n```\r\n\r\n## Configuration\r\n\r\nStore all Yubikey tokan ids that have access to the server\r\n\r\n```bash\r\necho \"<user>:<yubikey tokan id>[:<yubikey tokan id>]\" | sudo tee /etc/yubikey\r\n```\r\n\r\nMake sure only root can read the file\r\n\r\n```bash\r\nsudo chmod 600 /etc/yubikey\r\n```\r\n\r\nDisable Yubikey for local network access\r\n\r\n```bash\r\nsudo vim /etc/security/access-local.conf\r\n```\r\n\r\n``` .linenums\r\n# yubikey can be skipped on local network\r\n+ : ALL : 192.168.1.0/24\r\n+ : ALL : LOCAL\r\n- : ALL : ALL\r\n```\r\n\r\nConfigure PAM to use the Yubikey for SSH.\r\nThe API key and id can be generated on <https://upgrade.yubico.com/getapikey/>.\r\n\r\n    # vim /etc/pam.d/sshd\r\n\r\n>     # PAM configuration for the Secure Shell service\r\n>     auth [success=1 default=ignore] pam_access.so accessfile=/etc/security/access-local.conf\r\n>     auth required pam_yubico.so authfile=/etc/yubikey id=<yubikey-api-id> key=<yubikey-api-key>\r\n>     \r\n>     [...]\r\n\r\nConfigure the SSH daemon to use PAM\r\n\r\n    # vim /etc/ssh/sshd_config\r\n\r\n>     [...]\r\n>     \r\n>     # Change to yes to enable challenge-response passwords (beware issues with\r\n>     # some PAM modules and threads)\r\n>     ChallengeResponseAuthentication no\r\n> \r\n>     # Change to no to disable tunnelled clear text passwords\r\n>     PasswordAuthentication yes\r\n> \r\n>     # Set this to \'yes\' to enable PAM authentication, account processing,\r\n>     # and session processing. If this is enabled, PAM authentication will\r\n>     # be allowed through the ChallengeResponseAuthentication and\r\n>     # PasswordAuthentication.  Depending on your PAM configuration,\r\n>     # PAM authentication via ChallengeResponseAuthentication may bypass\r\n>     # the setting of \"PermitRootLogin without-password\".\r\n>     # If you just want the PAM account and session checks to run without\r\n>     # PAM authentication, then enable this but set PasswordAuthentication\r\n>     # and ChallengeResponseAuthentication to \'no\'.\r\n>     UsePAM yes\r\n\r\nConfigure PAM authorisation\r\n\r\n    # vim /etc/pam.d/common-auth\r\n\r\n>     # here are the per-package modules (the \"Primary\" block)\r\n>     auth    [success=1 default=ignore]      pam_unix.so nullok_secure try_first_pass\r\n>     # here\'s the fallback if no module succeeds\r\n>     auth    requisite                       pam_deny.so\r\n>     # prime the stack with a positive return value if there isn\'t one already;\r\n>     # this avoids us returning an error just because nothing sets a success code\r\n>     # since the modules above will each just jump around\r\n>     auth    required                        pam_permit.so\r\n>     # and here are more per-package modules (the \"Additional\" block)\r\n>     auth    optional                        pam_cap.so\r\n>     # end of pam-auth-update config\r\n\r\nRestart SSH to enable Yubikey access\r\n\r\n    # service ssh restart\r\n\r\n## References\r\n\r\n[1] <http://www.yubico.com/products/yubikey-hardware/yubikey/>\r\n[2] <https://www.berrange.com/posts/2011/12/18/multi-factor-ssh-authentication-using-yubikey-and-ssh-public-keys-together/>\r\n[3] <https://code.google.com/p/yubico-pam/wiki/YubikeyAndSSHViaPAM>','Yubikey','','publish','open','open','','45','','','2014-10-12 18:47:14','2014-10-12 16:47:14','',0,'http://blog.gingerik.nl/?p=45',0,'post','',0),(46,1,'2014-10-12 17:40:14','2014-10-12 15:40:14','\r\nThis post (inspired by [2] and [3]) describes how to enable Yubikey [1] access to any server.\r\nThe setup aims at forcing a Yubikey when logging in over the Internet\r\nbut allows for direct access on your Local Area Network.\r\n\r\n## Installation\r\n\r\nFirstly, install the Yubico PAM library\r\n\r\n    $ su\r\n    # apt-get install libpam-yubico\r\n\r\n## Configuration\r\n\r\nStore all Yubikey tokan ids that have access to the server\r\n\r\n    # vim /etc/yubikey\r\n\r\n>     <user>:<yubikey tokan id>[:<yubikey tokan id>]\r\n\r\nMake sure only root can read the file\r\n\r\n    # chmod 600 /etc/yubikey\r\n\r\nDisable Yubikey for local network access\r\n\r\n    # vim /etc/security/access-local.conf\r\n\r\n>     # yubikey can be skipped on local network\r\n>     + : ALL : 192.168.1.0/24\r\n>     + : ALL : LOCAL\r\n>     - : ALL : ALL\r\n\r\nConfigure PAM to use the Yubikey for SSH.\r\nThe API key and id can be generated on <https://upgrade.yubico.com/getapikey/>.\r\n\r\n    # vim /etc/pam.d/sshd\r\n\r\n>     # PAM configuration for the Secure Shell service\r\n>     auth [success=1 default=ignore] pam_access.so accessfile=/etc/security/access-local.conf\r\n>     auth required pam_yubico.so authfile=/etc/yubikey id=<yubikey-api-id> key=<yubikey-api-key>\r\n>     \r\n>     [...]\r\n\r\nConfigure the SSH daemon to use PAM\r\n\r\n    # vim /etc/ssh/sshd_config\r\n\r\n>     [...]\r\n>     \r\n>     # Change to yes to enable challenge-response passwords (beware issues with\r\n>     # some PAM modules and threads)\r\n>     ChallengeResponseAuthentication no\r\n> \r\n>     # Change to no to disable tunnelled clear text passwords\r\n>     PasswordAuthentication yes\r\n> \r\n>     # Set this to \'yes\' to enable PAM authentication, account processing,\r\n>     # and session processing. If this is enabled, PAM authentication will\r\n>     # be allowed through the ChallengeResponseAuthentication and\r\n>     # PasswordAuthentication.  Depending on your PAM configuration,\r\n>     # PAM authentication via ChallengeResponseAuthentication may bypass\r\n>     # the setting of \"PermitRootLogin without-password\".\r\n>     # If you just want the PAM account and session checks to run without\r\n>     # PAM authentication, then enable this but set PasswordAuthentication\r\n>     # and ChallengeResponseAuthentication to \'no\'.\r\n>     UsePAM yes\r\n\r\nConfigure PAM authorisation\r\n\r\n    # vim /etc/pam.d/common-auth\r\n\r\n>     # here are the per-package modules (the \"Primary\" block)\r\n>     auth    [success=1 default=ignore]      pam_unix.so nullok_secure try_first_pass\r\n>     # here\'s the fallback if no module succeeds\r\n>     auth    requisite                       pam_deny.so\r\n>     # prime the stack with a positive return value if there isn\'t one already;\r\n>     # this avoids us returning an error just because nothing sets a success code\r\n>     # since the modules above will each just jump around\r\n>     auth    required                        pam_permit.so\r\n>     # and here are more per-package modules (the \"Additional\" block)\r\n>     auth    optional                        pam_cap.so\r\n>     # end of pam-auth-update config\r\n\r\nRestart SSH to enable Yubikey access\r\n\r\n    # service ssh restart\r\n\r\n## References\r\n\r\n[1] <http://www.yubico.com/products/yubikey-hardware/yubikey/>\r\n[2] <https://www.berrange.com/posts/2011/12/18/multi-factor-ssh-authentication-using-yubikey-and-ssh-public-keys-together/>\r\n[3] <https://code.google.com/p/yubico-pam/wiki/YubikeyAndSSHViaPAM>\r\n','','','inherit','open','open','','45-revision-v1','','','2014-10-12 17:40:14','2014-10-12 15:40:14','',45,'http://blog.gingerik.nl/?p=46',0,'revision','',0),(47,1,'2014-10-12 18:36:22','2014-10-12 16:36:22','This post (inspired by [2] and [3]) describes how to enable Yubikey [1] access to any server.\r\nThe setup aims at forcing a Yubikey when logging in over the Internet\r\nbut allows for direct access on your Local Area Network.\r\n\r\n## Installation\r\n\r\nFirstly, install the Yubico PAM library\r\n\r\n```bash\r\nsudo apt-get install libpam-yubico\r\n```\r\n\r\n## Configuration\r\n\r\nStore all Yubikey tokan ids that have access to the server\r\n\r\n```bash\r\necho \"<user>:<yubikey tokan id>[:<yubikey tokan id>]\" | sudo tee /etc/yubikey\r\n```\r\n\r\nMake sure only root can read the file\r\n\r\n```bash\r\nsudo chmod 600 /etc/yubikey\r\n```\r\n\r\nDisable Yubikey for local network access\r\n\r\n```bash\r\nsudo vim /etc/security/access-local.conf\r\n```\r\n\r\n```.linenums\r\n# yubikey can be skipped on local network\r\n+ : ALL : 192.168.1.0/24\r\n+ : ALL : LOCAL\r\n- : ALL : ALL\r\n```\r\n\r\nConfigure PAM to use the Yubikey for SSH.\r\nThe API key and id can be generated on <https://upgrade.yubico.com/getapikey/>.\r\n\r\n    # vim /etc/pam.d/sshd\r\n\r\n>     # PAM configuration for the Secure Shell service\r\n>     auth [success=1 default=ignore] pam_access.so accessfile=/etc/security/access-local.conf\r\n>     auth required pam_yubico.so authfile=/etc/yubikey id=<yubikey-api-id> key=<yubikey-api-key>\r\n>     \r\n>     [...]\r\n\r\nConfigure the SSH daemon to use PAM\r\n\r\n    # vim /etc/ssh/sshd_config\r\n\r\n>     [...]\r\n>     \r\n>     # Change to yes to enable challenge-response passwords (beware issues with\r\n>     # some PAM modules and threads)\r\n>     ChallengeResponseAuthentication no\r\n> \r\n>     # Change to no to disable tunnelled clear text passwords\r\n>     PasswordAuthentication yes\r\n> \r\n>     # Set this to \'yes\' to enable PAM authentication, account processing,\r\n>     # and session processing. If this is enabled, PAM authentication will\r\n>     # be allowed through the ChallengeResponseAuthentication and\r\n>     # PasswordAuthentication.  Depending on your PAM configuration,\r\n>     # PAM authentication via ChallengeResponseAuthentication may bypass\r\n>     # the setting of \"PermitRootLogin without-password\".\r\n>     # If you just want the PAM account and session checks to run without\r\n>     # PAM authentication, then enable this but set PasswordAuthentication\r\n>     # and ChallengeResponseAuthentication to \'no\'.\r\n>     UsePAM yes\r\n\r\nConfigure PAM authorisation\r\n\r\n    # vim /etc/pam.d/common-auth\r\n\r\n>     # here are the per-package modules (the \"Primary\" block)\r\n>     auth    [success=1 default=ignore]      pam_unix.so nullok_secure try_first_pass\r\n>     # here\'s the fallback if no module succeeds\r\n>     auth    requisite                       pam_deny.so\r\n>     # prime the stack with a positive return value if there isn\'t one already;\r\n>     # this avoids us returning an error just because nothing sets a success code\r\n>     # since the modules above will each just jump around\r\n>     auth    required                        pam_permit.so\r\n>     # and here are more per-package modules (the \"Additional\" block)\r\n>     auth    optional                        pam_cap.so\r\n>     # end of pam-auth-update config\r\n\r\nRestart SSH to enable Yubikey access\r\n\r\n    # service ssh restart\r\n\r\n## References\r\n\r\n[1] <http://www.yubico.com/products/yubikey-hardware/yubikey/>\r\n[2] <https://www.berrange.com/posts/2011/12/18/multi-factor-ssh-authentication-using-yubikey-and-ssh-public-keys-together/>\r\n[3] <https://code.google.com/p/yubico-pam/wiki/YubikeyAndSSHViaPAM>','','','inherit','open','open','','45-autosave-v1','','','2014-10-12 18:36:22','2014-10-12 16:36:22','',45,'http://blog.gingerik.nl/?p=47',0,'revision','',0),(48,1,'2014-10-12 18:38:03','2014-10-12 16:38:03','This post (inspired by [2] and [3]) describes how to enable Yubikey [1] access to any server.\r\nThe setup aims at forcing a Yubikey when logging in over the Internet\r\nbut allows for direct access on your Local Area Network.\r\n\r\n## Installation\r\n\r\nFirstly, install the Yubico PAM library\r\n\r\n```bash\r\nsudo apt-get install libpam-yubico\r\n```\r\n\r\n## Configuration\r\n\r\nStore all Yubikey tokan ids that have access to the server\r\n\r\n```bash\r\necho \"<user>:<yubikey tokan id>[:<yubikey tokan id>]\" | sudo tee /etc/yubikey\r\n```\r\n\r\nMake sure only root can read the file\r\n\r\n```bash\r\nsudo chmod 600 /etc/yubikey\r\n```\r\n\r\nDisable Yubikey for local network access\r\n\r\n```bash\r\nsudo vim /etc/security/access-local.conf\r\n```\r\n\r\n```.linenums\r\n# yubikey can be skipped on local network\r\n+ : ALL : 192.168.1.0/24\r\n+ : ALL : LOCAL\r\n- : ALL : ALL\r\n```\r\n\r\nConfigure PAM to use the Yubikey for SSH.\r\nThe API key and id can be generated on <https://upgrade.yubico.com/getapikey/>.\r\n\r\n    # vim /etc/pam.d/sshd\r\n\r\n>     # PAM configuration for the Secure Shell service\r\n>     auth [success=1 default=ignore] pam_access.so accessfile=/etc/security/access-local.conf\r\n>     auth required pam_yubico.so authfile=/etc/yubikey id=<yubikey-api-id> key=<yubikey-api-key>\r\n>     \r\n>     [...]\r\n\r\nConfigure the SSH daemon to use PAM\r\n\r\n    # vim /etc/ssh/sshd_config\r\n\r\n>     [...]\r\n>     \r\n>     # Change to yes to enable challenge-response passwords (beware issues with\r\n>     # some PAM modules and threads)\r\n>     ChallengeResponseAuthentication no\r\n> \r\n>     # Change to no to disable tunnelled clear text passwords\r\n>     PasswordAuthentication yes\r\n> \r\n>     # Set this to \'yes\' to enable PAM authentication, account processing,\r\n>     # and session processing. If this is enabled, PAM authentication will\r\n>     # be allowed through the ChallengeResponseAuthentication and\r\n>     # PasswordAuthentication.  Depending on your PAM configuration,\r\n>     # PAM authentication via ChallengeResponseAuthentication may bypass\r\n>     # the setting of \"PermitRootLogin without-password\".\r\n>     # If you just want the PAM account and session checks to run without\r\n>     # PAM authentication, then enable this but set PasswordAuthentication\r\n>     # and ChallengeResponseAuthentication to \'no\'.\r\n>     UsePAM yes\r\n\r\nConfigure PAM authorisation\r\n\r\n    # vim /etc/pam.d/common-auth\r\n\r\n>     # here are the per-package modules (the \"Primary\" block)\r\n>     auth    [success=1 default=ignore]      pam_unix.so nullok_secure try_first_pass\r\n>     # here\'s the fallback if no module succeeds\r\n>     auth    requisite                       pam_deny.so\r\n>     # prime the stack with a positive return value if there isn\'t one already;\r\n>     # this avoids us returning an error just because nothing sets a success code\r\n>     # since the modules above will each just jump around\r\n>     auth    required                        pam_permit.so\r\n>     # and here are more per-package modules (the \"Additional\" block)\r\n>     auth    optional                        pam_cap.so\r\n>     # end of pam-auth-update config\r\n\r\nRestart SSH to enable Yubikey access\r\n\r\n    # service ssh restart\r\n\r\n## References\r\n\r\n[1] <http://www.yubico.com/products/yubikey-hardware/yubikey/>\r\n[2] <https://www.berrange.com/posts/2011/12/18/multi-factor-ssh-authentication-using-yubikey-and-ssh-public-keys-together/>\r\n[3] <https://code.google.com/p/yubico-pam/wiki/YubikeyAndSSHViaPAM>','','','inherit','open','open','','45-revision-v1','','','2014-10-12 18:38:03','2014-10-12 16:38:03','',45,'http://blog.gingerik.nl/?p=48',0,'revision','',0),(49,1,'2014-10-12 18:47:14','2014-10-12 16:47:14','This post (inspired by [2] and [3]) describes how to enable Yubikey [1] access to any server.\r\nThe setup aims at forcing a Yubikey when logging in over the Internet\r\nbut allows for direct access on your Local Area Network.\r\n\r\n## Installation\r\n\r\nFirstly, install the Yubico PAM library\r\n\r\n```bash\r\nsudo apt-get install libpam-yubico\r\n```\r\n\r\n## Configuration\r\n\r\nStore all Yubikey tokan ids that have access to the server\r\n\r\n```bash\r\necho \"<user>:<yubikey tokan id>[:<yubikey tokan id>]\" | sudo tee /etc/yubikey\r\n```\r\n\r\nMake sure only root can read the file\r\n\r\n```bash\r\nsudo chmod 600 /etc/yubikey\r\n```\r\n\r\nDisable Yubikey for local network access\r\n\r\n```bash\r\nsudo vim /etc/security/access-local.conf\r\n```\r\n\r\n``` .linenums\r\n# yubikey can be skipped on local network\r\n+ : ALL : 192.168.1.0/24\r\n+ : ALL : LOCAL\r\n- : ALL : ALL\r\n```\r\n\r\nConfigure PAM to use the Yubikey for SSH.\r\nThe API key and id can be generated on <https://upgrade.yubico.com/getapikey/>.\r\n\r\n    # vim /etc/pam.d/sshd\r\n\r\n>     # PAM configuration for the Secure Shell service\r\n>     auth [success=1 default=ignore] pam_access.so accessfile=/etc/security/access-local.conf\r\n>     auth required pam_yubico.so authfile=/etc/yubikey id=<yubikey-api-id> key=<yubikey-api-key>\r\n>     \r\n>     [...]\r\n\r\nConfigure the SSH daemon to use PAM\r\n\r\n    # vim /etc/ssh/sshd_config\r\n\r\n>     [...]\r\n>     \r\n>     # Change to yes to enable challenge-response passwords (beware issues with\r\n>     # some PAM modules and threads)\r\n>     ChallengeResponseAuthentication no\r\n> \r\n>     # Change to no to disable tunnelled clear text passwords\r\n>     PasswordAuthentication yes\r\n> \r\n>     # Set this to \'yes\' to enable PAM authentication, account processing,\r\n>     # and session processing. If this is enabled, PAM authentication will\r\n>     # be allowed through the ChallengeResponseAuthentication and\r\n>     # PasswordAuthentication.  Depending on your PAM configuration,\r\n>     # PAM authentication via ChallengeResponseAuthentication may bypass\r\n>     # the setting of \"PermitRootLogin without-password\".\r\n>     # If you just want the PAM account and session checks to run without\r\n>     # PAM authentication, then enable this but set PasswordAuthentication\r\n>     # and ChallengeResponseAuthentication to \'no\'.\r\n>     UsePAM yes\r\n\r\nConfigure PAM authorisation\r\n\r\n    # vim /etc/pam.d/common-auth\r\n\r\n>     # here are the per-package modules (the \"Primary\" block)\r\n>     auth    [success=1 default=ignore]      pam_unix.so nullok_secure try_first_pass\r\n>     # here\'s the fallback if no module succeeds\r\n>     auth    requisite                       pam_deny.so\r\n>     # prime the stack with a positive return value if there isn\'t one already;\r\n>     # this avoids us returning an error just because nothing sets a success code\r\n>     # since the modules above will each just jump around\r\n>     auth    required                        pam_permit.so\r\n>     # and here are more per-package modules (the \"Additional\" block)\r\n>     auth    optional                        pam_cap.so\r\n>     # end of pam-auth-update config\r\n\r\nRestart SSH to enable Yubikey access\r\n\r\n    # service ssh restart\r\n\r\n## References\r\n\r\n[1] <http://www.yubico.com/products/yubikey-hardware/yubikey/>\r\n[2] <https://www.berrange.com/posts/2011/12/18/multi-factor-ssh-authentication-using-yubikey-and-ssh-public-keys-together/>\r\n[3] <https://code.google.com/p/yubico-pam/wiki/YubikeyAndSSHViaPAM>','Yubikey','','inherit','open','open','','45-revision-v1','','','2014-10-12 18:47:14','2014-10-12 16:47:14','',45,'http://blog.gingerik.nl/?p=49',0,'revision','',0),(50,1,'2014-10-12 18:49:09','2014-10-12 16:49:09','## Installation\r\n\r\n_Make sure you download the latest plugings from [1] and [2]._\r\n\r\nInstall the plugins.\r\n\r\n```bash\r\ncd /tmp\r\n# install wp-gfm\r\nwget https://github.com/makotokw/wp-gfm/archive/v0.7.2.tar.gz -O wp-gfm-0.7.2.tar.gz\r\nsudo tar -xvf wp-gfm-0.7.2.tar.gz -C /var/lib/wordpress/wp-content/plugins\r\n# install wp-code-prettify\r\nwget https://downloads.wordpress.org/plugin/wp-code-prettify.zip\r\nsudo unzip wp-code-prettify.zip -d /var/lib/wordpress/wp-content/plugins\r\n```\r\n\r\n## Configuration\r\n\r\n* Visit <http://blog.gingerik.nl/wp-admin/plugins.php> and activate the plugins;\r\n* Visit <http://blog.gingerik.nl/wp-admin/options-general.php?page=wp-gfm> and check `All contents are markdown!`;\r\n* Visit <https://wordpress.org/plugins/wp-code-prettify> and:\r\n  - set `Always load the js/css files?` to `Yes`;\r\n  - add some custom CSS to change the line numbering and indent when adding `.linenums`:\r\n\r\n```\r\npre.linenums {\r\n    margin-left: 2em;\r\n}\r\nol {\r\n    counter-reset: item;\r\n    margin-left: 0;\r\n    padding-left: 0;\r\n}\r\nol > li {\r\n    display: block;\r\n    margin-bottom: .25em;\r\n    margin-left: 2em;\r\n}\r\nol > li:before {\r\n    display: inline-block;\r\n    content: counter(item, decimal-leading-zero) \" \";\r\n    counter-increment: item;\r\n    width: 2em;\r\n    margin-left: -2em;\r\n}\r\n```\r\n\r\n[1] <https://github.com/makotokw/wp-gfm>\r\n[2] <https://wordpress.org/plugins/wp-code-prettify>\r\n','Install Markdown & Prettify on Wordpress','','inherit','open','open','','4-revision-v1','','','2014-10-12 18:49:09','2014-10-12 16:49:09','',4,'http://blog.gingerik.nl/?p=50',0,'revision','',0),(51,1,'2013-10-22 19:47:24','2013-10-22 17:47:24','This micro guide (inspired by [2]) describes how to run Sopcast on Debian using the command-line.\r\n\r\n> VLC 2.0.8, Sopcast 3.2.6  \r\n\r\n## Installation\r\n\r\nFirst install VLC which is used for playing the stream\r\n\r\n```bash\r\nsudo apt-get install vlc\r\n```\r\n\r\nDownload the required Sopcast files [1], unzip them and add Sopcast to the system\'s binaries\r\n\r\n```bash\r\nwget http://download.easetuner.com/download/sp-auth.tgz\r\ntar -xvf sp-auth.tgz\r\nsudo cp sp-auth/sp-sc-auth /usr/local/bin/\r\nrm sp-auth.tgz\r\n```\r\n\r\nTest whether Sopcast is working by running\r\n\r\n```bash\r\nsp-sc-auth\r\n```\r\n\r\n### Errors\r\n\r\nIf the following error occures\r\n\r\n```bash\r\nsp-sc-auth: error while loading shared libraries:\r\nlibstdc++.so.5: cannot open shared object file: No such file or directory\r\n```\r\n\r\nthis can be fixed by running\r\n\r\n```bash\r\nwget http://www.sopcast.com/download/libstdcpp5.tgz\r\ntar -xvf libstdcpp5.tgz\r\nsudo cp -a libstdcpp5/* /usr/lib/\r\nrm libstdcpp5.tgz\r\n```\r\n\r\n## Usage\r\n\r\nRun Sopcast\r\n\r\n```bash\r\nsp-sc-auth sop://broker.sopcast.com:3912/<channel> 3908 8908 > /dev/null\r\n```\r\n\r\nView the Sopcast stream with VLC\r\n\r\n```bash\r\nvlc http://localhost:8908/tv.asf > /dev/null\r\n```\r\n\r\n## References\r\n\r\n[1] <http://www.sopcast.org/download/linux.html>\r\n[2] <http://fedellandogz.wordpress.com/2012/11/26/howto-install-sopcast-in-ubuntu-debian/>\r\n\r\n','Sopcast','','publish','open','open','','sopcast','','','2014-10-14 22:29:19','2014-10-14 20:29:19','',0,'http://blog.gingerik.nl/?p=51',0,'post','',0),(52,1,'2014-10-12 19:47:23','2014-10-12 17:47:23','\r\nThis micro guide (inspired by [[2]][blog]) describes how to run Sopcast on Debian using the command-line.\r\n\r\n> **system** Debian Sid  \r\n> **versions** VLC 2.0.8, Sopcast 3.2.6  \r\n\r\n## Installation\r\n\r\nFirst install VLC which is used for playing the stream\r\n\r\n    $ sudo apt-get install vlc\r\n\r\nDownload the required Sopcast files [[1]][sopcast], unzip them and add Sopcast to the system\'s binaries\r\n\r\n    $ wget http://download.easetuner.com/download/sp-auth.tgz\r\n    $ tar -xvf sp-auth.tgz\r\n    $ sudo cp sp-auth/sp-sc-auth /usr/local/bin/\r\n    $ rm sp-auth.tgz\r\n\r\nTest whether Sopcast is working by running\r\n\r\n    $ sp-sc-auth\r\n\r\n### Errors\r\n\r\nIf the following error occures\r\n\r\n    sp-sc-auth: error while loading shared libraries:\r\n    libstdc++.so.5: cannot open shared object file: No such file or directory\r\n\r\nthis can be fixed by running\r\n\r\n    $ wget http://www.sopcast.com/download/libstdcpp5.tgz\r\n    $ tar -xvf libstdcpp5.tgz\r\n    $ sudo cp -a libstdcpp5/* /usr/lib/\r\n    $ rm libstdcpp5.tgz\r\n\r\n## Usage\r\n\r\nRun Sopcast\r\n\r\n    $ sp-sc-auth sop://broker.sopcast.com:3912/<channel> 3908 8908 > /dev/null\r\n\r\nView the Sopcast stream with VLC\r\n\r\n    $ vlc http://localhost:8908/tv.asf > /dev/null\r\n\r\n## References\r\n\r\n1. <http://www.sopcast.org/download/linux.html>\r\n2. <http://fedellandogz.wordpress.com/2012/11/26/howto-install-sopcast-in-ubuntu-debian/>\r\n\r\n[sopcast]: http://www.sopcast.org/download/linux.html \r\n[blog]: http://fedellandogz.wordpress.com/2012/11/26/howto-install-sopcast-in-ubuntu-debian/ \r\n','Sopcast','','inherit','open','open','','51-revision-v1','','','2014-10-12 19:47:23','2014-10-12 17:47:23','',51,'http://blog.gingerik.nl/?p=52',0,'revision','',0),(53,1,'2014-10-12 19:48:55','2014-10-12 17:48:55','This micro guide (inspired by [[2]][blog]) describes how to run Sopcast on Debian using the command-line.\r\n\r\n\r\n> VLC 2.0.8, Sopcast 3.2.6  \r\n\r\n## Installation\r\n\r\nFirst install VLC which is used for playing the stream\r\n\r\n    $ sudo apt-get install vlc\r\n\r\nDownload the required Sopcast files [[1]][sopcast], unzip them and add Sopcast to the system\'s binaries\r\n\r\n    $ wget http://download.easetuner.com/download/sp-auth.tgz\r\n    $ tar -xvf sp-auth.tgz\r\n    $ sudo cp sp-auth/sp-sc-auth /usr/local/bin/\r\n    $ rm sp-auth.tgz\r\n\r\nTest whether Sopcast is working by running\r\n\r\n    $ sp-sc-auth\r\n\r\n### Errors\r\n\r\nIf the following error occures\r\n\r\n    sp-sc-auth: error while loading shared libraries:\r\n    libstdc++.so.5: cannot open shared object file: No such file or directory\r\n\r\nthis can be fixed by running\r\n\r\n    $ wget http://www.sopcast.com/download/libstdcpp5.tgz\r\n    $ tar -xvf libstdcpp5.tgz\r\n    $ sudo cp -a libstdcpp5/* /usr/lib/\r\n    $ rm libstdcpp5.tgz\r\n\r\n## Usage\r\n\r\nRun Sopcast\r\n\r\n    $ sp-sc-auth sop://broker.sopcast.com:3912/<channel> 3908 8908 > /dev/null\r\n\r\nView the Sopcast stream with VLC\r\n\r\n    $ vlc http://localhost:8908/tv.asf > /dev/null\r\n\r\n## References\r\n\r\n1. <http://www.sopcast.org/download/linux.html>\r\n2. <http://fedellandogz.wordpress.com/2012/11/26/howto-install-sopcast-in-ubuntu-debian/>\r\n\r\n[sopcast]: http://www.sopcast.org/download/linux.html \r\n[blog]: http://fedellandogz.wordpress.com/2012/11/26/howto-install-sopcast-in-ubuntu-debian/ \r\n','Sopcast','','inherit','open','open','','51-revision-v1','','','2014-10-12 19:48:55','2014-10-12 17:48:55','',51,'http://blog.gingerik.nl/?p=53',0,'revision','',0),(54,1,'2014-10-12 21:42:38','0000-00-00 00:00:00','## Installation\r\n\r\n```bash\r\ncd /tmp/\r\nwget https://downloads.wordpress.org/plugin/revisr.zip\r\nsudo unzip revisr.zip -d /var/lib/wordpress/wp-content/plugins\r\n```\r\n\r\n## Configuration\r\n\r\nTo prevent anyone from reading your MySQL dumps directly, add the following lines to `/etc/apache2/sites-enabled/blog.gingerik.nl`:\r\n\r\n``` .linenums\r\n<FilesMatch \"\\.sql\">\r\n    Order allow,deny\r\n    Deny from all\r\n    Satisfy All\r\n</FilesMatch>\r\n```\r\n\r\nNow reload apache. \r\n\r\n```bash\r\nsudo service apache2 reload\r\n```\r\n\r\nActivate the plugin and goto `Revisr > Settings`. \r\n\r\n* Under _General_:\r\n  * Choose a _username_, e.g. `WordPress`;\r\n  * Fill out your _email_;\r\n  * TODO gitignore\r\n  * Set _automatic backup schedule_ to `daily`.\r\n* Under _Remote Repository_:\r\n  * Set _remote url_ to your Github repository, e.g. <>\r\n\r\n[1] <https://wordpress.org/plugins/revisr/>\r\n[2] <http://revisr.io/documentation/>','Managing WordPress with Git','','draft','open','open','','','','','2014-10-12 21:42:38','2014-10-12 19:42:38','',0,'http://blog.gingerik.nl/?p=54',0,'post','',0),(55,1,'2014-10-12 21:11:28','2014-10-12 19:11:28','## Installation\r\n\r\n```bash\r\ncd /tmp/\r\nwget https://downloads.wordpress.org/plugin/revisr.zip\r\nsudo unzip revisr.zip -d /var/lib/wordpress/wp-content/plugins\r\n```\r\n\r\n## Configuration\r\n\r\nTo prevent anyone from reading your MySQL dumps directly, add the following lines to `/etc/apache2/sites-enabled/blog.gingerik.nl`:\r\n\r\n``` .linenums\r\n<FilesMatch \"\\.sql\">\r\n    Order allow,deny\r\n    Deny from all\r\n    Satisfy All\r\n</FilesMatch>\r\n```\r\n\r\n[1] <https://wordpress.org/plugins/revisr/>','Managing WordPress with Git','','inherit','open','open','','54-revision-v1','','','2014-10-12 21:11:28','2014-10-12 19:11:28','',54,'http://blog.gingerik.nl/?p=55',0,'revision','',0),(56,1,'2014-10-12 21:13:42','2014-10-12 19:13:42','## Installation\r\n\r\n```bash\r\ncd /tmp/\r\nwget https://downloads.wordpress.org/plugin/revisr.zip\r\nsudo unzip revisr.zip -d /var/lib/wordpress/wp-content/plugins\r\n```\r\n\r\n## Configuration\r\n\r\nTo prevent anyone from reading your MySQL dumps directly, add the following lines to `/etc/apache2/sites-enabled/blog.gingerik.nl`:\r\n\r\n``` .linenums\r\n<FilesMatch \"\\.sql\">\r\n    Order allow,deny\r\n    Deny from all\r\n    Satisfy All\r\n</FilesMatch>\r\n```\r\n\r\nNow reload apache. \r\n\r\n```bash\r\nsudo service apache2 reload\r\n```\r\n\r\n[1] <https://wordpress.org/plugins/revisr/>','Managing WordPress with Git','','inherit','open','open','','54-revision-v1','','','2014-10-12 21:13:42','2014-10-12 19:13:42','',54,'http://blog.gingerik.nl/?p=56',0,'revision','',0),(59,1,'2014-10-12 21:28:19','2014-10-12 19:28:19','## Installation\r\n\r\n```bash\r\ncd /tmp/\r\nwget https://downloads.wordpress.org/plugin/revisr.zip\r\nsudo unzip revisr.zip -d /var/lib/wordpress/wp-content/plugins\r\n```\r\n\r\n## Configuration\r\n\r\nTo prevent anyone from reading your MySQL dumps directly, add the following lines to `/etc/apache2/sites-enabled/blog.gingerik.nl`:\r\n\r\n``` .linenums\r\n<FilesMatch \"\\.sql\">\r\n    Order allow,deny\r\n    Deny from all\r\n    Satisfy All\r\n</FilesMatch>\r\n```\r\n\r\nNow reload apache. \r\n\r\n```bash\r\nsudo service apache2 reload\r\n```\r\n\r\nActivate the plugin and goto `Revisr > Settings`. \r\n\r\n* Under _General_:\r\n  * Fill out a _username_, e.g. `WordPress`;\r\n  * Fill out your _email address_;\r\n  * Set _automatic backup schedule_ to `daily`. \r\n\r\n[1] <https://wordpress.org/plugins/revisr/>','Managing WordPress with Git','','inherit','open','open','','54-revision-v1','','','2014-10-12 21:28:19','2014-10-12 19:28:19','',54,'http://blog.gingerik.nl/?p=59',0,'revision','',0),(60,1,'2014-10-12 21:31:17','2014-10-12 19:31:17','## Installation\r\n\r\n```bash\r\ncd /tmp/\r\nwget https://downloads.wordpress.org/plugin/revisr.zip\r\nsudo unzip revisr.zip -d /var/lib/wordpress/wp-content/plugins\r\n```\r\n\r\n## Configuration\r\n\r\nTo prevent anyone from reading your MySQL dumps directly, add the following lines to `/etc/apache2/sites-enabled/blog.gingerik.nl`:\r\n\r\n``` .linenums\r\n<FilesMatch \"\\.sql\">\r\n    Order allow,deny\r\n    Deny from all\r\n    Satisfy All\r\n</FilesMatch>\r\n```\r\n\r\nNow reload apache. \r\n\r\n```bash\r\nsudo service apache2 reload\r\n```\r\n\r\nActivate the plugin and goto `Revisr > Settings`. \r\n\r\n* Under _General_:\r\n  * Choose a _username_, e.g. `WordPress`;\r\n  * Fill out your _email_;\r\n  * Set _automatic backup schedule_ to `daily`.\r\n* Under _Remote Repository_:\r\n  * Set _remote url_ to your Github repository, e.g. \r\n\r\n[1] <https://wordpress.org/plugins/revisr/>','Managing WordPress with Git','','inherit','open','open','','54-revision-v1','','','2014-10-12 21:31:17','2014-10-12 19:31:17','',54,'http://blog.gingerik.nl/?p=60',0,'revision','',0),(61,1,'2014-10-12 21:42:38','2014-10-12 19:42:38','## Installation\r\n\r\n```bash\r\ncd /tmp/\r\nwget https://downloads.wordpress.org/plugin/revisr.zip\r\nsudo unzip revisr.zip -d /var/lib/wordpress/wp-content/plugins\r\n```\r\n\r\n## Configuration\r\n\r\nTo prevent anyone from reading your MySQL dumps directly, add the following lines to `/etc/apache2/sites-enabled/blog.gingerik.nl`:\r\n\r\n``` .linenums\r\n<FilesMatch \"\\.sql\">\r\n    Order allow,deny\r\n    Deny from all\r\n    Satisfy All\r\n</FilesMatch>\r\n```\r\n\r\nNow reload apache. \r\n\r\n```bash\r\nsudo service apache2 reload\r\n```\r\n\r\nActivate the plugin and goto `Revisr > Settings`. \r\n\r\n* Under _General_:\r\n  * Choose a _username_, e.g. `WordPress`;\r\n  * Fill out your _email_;\r\n  * TODO gitignore\r\n  * Set _automatic backup schedule_ to `daily`.\r\n* Under _Remote Repository_:\r\n  * Set _remote url_ to your Github repository, e.g. <>\r\n\r\n[1] <https://wordpress.org/plugins/revisr/>\r\n[2] <http://revisr.io/documentation/>','Managing WordPress with Git','','inherit','open','open','','54-revision-v1','','','2014-10-12 21:42:38','2014-10-12 19:42:38','',54,'http://blog.gingerik.nl/?p=61',0,'revision','',0),(63,1,'2014-10-14 11:59:28','2014-10-14 09:59:28','_Install and configure using the alternate Debian method[1]._\r\n\r\n## Installation\r\n\r\nInstall WordPress, Apache & MySQL.\r\n\r\n```bash\r\nsudo apt-get install wordpress apache2 mysql-server\r\n```\r\n\r\n## Configuration\r\n\r\nSet-up MySQL.\r\n\r\n```bash\r\ncd /usr/share/doc/wordpress/examples/\r\nsudo gunzip setup-mysql.gzip\r\nsudo bash setup-mysql -n wordpress blog.gingerik.nl\r\n```\r\n\r\nConfigure & reload Apache. First edit `/etc/apache2/sites-available/blog.gingerik.nl` and add the following contents:\r\n\r\n```.linenumbers\r\nNameVirtualHost *:80\r\n\r\n<VirtualHost *:80>\r\n    UseCanonicalName Off\r\n    VirtualDocumentRoot /usr/share/wordpress\r\n    Options All\r\n\r\n    # wp-content in /srv/www/wp-content/$0\r\n    RewriteEngine On\r\n    RewriteRule ^/wp-content/(.*)$ /srv/www/wp-content/%{HTTP_HOST}/$1\r\n</VirtualHost>\r\n```\r\n\r\nThen enable the site & some modules.\r\n\r\n```bash\r\ncd /etc/apache2/sites-enabled/\r\nsudo ln -s ../sites-available/blog.gingerik.nl\r\nsudo a2enmod rewrite\r\nsudo a2enmod vhost_alias\r\nsudo service apache2 restart\r\n```\r\n\r\nNow visit <http://blog.gingerik.nl> to start blogging!\r\n\r\n## Extra\r\n\r\n### Install theme\r\n\r\n```bash\r\ncd /tmp\r\nwget https://downloads.wordpress.org/theme/sparkling.1.6.0.zip\r\nsudo unzip sparkling.1.6.0.zip -d /var/lib/wordpress/wp-content/themes/\r\n```\r\n\r\nAnd activate your theme!\r\n\r\n[1] <https://wiki.debian.org/WordPress>','WordPress installation ','','inherit','open','open','','22-revision-v1','','','2014-10-14 11:59:28','2014-10-14 09:59:28','',22,'http://blog.gingerik.nl/?p=63',0,'revision','',0),(64,1,'2014-10-14 22:27:00','2014-10-14 20:27:00','This micro guide (inspired by [[2]][blog]) describes how to run Sopcast on Debian using the command-line.\n\n> VLC 2.0.8, Sopcast 3.2.6  \n\n## Installation\n\nFirst install VLC which is used for playing the stream\n\n```bash\nsudo apt-get install vlc\n```\n\nDownload the required Sopcast files [1], unzip them and add Sopcast to the system\'s binaries\n\n```bash\nwget http://download.easetuner.com/download/sp-auth.tgz\ntar -xvf sp-auth.tgz\nsudo cp sp-auth/sp-sc-auth /usr/local/bin/\nrm sp-auth.tgz\n```\n\nTest whether Sopcast is working by running\n\n```bash\nsp-sc-auth\n```\n\n### Errors\n\nIf the following error occures\n\n```bash\nsp-sc-auth: error while loading shared libraries:\nlibstdc++.so.5: cannot open shared object file: No such file or directory\n```\n\nthis can be fixed by running\n\n```bash\nwget http://www.sopcast.com/download/libstdcpp5.tgz\ntar -xvf libstdcpp5.tgz\nsudo cp -a libstdcpp5/* /usr/lib/\nrm libstdcpp5.tgz\n```\n\n## Usage\n\nRun Sopcast\n\n```bash\nsp-sc-auth sop://broker.sopcast.com:3912/<channel> 3908 8908 > /dev/null\n```\n\nView the Sopcast stream with VLC\n\n```bash\nvlc http://localhost:8908/tv.asf > /dev/null\n```\n\n## References\n\n1. <http://www.sopcast.org/download/linux.html>\n2. <http://fedellandogz.wordpress.com/2012/11/26/howto-install-sopcast-in-ubuntu-debian/>\n\n','Sopcast','','inherit','open','open','','51-autosave-v1','','','2014-10-14 22:27:00','2014-10-14 20:27:00','',51,'http://blog.gingerik.nl/?p=64',0,'revision','',0),(65,1,'2014-10-14 22:27:22','2014-10-14 20:27:22','This micro guide (inspired by [2]) describes how to run Sopcast on Debian using the command-line.\r\n\r\n> VLC 2.0.8, Sopcast 3.2.6  \r\n\r\n## Installation\r\n\r\nFirst install VLC which is used for playing the stream\r\n\r\n```bash\r\nsudo apt-get install vlc\r\n```\r\n\r\nDownload the required Sopcast files [1], unzip them and add Sopcast to the system\'s binaries\r\n\r\n```bash\r\nwget http://download.easetuner.com/download/sp-auth.tgz\r\ntar -xvf sp-auth.tgz\r\nsudo cp sp-auth/sp-sc-auth /usr/local/bin/\r\nrm sp-auth.tgz\r\n```\r\n\r\nTest whether Sopcast is working by running\r\n\r\n```bash\r\nsp-sc-auth\r\n```\r\n\r\n### Errors\r\n\r\nIf the following error occures\r\n\r\n```bash\r\nsp-sc-auth: error while loading shared libraries:\r\nlibstdc++.so.5: cannot open shared object file: No such file or directory\r\n```\r\n\r\nthis can be fixed by running\r\n\r\n```bash\r\nwget http://www.sopcast.com/download/libstdcpp5.tgz\r\ntar -xvf libstdcpp5.tgz\r\nsudo cp -a libstdcpp5/* /usr/lib/\r\nrm libstdcpp5.tgz\r\n```\r\n\r\n## Usage\r\n\r\nRun Sopcast\r\n\r\n```bash\r\nsp-sc-auth sop://broker.sopcast.com:3912/<channel> 3908 8908 > /dev/null\r\n```\r\n\r\nView the Sopcast stream with VLC\r\n\r\n```bash\r\nvlc http://localhost:8908/tv.asf > /dev/null\r\n```\r\n\r\n## References\r\n\r\n1. <http://www.sopcast.org/download/linux.html>\r\n2. <http://fedellandogz.wordpress.com/2012/11/26/howto-install-sopcast-in-ubuntu-debian/>\r\n\r\n','Sopcast','','inherit','open','open','','51-revision-v1','','','2014-10-14 22:27:22','2014-10-14 20:27:22','',51,'http://blog.gingerik.nl/?p=65',0,'revision','',0),(66,1,'2014-10-14 22:29:19','2014-10-14 20:29:19','This micro guide (inspired by [2]) describes how to run Sopcast on Debian using the command-line.\r\n\r\n> VLC 2.0.8, Sopcast 3.2.6  \r\n\r\n## Installation\r\n\r\nFirst install VLC which is used for playing the stream\r\n\r\n```bash\r\nsudo apt-get install vlc\r\n```\r\n\r\nDownload the required Sopcast files [1], unzip them and add Sopcast to the system\'s binaries\r\n\r\n```bash\r\nwget http://download.easetuner.com/download/sp-auth.tgz\r\ntar -xvf sp-auth.tgz\r\nsudo cp sp-auth/sp-sc-auth /usr/local/bin/\r\nrm sp-auth.tgz\r\n```\r\n\r\nTest whether Sopcast is working by running\r\n\r\n```bash\r\nsp-sc-auth\r\n```\r\n\r\n### Errors\r\n\r\nIf the following error occures\r\n\r\n```bash\r\nsp-sc-auth: error while loading shared libraries:\r\nlibstdc++.so.5: cannot open shared object file: No such file or directory\r\n```\r\n\r\nthis can be fixed by running\r\n\r\n```bash\r\nwget http://www.sopcast.com/download/libstdcpp5.tgz\r\ntar -xvf libstdcpp5.tgz\r\nsudo cp -a libstdcpp5/* /usr/lib/\r\nrm libstdcpp5.tgz\r\n```\r\n\r\n## Usage\r\n\r\nRun Sopcast\r\n\r\n```bash\r\nsp-sc-auth sop://broker.sopcast.com:3912/<channel> 3908 8908 > /dev/null\r\n```\r\n\r\nView the Sopcast stream with VLC\r\n\r\n```bash\r\nvlc http://localhost:8908/tv.asf > /dev/null\r\n```\r\n\r\n## References\r\n\r\n[1] <http://www.sopcast.org/download/linux.html>\r\n[2] <http://fedellandogz.wordpress.com/2012/11/26/howto-install-sopcast-in-ubuntu-debian/>\r\n\r\n','Sopcast','','inherit','open','open','','51-revision-v1','','','2014-10-14 22:29:19','2014-10-14 20:29:19','',51,'http://blog.gingerik.nl/?p=66',0,'revision','',0),(67,1,'2014-10-15 08:59:22','2014-10-15 06:59:22','## Installation\r\n\r\n_Make sure you download the latest plugings from [1] and [2]._\r\n\r\nInstall the plugins.\r\n\r\n```bash\r\ncd /tmp\r\n# install wp-gfm\r\nwget https://github.com/makotokw/wp-gfm/archive/v0.7.2.tar.gz -O wp-gfm-0.7.2.tar.gz\r\nsudo tar -xvf wp-gfm-0.7.2.tar.gz -C /var/lib/wordpress/wp-content/plugins\r\n# install wp-code-prettify\r\nwget https://downloads.wordpress.org/plugin/wp-code-prettify.zip\r\nsudo unzip wp-code-prettify.zip -d /var/lib/wordpress/wp-content/plugins\r\n```\r\n\r\n## Configuration\r\n\r\n* Visit <http://blog.gingerik.nl/wp-admin/plugins.php> and activate the plugins;\r\n* Visit <http://blog.gingerik.nl/wp-admin/options-general.php?page=wp-gfm> and check `All contents are markdown!`;\r\n* Visit <http://blog.gingerik.nl/wp-admin/options-general.php?page=wp-code-prettify> and:\r\n  - set _Always load the js/css files?_ to `Yes`;\r\n  - add some custom CSS to change the line numbering and indent when adding `.linenums`:\r\n\r\n```\r\npre.linenums {\r\n    margin-left: 2em;\r\n}\r\nol {\r\n    counter-reset: item;\r\n    margin-left: 0;\r\n    padding-left: 0;\r\n}\r\nol > li {\r\n    display: block;\r\n    margin-bottom: .25em;\r\n    margin-left: 2em;\r\n}\r\nol > li:before {\r\n    display: inline-block;\r\n    content: counter(item, decimal-leading-zero) \" \";\r\n    counter-increment: item;\r\n    width: 2em;\r\n    margin-left: -2em;\r\n}\r\n```\r\n\r\n[1] <https://github.com/makotokw/wp-gfm>\r\n[2] <https://wordpress.org/plugins/wp-code-prettify>\r\n','Install Markdown & Prettify on Wordpress','','inherit','open','open','','4-revision-v1','','','2014-10-15 08:59:22','2014-10-15 06:59:22','',4,'http://blog.gingerik.nl/?p=67',0,'revision','',0),(68,1,'2014-10-15 08:59:52','2014-10-15 06:59:52','_Install and configure using the alternate Debian method[1]._\r\n\r\n## Installation\r\n\r\nInstall WordPress, Apache & MySQL.\r\n\r\n```bash\r\nsudo apt-get install wordpress apache2 mysql-server\r\n```\r\n\r\n## Configuration\r\n\r\nSet-up MySQL.\r\n\r\n```bash\r\ncd /usr/share/doc/wordpress/examples/\r\nsudo gunzip setup-mysql.gzip\r\nsudo bash setup-mysql -n wordpress blog.gingerik.nl\r\n```\r\n\r\nConfigure & reload Apache. First edit `/etc/apache2/sites-available/blog.gingerik.nl` and add the following contents:\r\n\r\n```.linenumbers\r\nNameVirtualHost *:80\r\n\r\n<VirtualHost *:80>\r\n    UseCanonicalName Off\r\n    VirtualDocumentRoot /usr/share/wordpress\r\n    Options All\r\n\r\n    # wp-content in /srv/www/wp-content/$0\r\n    RewriteEngine On\r\n    RewriteRule ^/wp-content/(.*)$ /srv/www/wp-content/%{HTTP_HOST}/$1\r\n</VirtualHost>\r\n```\r\n\r\nThen enable the site & some modules.\r\n\r\n```bash\r\nsudo a2dissite default\r\nsudo a2ensite blog.gingerik.nl\r\nsudo a2enmod rewrite\r\nsudo a2enmod vhost_alias\r\nsudo service apache2 restart\r\n```\r\n\r\nNow visit <http://blog.gingerik.nl> to start blogging!\r\n\r\n## Extra\r\n\r\n### Install theme\r\n\r\n```bash\r\ncd /tmp\r\nwget https://downloads.wordpress.org/theme/sparkling.1.6.0.zip\r\nsudo unzip sparkling.1.6.0.zip -d /var/lib/wordpress/wp-content/themes/\r\n```\r\n\r\nAnd activate your theme!\r\n\r\n[1] <https://wiki.debian.org/WordPress>','WordPress installation ','','inherit','open','open','','22-revision-v1','','','2014-10-15 08:59:52','2014-10-15 06:59:52','',22,'http://blog.gingerik.nl/?p=68',0,'revision','',0),(69,1,'2014-10-15 09:41:34','2014-10-15 07:41:34','## Installation\r\n\r\n_Make sure you download the latest plugings from [1] and [2]._\r\n\r\nInstall the plugins.\r\n\r\n```bash\r\ncd /tmp\r\n# install wp-gfm\r\nwget https://github.com/makotokw/wp-gfm/archive/v0.7.2.tar.gz -O wp-gfm-0.7.2.tar.gz\r\nsudo tar -xvf wp-gfm-0.7.2.tar.gz -C /var/lib/wordpress/wp-content/plugins\r\n# install wp-code-prettify\r\nwget https://downloads.wordpress.org/plugin/wp-code-prettify.zip\r\nsudo unzip wp-code-prettify.zip -d /var/lib/wordpress/wp-content/plugins\r\n```\r\n\r\n## Configuration\r\n\r\n* Visit <http://blog.gingerik.nl/wp-admin/plugins.php> and activate the plugins;\r\n* Visit <http://blog.gingerik.nl/wp-admin/options-general.php?page=wp-gfm> and check `All contents are markdown!`;\r\n* Visit <http://blog.gingerik.nl/wp-admin/options-general.php?page=wp-code-prettify> and:\r\n  - set _Always load the js/css files?_ to `Yes`;\r\n  - add some custom CSS to change the line numbering and indent when adding `.linenums`:\r\n\r\n```css file\r\n/* style file contents */\r\npre.prettyprint.file {\r\n    margin-left: 2em;\r\n    margin-right: 2em;\r\n}\r\n\r\n/* style line numbers */\r\nol {\r\n    counter-reset: item;\r\n    margin-left: 0;\r\n    padding-left: 0;\r\n}\r\nol > li {\r\n    display: block;\r\n    margin-bottom: .25em;\r\n    margin-left: 2em;\r\n}\r\nol > li:before {\r\n    display: inline-block;\r\n    content: counter(item, decimal-leading-zero) \" \";\r\n    counter-increment: item;\r\n    width: 2em;\r\n    margin-left: -2em;\r\n}\r\n```\r\n\r\n[1] <https://github.com/makotokw/wp-gfm>\r\n[2] <https://wordpress.org/plugins/wp-code-prettify>\r\n','Install Markdown & Prettify on Wordpress','','inherit','open','open','','4-revision-v1','','','2014-10-15 09:41:34','2014-10-15 07:41:34','',4,'http://blog.gingerik.nl/?p=69',0,'revision','',0),(70,1,'2014-11-07 15:14:09','0000-00-00 00:00:00','_The GitLab.com team strongly believes in using feature branches and merge requests in software development. We also think that Test Driven Development (TDD) should be used wherever possible. If you combine these things what follows is that you have to know the testing results of a feature branch before accepting the merge request. GitLab CI was build to offer this functionality and we think most people using GitLab would benefit from using GitLab CI as well._\r\n\r\n> If you are running tests on the CI server you are doing it wrong!\r\n\r\n_Anybody who can push to a branch that is tested on a CI server can easily own that server. So you don\'t want to have projects with different authorization levels being tested on the same CI server._\r\n\r\n_To solve the problem we have split the CI application in two parts, a coordinator and runners. The coordinator enables you to specify how you want to test and stores the results. This is a rack application that communicates with the GitLab API. The runners perform the actual build and they are installed on separate machines. This way you never run tests on the same server that stores all you code._[1]\r\n\r\nTime to install GitLab CI[2]!\r\n\r\n## The Coordinator\r\n\r\nThe Coordinator is installed on the **same** server as GitLab itself. There is no need to put this somewhere else.\r\n\r\n### Installation\r\n\r\nMake sure **all** steps are run successfully!\r\n\r\n#### Dependencies\r\n\r\nFirst we install some packages that are required by GitLab CI.\r\n\r\n```bash\r\n# update the system\r\nsudo apt-get update\r\nsudo apt-get upgrade\r\n\r\n# install dependencies\r\nsudo apt-get install wget curl gcc checkinstall libxml2-dev libxslt-dev libcurl4-openssl-dev libreadline6-dev libc6-dev libssl-dev libmysql++-dev make build-essential zlib1g-dev openssh-server git-core libyaml-dev postfix libpq-dev libicu-dev\r\nsudo apt-get install redis-server\r\n\r\n# install ruby from source\r\nmkdir /tmp/ruby && cd /tmp/ruby\r\ncurl --progress http://cache.ruby-lang.org/pub/ruby/2.0/ruby-2.0.0-p353.tar.bz2 | tar xj\r\ncd ruby-2.0.0-p353\r\n./configure --disable-install-rdoc\r\nmake\r\nsudo make install\r\n\r\n# install the bundler gem\r\nsudo gem install bundler --no-ri --no-rdoc\r\n\r\n# create a gitlab ci user\r\nsudo adduser --disabled-login --gecos \'GitLab CI\' gitlab_ci\r\n\r\n# install & configure postgresql\r\n#   we do not specify a password because we are using peer authentication\r\nsudo apt-get install -y postgresql-9.1 libpq-dev\r\nsudo -u postgres psql -d template1 -c \"CREATE USER gitlab_ci;\"\r\nsudo -u postgres psql -d template1 -c \"CREATE DATABASE gitlab_ci_production OWNER gitlab_ci;\"\r\nsudo -u gitlab_ci -H psql -d gitlab_ci_production -c \"\\du\" # verify you can connect\r\n```\r\n\r\n#### GitLab CI\r\n\r\nNow we have successfully installed all dependencies, it is time to install GitLab CI itself.\r\n\r\n```bash\r\n# get the gitlab ci source\r\ncd /home/gitlab_ci/\r\nsudo -u gitlab_ci -H git clone https://gitlab.com/gitlab-org/gitlab-ci.git\r\ncd gitlab-ci\r\nsudo -u gitlab_ci -H git checkout 5-0-stable\r\n\r\n# set-up gitlab\r\nsudo -u gitlab_ci -H cp config/application.yml.example config/application.yml\r\nsudo -u gitlab_ci -H vim config/application.yml # configure the application (gitlab_server_urls = GitLab [not CI])\r\nsudo -u gitlab_ci -H cp config/unicorn.rb.example config/unicorn.rb\r\nsudo -u gitlab_ci -H vim config/unicorn.rb # configure the server, port -> 8081 (8080 is used by GitLab)\r\n\r\n# create socket and pid directories\r\n# yes, relative paths\r\nsudo -u gitlab_ci -H mkdir -p tmp/sockets/\r\nsudo chmod -R u+rwX tmp/sockets/\r\nsudo -u gitlab_ci -H mkdir -p tmp/pids/\r\nsudo chmod -R u+rwX tmp/pids/\r\n\r\n# install gems\r\nsudo -u gitlab_ci -H bundle install --without development test mysql --deployment # without ... mysql\r\n\r\n# set-up database\r\nsudo -u gitlab_ci -H cp config/database.yml.postgresql config/database.yml\r\nsudo -u gitlab_ci -H bundle exec rake setup RAILS_ENV=production\r\nsudo -u gitlab_ci -H bundle exec whenever -w RAILS_ENV=production\r\n```\r\n\r\n#### Post-installation\r\n\r\nGitLab is now installed! We need some final configurations.\r\n\r\n##### Host\r\n\r\n```bash\r\necho \"127.0.1.1       git-ci.domain.com\" | sudo tee --append /etc/hosts\r\n```\r\n\r\n##### Init.d script\r\n\r\nWe want GitLab CI to start on boot, so we add an init.d script.\r\n\r\n```bash\r\nsudo cp /home/gitlab_ci/gitlab-ci/lib/support/init.d/gitlab_ci /etc/init.d/gitlab_ci\r\nsudo update-rc.d gitlab_ci defaults 21 # start on boot\r\nsudo service gitlab_ci start\r\n```\r\n\r\n##### Nginx\r\n\r\nConfigure nginx (an Apache alternative) to host GitLab CI.\r\n\r\n```bash\r\nsudo apt-get install nginx\r\nsudo cp /home/gitlab_ci/gitlab-ci/lib/support/nginx/gitlab_ci /etc/nginx/sites-available/gitlab_ci\r\nsudo vim /etc/nginx/sites-available/gitlab_ci # edit port & fqdn\r\nsudo rm /etc/nginx/sites-enabled/default\r\nsudo ln -s /etc/nginx/sites-available/gitlab_ci /etc/nginx/sites-enabled/gitlab_ci\r\nsudo service nginx start\r\n```\r\n\r\n## Runners\r\n\r\nThe runners perform the actual build and need to be installed on **separate machines**, e.g. on a VPS.\r\nTime to install[3].\r\n\r\n### Installation\r\n\r\n#### Dependencies\r\n\r\n```bash\r\n# update system\r\nsudo apt-get update\r\nsudo apt-get upgrade\r\n\r\n# install dependencies\r\nsudo apt-get install -y wget curl gcc libxml2-dev libxslt-dev libcurl4-openssl-dev libreadline6-dev libc6-dev libssl-dev make build-essential zlib1g-dev openssh-server git-core libyaml-dev postfix libpq-dev libicu-dev\r\n\r\n# install ruby from source\r\nmkdir /tmp/ruby && cd /tmp/ruby\r\ncurl --progress ftp://ftp.ruby-lang.org/pub/ruby/2.0/ruby-2.0.0-p353.tar.gz | tar xz\r\ncd ruby-2.0.0-p353\r\n./configure --disable-install-rdoc\r\nmake\r\nsudo make install\r\n\r\n# install the bundler gem\r\nsudo gem install bundler\r\n\r\n# create a gitlab ci runner user\r\nsudo adduser --disabled-login --gecos \'GitLab CI Runner\' gitlab_ci_runner\r\necho \"gitlab_ci_runner        ALL=NOPASSWD: ALL\" | sudo tee --append /etc/sudoers # warning\r\n```\r\n\r\n#### GitLab CI Runner\r\n\r\nThe registration token can be found at: <http://the-gitlab-ci-domain/admin/runners>, accessible through _Header_ > _Runners_.\r\n\r\n```bash\r\n# get the gitlab ci runner source\r\ncd /home/gitlab_ci_runner/\r\nsudo -u gitlab_ci_runner -H git clone https://gitlab.com/gitlab-org/gitlab-ci-runner.git\r\ncd gitlab-ci-runner\r\n\r\n# install gems\r\nsudo -u gitlab_ci_runner -H bundle install --deployment\r\n\r\n# set-up the bundle interactively\r\nsudo -u gitlab_ci_runner -H bundle exec ./bin/setup\r\n```\r\n\r\n#### Post-installation\r\n\r\nWe need some final configurations.\r\n\r\n##### SSL certificates\r\n\r\n_If your GitLab server is using self-signed SSL certificates then you should make sure the GitLab server certificate is trusted on the runner for the git clone operations to work._ Hence,\r\n\r\n```bash\r\nsudo cp /somedir/ca.crt /usr/local/share/ca-certificates/\r\nsudo update-ca-certificates\r\n```\r\n\r\n##### Init.d script\r\n\r\nWe want the GitLab CI Runner to start on boot, so we add an init.d script.\r\n\r\n```bash\r\nsudo cp lib/support/init.d/gitlab_ci_runner /etc/init.d/gitlab-ci-runner\r\nsudo chmod +x /etc/init.d/gitlab-ci-runner\r\nsudo update-rc.d gitlab-ci-runner defaults 21 # start on boot\r\nsudo service gitlab-ci-runner start\r\n```\r\n\r\n### Easily add Runners\r\n\r\nCreating a snapshot enables you to quickly add runners. Have the registration token at hand and:\r\n\r\n* instantiate a new VPS with the snapshot `gitlab-ci-runner-2gb-2gbswap`\r\n* `bundle exec ./bin/setup`\r\n* `sudo service gitlab-ci-runner start`\r\n\r\nNow the runner will start to pick up builds automatically. When you are done with it, you can destroy the VPS without worrying about anything.\r\n\r\n## References\r\n\r\n[1] <https://about.gitlab.com/2013/06/20/integrating-gitlab-ci-with-gitlab/>\r\n[2] <https://gitlab.com/gitlab-org/gitlab-ci/blob/master/doc/install/installation.md>\r\n[3] <https://gitlab.com/gitlab-org/gitlab-ci-runner/blob/master/README.md>','GitLab Continuous Integration','','draft','open','open','','','','','2014-11-07 15:14:09','2014-11-07 14:14:09','',0,'http://blog.gingerik.nl/?p=70',0,'post','',0),(71,1,'2014-10-16 20:28:20','2014-10-16 18:28:20','**If you are running tests on the CI server you are doing it wrong!**\r\n\r\n[1] https://gitlab.com/gitlab-org/gitlab-ci/blob/master/doc/install/installation.md','Gitlab Continuous Integration','','inherit','open','open','','70-revision-v1','','','2014-10-16 20:28:20','2014-10-16 18:28:20','',70,'http://blog.gingerik.nl/?p=71',0,'revision','',0),(72,1,'2014-10-16 20:28:59','2014-10-16 18:28:59','> If you are running tests on the CI server you are doing it wrong!\r\n\r\n[1] https://gitlab.com/gitlab-org/gitlab-ci/blob/master/doc/install/installation.md','Gitlab Continuous Integration','','inherit','open','open','','70-revision-v1','','','2014-10-16 20:28:59','2014-10-16 18:28:59','',70,'http://blog.gingerik.nl/?p=72',0,'revision','',0),(73,1,'2014-10-16 20:29:24','2014-10-16 18:29:24','> If you are running tests on the CI server you are doing it wrong!\r\n\r\n## Installation\r\n\r\n\r\n\r\n[1] https://gitlab.com/gitlab-org/gitlab-ci/blob/master/doc/install/installation.md','GitLab Continuous Integration','','inherit','open','open','','70-revision-v1','','','2014-10-16 20:29:24','2014-10-16 18:29:24','',70,'http://blog.gingerik.nl/?p=73',0,'revision','',0),(74,1,'2014-10-16 20:30:00','2014-10-16 18:30:00','_The GitLab.com team strongly believes in using feature branches and merge requests in software development. We also think that Test Driven Development (TDD) should be used wherever possible. If you combine these things what follows is that you have to know the testing results of a feature branch before accepting the merge request. GitLab CI was build to offer this functionality and we think most people using GitLab would benefit from using GitLab CI as well._\r\n\r\n> If you are running tests on the CI server you are doing it wrong!\r\n\r\n## Installation\r\n\r\n\r\n\r\n[1] https://gitlab.com/gitlab-org/gitlab-ci/blob/master/doc/install/installation.md','GitLab Continuous Integration','','inherit','open','open','','70-revision-v1','','','2014-10-16 20:30:00','2014-10-16 18:30:00','',70,'http://blog.gingerik.nl/?p=74',0,'revision','',0),(75,1,'2014-10-16 20:31:03','2014-10-16 18:31:03','_The GitLab.com team strongly believes in using feature branches and merge requests in software development. We also think that Test Driven Development (TDD) should be used wherever possible. If you combine these things what follows is that you have to know the testing results of a feature branch before accepting the merge request. GitLab CI was build to offer this functionality and we think most people using GitLab would benefit from using GitLab CI as well._\r\n\r\n> If you are running tests on the CI server you are doing it wrong!\r\n\r\n## Installation\r\n\r\n```bash\r\n# update the system\r\nsudo apt-get update\r\nsudo apt-get upgrade\r\n\r\n# install dependencies\r\nsudo apt-get install wget curl gcc checkinstall libxml2-dev libxslt-dev libcurl4-openssl-dev libreadline6-dev libc6-dev libssl-dev libmysql++-dev make build-essential zlib1g-dev openssh-server git-core libyaml-dev postfix libpq-dev libicu-dev\r\nsudo apt-get install redis-server\r\n```\r\n\r\n\r\n[1] https://gitlab.com/gitlab-org/gitlab-ci/blob/master/doc/install/installation.md','GitLab Continuous Integration','','inherit','open','open','','70-revision-v1','','','2014-10-16 20:31:03','2014-10-16 18:31:03','',70,'http://blog.gingerik.nl/?p=75',0,'revision','',0),(76,1,'2014-10-16 20:33:23','2014-10-16 18:33:23','_The GitLab.com team strongly believes in using feature branches and merge requests in software development. We also think that Test Driven Development (TDD) should be used wherever possible. If you combine these things what follows is that you have to know the testing results of a feature branch before accepting the merge request. GitLab CI was build to offer this functionality and we think most people using GitLab would benefit from using GitLab CI as well._\r\n\r\n> If you are running tests on the CI server you are doing it wrong!\r\n\r\nAnybody who can push to a branch that is tested on a CI server can easily own that server. So you don\'t want to have projects with different authorization levels being tested on the same CI server.\r\n\r\nTo solve the problem we have split the CI application in two parts, a coordinator and runners. The coordinator enables you to specify how you want to test and stores the results. This is a rack application that communicates with the GitLab API. The runners perform the actual build and they are installed on separate machines. This way you never run tests on the same server that stores all you code.[1]\r\n\r\n## The Coordinator\r\n\r\n### Installation\r\n\r\n```bash\r\n# update the system\r\nsudo apt-get update\r\nsudo apt-get upgrade\r\n\r\n# install dependencies\r\nsudo apt-get install wget curl gcc checkinstall libxml2-dev libxslt-dev libcurl4-openssl-dev libreadline6-dev libc6-dev libssl-dev libmysql++-dev make build-essential zlib1g-dev openssh-server git-core libyaml-dev postfix libpq-dev libicu-dev\r\nsudo apt-get install redis-server\r\n```\r\n\r\n[1] https://about.gitlab.com/2013/06/20/integrating-gitlab-ci-with-gitlab/\r\n[2] https://gitlab.com/gitlab-org/gitlab-ci/blob/master/doc/install/installation.md','GitLab Continuous Integration','','inherit','open','open','','70-revision-v1','','','2014-10-16 20:33:23','2014-10-16 18:33:23','',70,'http://blog.gingerik.nl/?p=76',0,'revision','',0),(77,1,'2014-10-16 20:34:08','2014-10-16 18:34:08','_The GitLab.com team strongly believes in using feature branches and merge requests in software development. We also think that Test Driven Development (TDD) should be used wherever possible. If you combine these things what follows is that you have to know the testing results of a feature branch before accepting the merge request. GitLab CI was build to offer this functionality and we think most people using GitLab would benefit from using GitLab CI as well._\r\n\r\n> If you are running tests on the CI server you are doing it wrong!\r\n\r\n_Anybody who can push to a branch that is tested on a CI server can easily own that server. So you don\'t want to have projects with different authorization levels being tested on the same CI server.\r\n\r\nTo solve the problem we have split the CI application in two parts, a coordinator and runners. The coordinator enables you to specify how you want to test and stores the results. This is a rack application that communicates with the GitLab API. The runners perform the actual build and they are installed on separate machines. This way you never run tests on the same server that stores all you code._[1]\r\n\r\n## The Coordinator\r\n\r\n### Installation\r\n\r\n```bash\r\n# update the system\r\nsudo apt-get update\r\nsudo apt-get upgrade\r\n\r\n# install dependencies\r\nsudo apt-get install wget curl gcc checkinstall libxml2-dev libxslt-dev libcurl4-openssl-dev libreadline6-dev libc6-dev libssl-dev libmysql++-dev make build-essential zlib1g-dev openssh-server git-core libyaml-dev postfix libpq-dev libicu-dev\r\nsudo apt-get install redis-server\r\n```\r\n\r\n[1] https://about.gitlab.com/2013/06/20/integrating-gitlab-ci-with-gitlab/\r\n[2] https://gitlab.com/gitlab-org/gitlab-ci/blob/master/doc/install/installation.md','GitLab Continuous Integration','','inherit','open','open','','70-revision-v1','','','2014-10-16 20:34:08','2014-10-16 18:34:08','',70,'http://blog.gingerik.nl/?p=77',0,'revision','',0),(78,1,'2014-10-16 20:34:24','2014-10-16 18:34:24','_The GitLab.com team strongly believes in using feature branches and merge requests in software development. We also think that Test Driven Development (TDD) should be used wherever possible. If you combine these things what follows is that you have to know the testing results of a feature branch before accepting the merge request. GitLab CI was build to offer this functionality and we think most people using GitLab would benefit from using GitLab CI as well._\r\n\r\n> If you are running tests on the CI server you are doing it wrong!\r\n\r\n_Anybody who can push to a branch that is tested on a CI server can easily own that server. So you don\'t want to have projects with different authorization levels being tested on the same CI server._\r\n\r\n_To solve the problem we have split the CI application in two parts, a coordinator and runners. The coordinator enables you to specify how you want to test and stores the results. This is a rack application that communicates with the GitLab API. The runners perform the actual build and they are installed on separate machines. This way you never run tests on the same server that stores all you code._[1]\r\n\r\n## The Coordinator\r\n\r\n### Installation\r\n\r\n```bash\r\n# update the system\r\nsudo apt-get update\r\nsudo apt-get upgrade\r\n\r\n# install dependencies\r\nsudo apt-get install wget curl gcc checkinstall libxml2-dev libxslt-dev libcurl4-openssl-dev libreadline6-dev libc6-dev libssl-dev libmysql++-dev make build-essential zlib1g-dev openssh-server git-core libyaml-dev postfix libpq-dev libicu-dev\r\nsudo apt-get install redis-server\r\n```\r\n\r\n[1] https://about.gitlab.com/2013/06/20/integrating-gitlab-ci-with-gitlab/\r\n[2] https://gitlab.com/gitlab-org/gitlab-ci/blob/master/doc/install/installation.md','GitLab Continuous Integration','','inherit','open','open','','70-revision-v1','','','2014-10-16 20:34:24','2014-10-16 18:34:24','',70,'http://blog.gingerik.nl/?p=78',0,'revision','',0),(79,1,'2014-10-16 20:36:27','2014-10-16 18:36:27','_The GitLab.com team strongly believes in using feature branches and merge requests in software development. We also think that Test Driven Development (TDD) should be used wherever possible. If you combine these things what follows is that you have to know the testing results of a feature branch before accepting the merge request. GitLab CI was build to offer this functionality and we think most people using GitLab would benefit from using GitLab CI as well._\r\n\r\n> If you are running tests on the CI server you are doing it wrong!\r\n\r\n_Anybody who can push to a branch that is tested on a CI server can easily own that server. So you don\'t want to have projects with different authorization levels being tested on the same CI server._\r\n\r\n_To solve the problem we have split the CI application in two parts, a coordinator and runners. The coordinator enables you to specify how you want to test and stores the results. This is a rack application that communicates with the GitLab API. The runners perform the actual build and they are installed on separate machines. This way you never run tests on the same server that stores all you code._[1]\r\n\r\n## The Coordinator\r\n\r\n### Installation\r\n\r\n```bash\r\n# update the system\r\nsudo apt-get update\r\nsudo apt-get upgrade\r\n\r\n# install dependencies\r\nsudo apt-get install wget curl gcc checkinstall libxml2-dev libxslt-dev libcurl4-openssl-dev libreadline6-dev libc6-dev libssl-dev libmysql++-dev make build-essential zlib1g-dev openssh-server git-core libyaml-dev postfix libpq-dev libicu-dev\r\nsudo apt-get install redis-server\r\n\r\n# install ruby, if not installed yet\r\n```\r\n\r\n[1] https://about.gitlab.com/2013/06/20/integrating-gitlab-ci-with-gitlab/\r\n[2] https://gitlab.com/gitlab-org/gitlab-ci/blob/master/doc/install/installation.md','GitLab Continuous Integration','','inherit','open','open','','70-revision-v1','','','2014-10-16 20:36:27','2014-10-16 18:36:27','',70,'http://blog.gingerik.nl/?p=79',0,'revision','',0),(80,1,'2014-10-16 20:38:28','2014-10-16 18:38:28','_The GitLab.com team strongly believes in using feature branches and merge requests in software development. We also think that Test Driven Development (TDD) should be used wherever possible. If you combine these things what follows is that you have to know the testing results of a feature branch before accepting the merge request. GitLab CI was build to offer this functionality and we think most people using GitLab would benefit from using GitLab CI as well._\r\n\r\n> If you are running tests on the CI server you are doing it wrong!\r\n\r\n_Anybody who can push to a branch that is tested on a CI server can easily own that server. So you don\'t want to have projects with different authorization levels being tested on the same CI server._\r\n\r\n_To solve the problem we have split the CI application in two parts, a coordinator and runners. The coordinator enables you to specify how you want to test and stores the results. This is a rack application that communicates with the GitLab API. The runners perform the actual build and they are installed on separate machines. This way you never run tests on the same server that stores all you code._[1]\r\n\r\n## The Coordinator\r\n\r\n### Installation\r\n\r\n```bash\r\n# update the system\r\nsudo apt-get update\r\nsudo apt-get upgrade\r\n\r\n# install dependencies\r\nsudo apt-get install wget curl gcc checkinstall libxml2-dev libxslt-dev libcurl4-openssl-dev libreadline6-dev libc6-dev libssl-dev libmysql++-dev make build-essential zlib1g-dev openssh-server git-core libyaml-dev postfix libpq-dev libicu-dev\r\nsudo apt-get install redis-server\r\n\r\n# install ruby, if not installed yet\r\nmkdir /tmp/ruby && cd /tmp/ruby\r\ncurl --progress http://cache.ruby-lang.org/pub/ruby/2.0/ruby-2.0.0-p353.tar.bz2 | tar xj\r\ncd ruby-2.0.0-p353\r\n./configure --disable-install-rdoc\r\nmake\r\nsudo make install\r\n\r\n\r\n```\r\n\r\n[1] https://about.gitlab.com/2013/06/20/integrating-gitlab-ci-with-gitlab/\r\n[2] https://gitlab.com/gitlab-org/gitlab-ci/blob/master/doc/install/installation.md','GitLab Continuous Integration','','inherit','open','open','','70-revision-v1','','','2014-10-16 20:38:28','2014-10-16 18:38:28','',70,'http://blog.gingerik.nl/?p=80',0,'revision','',0),(81,1,'2014-10-16 20:46:48','2014-10-16 18:46:48','_The GitLab.com team strongly believes in using feature branches and merge requests in software development. We also think that Test Driven Development (TDD) should be used wherever possible. If you combine these things what follows is that you have to know the testing results of a feature branch before accepting the merge request. GitLab CI was build to offer this functionality and we think most people using GitLab would benefit from using GitLab CI as well._\r\n\r\n> If you are running tests on the CI server you are doing it wrong!\r\n\r\n_Anybody who can push to a branch that is tested on a CI server can easily own that server. So you don\'t want to have projects with different authorization levels being tested on the same CI server._\r\n\r\n_To solve the problem we have split the CI application in two parts, a coordinator and runners. The coordinator enables you to specify how you want to test and stores the results. This is a rack application that communicates with the GitLab API. The runners perform the actual build and they are installed on separate machines. This way you never run tests on the same server that stores all you code._[1]\r\n\r\n## The Coordinator\r\n\r\n### Installation\r\n\r\n```bash\r\n# update the system\r\nsudo apt-get update\r\nsudo apt-get upgrade\r\n\r\n# install dependencies\r\nsudo apt-get install wget curl gcc checkinstall libxml2-dev libxslt-dev libcurl4-openssl-dev libreadline6-dev libc6-dev libssl-dev libmysql++-dev make build-essential zlib1g-dev openssh-server git-core libyaml-dev postfix libpq-dev libicu-dev\r\nsudo apt-get install redis-server\r\n\r\n# compile ruby\r\nmkdir /tmp/ruby && cd /tmp/ruby\r\ncurl --progress http://cache.ruby-lang.org/pub/ruby/2.0/ruby-2.0.0-p353.tar.bz2 | tar xj\r\ncd ruby-2.0.0-p353\r\n./configure --disable-install-rdoc\r\nmake\r\nsudo make install\r\n\r\n# install the bundler gem\r\nsudo gem install bundler --no-ri --no-rdoc\r\n\r\n# create a gitlab ci user\r\nsudo adduser --disabled-login --gecos \'GitLab CI\' gitlab_ci\r\n\r\n# install & configure postgresql\r\nsudo apt-get install -y postgresql-9.1 libpq-dev\r\nsudo -u postgres psql -d template1 -c \"CREATE USER gitlab_ci;\"\r\nsudo -u postgres psql -d template1 -c \"CREATE DATABASE gitlab_ci_production OWNER gitlab_ci;\"\r\n# to check if it worked: sudo -u gitlab_ci -H psql -d gitlab_ci_production\r\n```\r\n\r\n[1] https://about.gitlab.com/2013/06/20/integrating-gitlab-ci-with-gitlab/\r\n[2] https://gitlab.com/gitlab-org/gitlab-ci/blob/master/doc/install/installation.md','GitLab Continuous Integration','','inherit','open','open','','70-revision-v1','','','2014-10-16 20:46:48','2014-10-16 18:46:48','',70,'http://blog.gingerik.nl/?p=81',0,'revision','',0),(82,1,'2014-10-16 20:48:47','2014-10-16 18:48:47','_The GitLab.com team strongly believes in using feature branches and merge requests in software development. We also think that Test Driven Development (TDD) should be used wherever possible. If you combine these things what follows is that you have to know the testing results of a feature branch before accepting the merge request. GitLab CI was build to offer this functionality and we think most people using GitLab would benefit from using GitLab CI as well._\r\n\r\n> If you are running tests on the CI server you are doing it wrong!\r\n\r\n_Anybody who can push to a branch that is tested on a CI server can easily own that server. So you don\'t want to have projects with different authorization levels being tested on the same CI server._\r\n\r\n_To solve the problem we have split the CI application in two parts, a coordinator and runners. The coordinator enables you to specify how you want to test and stores the results. This is a rack application that communicates with the GitLab API. The runners perform the actual build and they are installed on separate machines. This way you never run tests on the same server that stores all you code._[1]\r\n\r\n## The Coordinator\r\n\r\n### Installation\r\n\r\n```bash\r\n# update the system\r\nsudo apt-get update\r\nsudo apt-get upgrade\r\n\r\n# install dependencies\r\nsudo apt-get install wget curl gcc checkinstall libxml2-dev libxslt-dev libcurl4-openssl-dev libreadline6-dev libc6-dev libssl-dev libmysql++-dev make build-essential zlib1g-dev openssh-server git-core libyaml-dev postfix libpq-dev libicu-dev\r\nsudo apt-get install redis-server\r\n\r\n# compile ruby\r\nmkdir /tmp/ruby && cd /tmp/ruby\r\ncurl --progress http://cache.ruby-lang.org/pub/ruby/2.0/ruby-2.0.0-p353.tar.bz2 | tar xj\r\ncd ruby-2.0.0-p353\r\n./configure --disable-install-rdoc\r\nmake\r\nsudo make install\r\n\r\n# install the bundler gem\r\nsudo gem install bundler --no-ri --no-rdoc\r\n\r\n# create a gitlab ci user\r\nsudo adduser --disabled-login --gecos \'GitLab CI\' gitlab_ci\r\n\r\n# install & configure postgresql\r\nsudo apt-get install -y postgresql-9.1 libpq-dev\r\nsudo -u postgres psql -d template1 -c \"CREATE USER gitlab_ci;\"\r\nsudo -u postgres psql -d template1 -c \"CREATE DATABASE gitlab_ci_production OWNER gitlab_ci;\"\r\n# to check if it worked: sudo -u gitlab_ci -H psql -d gitlab_ci_production\r\n\r\n# get the gitlab ci source\r\ncd /home/gitlab_ci/\r\nsudo -u gitlab_ci -H git clone https://gitlab.com/gitlab-org/gitlab-ci.git\r\ncd gitlab-ci\r\nsudo -u gitlab_ci -H git checkout 5-0-stable\r\n```\r\n\r\n[1] https://about.gitlab.com/2013/06/20/integrating-gitlab-ci-with-gitlab/\r\n[2] https://gitlab.com/gitlab-org/gitlab-ci/blob/master/doc/install/installation.md','GitLab Continuous Integration','','inherit','open','open','','70-revision-v1','','','2014-10-16 20:48:47','2014-10-16 18:48:47','',70,'http://blog.gingerik.nl/?p=82',0,'revision','',0),(83,1,'2014-10-16 20:53:35','2014-10-16 18:53:35','_The GitLab.com team strongly believes in using feature branches and merge requests in software development. We also think that Test Driven Development (TDD) should be used wherever possible. If you combine these things what follows is that you have to know the testing results of a feature branch before accepting the merge request. GitLab CI was build to offer this functionality and we think most people using GitLab would benefit from using GitLab CI as well._\r\n\r\n> If you are running tests on the CI server you are doing it wrong!\r\n\r\n_Anybody who can push to a branch that is tested on a CI server can easily own that server. So you don\'t want to have projects with different authorization levels being tested on the same CI server._\r\n\r\n_To solve the problem we have split the CI application in two parts, a coordinator and runners. The coordinator enables you to specify how you want to test and stores the results. This is a rack application that communicates with the GitLab API. The runners perform the actual build and they are installed on separate machines. This way you never run tests on the same server that stores all you code._[1]\r\n\r\n## The Coordinator\r\n\r\n### Installation\r\n\r\n```bash\r\n# update the system\r\nsudo apt-get update\r\nsudo apt-get upgrade\r\n\r\n# install dependencies\r\nsudo apt-get install wget curl gcc checkinstall libxml2-dev libxslt-dev libcurl4-openssl-dev libreadline6-dev libc6-dev libssl-dev libmysql++-dev make build-essential zlib1g-dev openssh-server git-core libyaml-dev postfix libpq-dev libicu-dev\r\nsudo apt-get install redis-server\r\n\r\n# compile ruby\r\nmkdir /tmp/ruby && cd /tmp/ruby\r\ncurl --progress http://cache.ruby-lang.org/pub/ruby/2.0/ruby-2.0.0-p353.tar.bz2 | tar xj\r\ncd ruby-2.0.0-p353\r\n./configure --disable-install-rdoc\r\nmake\r\nsudo make install\r\n\r\n# install the bundler gem\r\nsudo gem install bundler --no-ri --no-rdoc\r\n\r\n# create a gitlab ci user\r\nsudo adduser --disabled-login --gecos \'GitLab CI\' gitlab_ci\r\n\r\n# install & configure postgresql\r\nsudo apt-get install -y postgresql-9.1 libpq-dev\r\nsudo -u postgres psql -d template1 -c \"CREATE USER gitlab_ci;\"\r\n#  we do not specify a password because we are using peer authentication\r\nsudo -u postgres psql -d template1 -c \"CREATE DATABASE gitlab_ci_production OWNER gitlab_ci;\"\r\nsudo -u gitlab_ci -H psql -d gitlab_ci_production -c \"\\du\" # verify you can connect\r\n\r\n# get the gitlab ci source\r\ncd /home/gitlab_ci/\r\nsudo -u gitlab_ci -H git clone https://gitlab.com/gitlab-org/gitlab-ci.git\r\ncd gitlab-ci\r\nsudo -u gitlab_ci -H git checkout 5-0-stable\r\n```\r\n\r\n[1] https://about.gitlab.com/2013/06/20/integrating-gitlab-ci-with-gitlab/\r\n[2] https://gitlab.com/gitlab-org/gitlab-ci/blob/master/doc/install/installation.md','GitLab Continuous Integration','','inherit','open','open','','70-revision-v1','','','2014-10-16 20:53:35','2014-10-16 18:53:35','',70,'http://blog.gingerik.nl/?p=83',0,'revision','',0),(84,1,'2014-10-16 20:54:24','2014-10-16 18:54:24','_The GitLab.com team strongly believes in using feature branches and merge requests in software development. We also think that Test Driven Development (TDD) should be used wherever possible. If you combine these things what follows is that you have to know the testing results of a feature branch before accepting the merge request. GitLab CI was build to offer this functionality and we think most people using GitLab would benefit from using GitLab CI as well._\r\n\r\n> If you are running tests on the CI server you are doing it wrong!\r\n\r\n_Anybody who can push to a branch that is tested on a CI server can easily own that server. So you don\'t want to have projects with different authorization levels being tested on the same CI server._\r\n\r\n_To solve the problem we have split the CI application in two parts, a coordinator and runners. The coordinator enables you to specify how you want to test and stores the results. This is a rack application that communicates with the GitLab API. The runners perform the actual build and they are installed on separate machines. This way you never run tests on the same server that stores all you code._[1]\r\n\r\n## The Coordinator\r\n\r\n### Installation\r\n\r\n```bash\r\n# update the system\r\nsudo apt-get update\r\nsudo apt-get upgrade\r\n\r\n# install dependencies\r\nsudo apt-get install wget curl gcc checkinstall libxml2-dev libxslt-dev libcurl4-openssl-dev libreadline6-dev libc6-dev libssl-dev libmysql++-dev make build-essential zlib1g-dev openssh-server git-core libyaml-dev postfix libpq-dev libicu-dev\r\nsudo apt-get install redis-server\r\n\r\n# compile ruby\r\nmkdir /tmp/ruby && cd /tmp/ruby\r\ncurl --progress http://cache.ruby-lang.org/pub/ruby/2.0/ruby-2.0.0-p353.tar.bz2 | tar xj\r\ncd ruby-2.0.0-p353\r\n./configure --disable-install-rdoc\r\nmake\r\nsudo make install\r\n\r\n# install the bundler gem\r\nsudo gem install bundler --no-ri --no-rdoc\r\n\r\n# create a gitlab ci user\r\nsudo adduser --disabled-login --gecos \'GitLab CI\' gitlab_ci\r\n\r\n# install & configure postgresql\r\n#  we do not specify a password because we are using peer authentication\r\nsudo apt-get install -y postgresql-9.1 libpq-dev\r\nsudo -u postgres psql -d template1 -c \"CREATE USER gitlab_ci;\"\r\nsudo -u postgres psql -d template1 -c \"CREATE DATABASE gitlab_ci_production OWNER gitlab_ci;\"\r\nsudo -u gitlab_ci -H psql -d gitlab_ci_production -c \"\\du\" # verify you can connect\r\n\r\n# get the gitlab ci source\r\ncd /home/gitlab_ci/\r\nsudo -u gitlab_ci -H git clone https://gitlab.com/gitlab-org/gitlab-ci.git\r\ncd gitlab-ci\r\nsudo -u gitlab_ci -H git checkout 5-0-stable\r\n```\r\n\r\n[1] https://about.gitlab.com/2013/06/20/integrating-gitlab-ci-with-gitlab/\r\n[2] https://gitlab.com/gitlab-org/gitlab-ci/blob/master/doc/install/installation.md','GitLab Continuous Integration','','inherit','open','open','','70-revision-v1','','','2014-10-16 20:54:24','2014-10-16 18:54:24','',70,'http://blog.gingerik.nl/?p=84',0,'revision','',0),(85,1,'2014-10-16 21:07:43','2014-10-16 19:07:43','_The GitLab.com team strongly believes in using feature branches and merge requests in software development. We also think that Test Driven Development (TDD) should be used wherever possible. If you combine these things what follows is that you have to know the testing results of a feature branch before accepting the merge request. GitLab CI was build to offer this functionality and we think most people using GitLab would benefit from using GitLab CI as well._\r\n\r\n> If you are running tests on the CI server you are doing it wrong!\r\n\r\n_Anybody who can push to a branch that is tested on a CI server can easily own that server. So you don\'t want to have projects with different authorization levels being tested on the same CI server._\r\n\r\n_To solve the problem we have split the CI application in two parts, a coordinator and runners. The coordinator enables you to specify how you want to test and stores the results. This is a rack application that communicates with the GitLab API. The runners perform the actual build and they are installed on separate machines. This way you never run tests on the same server that stores all you code._[1]\r\n\r\n## The Coordinator\r\n\r\n### Installation\r\n\r\n```bash\r\n# update the system\r\nsudo apt-get update\r\nsudo apt-get upgrade\r\n\r\n# install dependencies\r\nsudo apt-get install wget curl gcc checkinstall libxml2-dev libxslt-dev libcurl4-openssl-dev libreadline6-dev libc6-dev libssl-dev libmysql++-dev make build-essential zlib1g-dev openssh-server git-core libyaml-dev postfix libpq-dev libicu-dev\r\nsudo apt-get install redis-server\r\n\r\n# compile ruby\r\nmkdir /tmp/ruby && cd /tmp/ruby\r\ncurl --progress http://cache.ruby-lang.org/pub/ruby/2.0/ruby-2.0.0-p353.tar.bz2 | tar xj\r\ncd ruby-2.0.0-p353\r\n./configure --disable-install-rdoc\r\nmake\r\nsudo make install\r\n\r\n# install the bundler gem\r\nsudo gem install bundler --no-ri --no-rdoc\r\n\r\n# create a gitlab ci user\r\nsudo adduser --disabled-login --gecos \'GitLab CI\' gitlab_ci\r\n\r\n# install & configure postgresql\r\n#  we do not specify a password because we are using peer authentication\r\nsudo apt-get install -y postgresql-9.1 libpq-dev\r\nsudo -u postgres psql -d template1 -c \"CREATE USER gitlab_ci;\"\r\nsudo -u postgres psql -d template1 -c \"CREATE DATABASE gitlab_ci_production OWNER gitlab_ci;\"\r\nsudo -u gitlab_ci -H psql -d gitlab_ci_production -c \"\\du\" # verify you can connect\r\n\r\n# get the gitlab ci source\r\ncd /home/gitlab_ci/\r\nsudo -u gitlab_ci -H git clone https://gitlab.com/gitlab-org/gitlab-ci.git\r\ncd gitlab-ci\r\nsudo -u gitlab_ci -H git checkout 5-0-stable\r\n\r\n# set-up gitlab\r\nsudo -u gitlab_ci -H cp config/application.yml.example config/application.yml\r\nsudo -u gitlab_ci -H vim config/application.yml # configure the application\r\nsudo -u gitlab_ci -H cp config/unicorn.rb.example config/unicorn.rb\r\nsudo -u gitlab_ci -H vim config/unicorn.rb # configure the server\r\n\r\n# Create socket and pid directories\r\nsudo -u gitlab_ci -H mkdir -p tmp/sockets/\r\nsudo chmod -R u+rwX tmp/sockets/ # yes, relative\r\nsudo -u gitlab_ci -H mkdir -p tmp/pids/\r\nsudo chmod -R u+rwX tmp/pids/ # yes, relative\r\n```\r\n\r\n[1] https://about.gitlab.com/2013/06/20/integrating-gitlab-ci-with-gitlab/\r\n[2] https://gitlab.com/gitlab-org/gitlab-ci/blob/master/doc/install/installation.md','GitLab Continuous Integration','','inherit','open','open','','70-revision-v1','','','2014-10-16 21:07:43','2014-10-16 19:07:43','',70,'http://blog.gingerik.nl/?p=85',0,'revision','',0),(86,1,'2014-10-16 21:10:07','2014-10-16 19:10:07','_The GitLab.com team strongly believes in using feature branches and merge requests in software development. We also think that Test Driven Development (TDD) should be used wherever possible. If you combine these things what follows is that you have to know the testing results of a feature branch before accepting the merge request. GitLab CI was build to offer this functionality and we think most people using GitLab would benefit from using GitLab CI as well._\r\n\r\n> If you are running tests on the CI server you are doing it wrong!\r\n\r\n_Anybody who can push to a branch that is tested on a CI server can easily own that server. So you don\'t want to have projects with different authorization levels being tested on the same CI server._\r\n\r\n_To solve the problem we have split the CI application in two parts, a coordinator and runners. The coordinator enables you to specify how you want to test and stores the results. This is a rack application that communicates with the GitLab API. The runners perform the actual build and they are installed on separate machines. This way you never run tests on the same server that stores all you code._[1]\r\n\r\n## The Coordinator\r\n\r\n### Installation\r\n\r\n#### Dependencies\r\n\r\n```bash\r\n# update the system\r\nsudo apt-get update\r\nsudo apt-get upgrade\r\n\r\n# install dependencies\r\nsudo apt-get install wget curl gcc checkinstall libxml2-dev libxslt-dev libcurl4-openssl-dev libreadline6-dev libc6-dev libssl-dev libmysql++-dev make build-essential zlib1g-dev openssh-server git-core libyaml-dev postfix libpq-dev libicu-dev\r\nsudo apt-get install redis-server\r\n\r\n# compile ruby\r\nmkdir /tmp/ruby && cd /tmp/ruby\r\ncurl --progress http://cache.ruby-lang.org/pub/ruby/2.0/ruby-2.0.0-p353.tar.bz2 | tar xj\r\ncd ruby-2.0.0-p353\r\n./configure --disable-install-rdoc\r\nmake\r\nsudo make install\r\n\r\n# install the bundler gem\r\nsudo gem install bundler --no-ri --no-rdoc\r\n\r\n# create a gitlab ci user\r\nsudo adduser --disabled-login --gecos \'GitLab CI\' gitlab_ci\r\n\r\n# install & configure postgresql\r\n#  we do not specify a password because we are using peer authentication\r\nsudo apt-get install -y postgresql-9.1 libpq-dev\r\nsudo -u postgres psql -d template1 -c \"CREATE USER gitlab_ci;\"\r\nsudo -u postgres psql -d template1 -c \"CREATE DATABASE gitlab_ci_production OWNER gitlab_ci;\"\r\nsudo -u gitlab_ci -H psql -d gitlab_ci_production -c \"\\du\" # verify you can connect\r\n```\r\n\r\n#### GitLab CI\r\n\r\n```bash\r\n# get the gitlab ci source\r\ncd /home/gitlab_ci/\r\nsudo -u gitlab_ci -H git clone https://gitlab.com/gitlab-org/gitlab-ci.git\r\ncd gitlab-ci\r\nsudo -u gitlab_ci -H git checkout 5-0-stable\r\n\r\n# set-up gitlab\r\nsudo -u gitlab_ci -H cp config/application.yml.example config/application.yml\r\nsudo -u gitlab_ci -H vim config/application.yml # configure the application\r\nsudo -u gitlab_ci -H cp config/unicorn.rb.example config/unicorn.rb\r\nsudo -u gitlab_ci -H vim config/unicorn.rb # configure the server\r\n\r\n# Create socket and pid directories\r\nsudo -u gitlab_ci -H mkdir -p tmp/sockets/\r\nsudo chmod -R u+rwX tmp/sockets/ # yes, relative\r\nsudo -u gitlab_ci -H mkdir -p tmp/pids/\r\nsudo chmod -R u+rwX tmp/pids/ # yes, relative\r\n\r\n# install\r\nsudo -u gitlab_ci -H bundle install --without development test mysql --deployment\r\n```\r\n\r\n[1] https://about.gitlab.com/2013/06/20/integrating-gitlab-ci-with-gitlab/\r\n[2] https://gitlab.com/gitlab-org/gitlab-ci/blob/master/doc/install/installation.md','GitLab Continuous Integration','','inherit','open','open','','70-revision-v1','','','2014-10-16 21:10:07','2014-10-16 19:10:07','',70,'http://blog.gingerik.nl/?p=86',0,'revision','',0),(87,1,'2014-10-16 21:12:32','2014-10-16 19:12:32','_The GitLab.com team strongly believes in using feature branches and merge requests in software development. We also think that Test Driven Development (TDD) should be used wherever possible. If you combine these things what follows is that you have to know the testing results of a feature branch before accepting the merge request. GitLab CI was build to offer this functionality and we think most people using GitLab would benefit from using GitLab CI as well._\r\n\r\n> If you are running tests on the CI server you are doing it wrong!\r\n\r\n_Anybody who can push to a branch that is tested on a CI server can easily own that server. So you don\'t want to have projects with different authorization levels being tested on the same CI server._\r\n\r\n_To solve the problem we have split the CI application in two parts, a coordinator and runners. The coordinator enables you to specify how you want to test and stores the results. This is a rack application that communicates with the GitLab API. The runners perform the actual build and they are installed on separate machines. This way you never run tests on the same server that stores all you code._[1]\r\n\r\n## The Coordinator\r\n\r\n### Installation\r\n\r\n#### Dependencies\r\n\r\n```bash\r\n# update the system\r\nsudo apt-get update\r\nsudo apt-get upgrade\r\n\r\n# install dependencies\r\nsudo apt-get install wget curl gcc checkinstall libxml2-dev libxslt-dev libcurl4-openssl-dev libreadline6-dev libc6-dev libssl-dev libmysql++-dev make build-essential zlib1g-dev openssh-server git-core libyaml-dev postfix libpq-dev libicu-dev\r\nsudo apt-get install redis-server\r\n\r\n# compile ruby\r\nmkdir /tmp/ruby && cd /tmp/ruby\r\ncurl --progress http://cache.ruby-lang.org/pub/ruby/2.0/ruby-2.0.0-p353.tar.bz2 | tar xj\r\ncd ruby-2.0.0-p353\r\n./configure --disable-install-rdoc\r\nmake\r\nsudo make install\r\n\r\n# install the bundler gem\r\nsudo gem install bundler --no-ri --no-rdoc\r\n\r\n# create a gitlab ci user\r\nsudo adduser --disabled-login --gecos \'GitLab CI\' gitlab_ci\r\n\r\n# install & configure postgresql\r\n#  we do not specify a password because we are using peer authentication\r\nsudo apt-get install -y postgresql-9.1 libpq-dev\r\nsudo -u postgres psql -d template1 -c \"CREATE USER gitlab_ci;\"\r\nsudo -u postgres psql -d template1 -c \"CREATE DATABASE gitlab_ci_production OWNER gitlab_ci;\"\r\nsudo -u gitlab_ci -H psql -d gitlab_ci_production -c \"\\du\" # verify you can connect\r\n```\r\n\r\n#### GitLab CI\r\n\r\n```bash\r\n# get the gitlab ci source\r\ncd /home/gitlab_ci/\r\nsudo -u gitlab_ci -H git clone https://gitlab.com/gitlab-org/gitlab-ci.git\r\ncd gitlab-ci\r\nsudo -u gitlab_ci -H git checkout 5-0-stable\r\n\r\n# set-up gitlab\r\nsudo -u gitlab_ci -H cp config/application.yml.example config/application.yml\r\nsudo -u gitlab_ci -H vim config/application.yml # configure the application\r\nsudo -u gitlab_ci -H cp config/unicorn.rb.example config/unicorn.rb\r\nsudo -u gitlab_ci -H vim config/unicorn.rb # configure the server\r\n\r\n# Create socket and pid directories\r\nsudo -u gitlab_ci -H mkdir -p tmp/sockets/\r\nsudo chmod -R u+rwX tmp/sockets/ # yes, relative\r\nsudo -u gitlab_ci -H mkdir -p tmp/pids/\r\nsudo chmod -R u+rwX tmp/pids/ # yes, relative\r\n\r\n# install gems\r\nsudo -u gitlab_ci -H bundle install --without development test mysql --deployment # without ... mysql\r\n\r\n# set-up database\r\nsudo -u gitlab_ci -H cp config/database.yml.postgresql config/database.yml\r\nsudo -u gitlab_ci -H bundle exec rake setup RAILS_ENV=production\r\nsudo -u gitlab_ci -H bundle exec whenever -w RAILS_ENV=production\r\n\r\n```\r\n\r\n[1] https://about.gitlab.com/2013/06/20/integrating-gitlab-ci-with-gitlab/\r\n[2] https://gitlab.com/gitlab-org/gitlab-ci/blob/master/doc/install/installation.md','GitLab Continuous Integration','','inherit','open','open','','70-revision-v1','','','2014-10-16 21:12:32','2014-10-16 19:12:32','',70,'http://blog.gingerik.nl/?p=87',0,'revision','',0),(88,1,'2014-10-16 21:16:39','2014-10-16 19:16:39','_The GitLab.com team strongly believes in using feature branches and merge requests in software development. We also think that Test Driven Development (TDD) should be used wherever possible. If you combine these things what follows is that you have to know the testing results of a feature branch before accepting the merge request. GitLab CI was build to offer this functionality and we think most people using GitLab would benefit from using GitLab CI as well._\r\n\r\n> If you are running tests on the CI server you are doing it wrong!\r\n\r\n_Anybody who can push to a branch that is tested on a CI server can easily own that server. So you don\'t want to have projects with different authorization levels being tested on the same CI server._\r\n\r\n_To solve the problem we have split the CI application in two parts, a coordinator and runners. The coordinator enables you to specify how you want to test and stores the results. This is a rack application that communicates with the GitLab API. The runners perform the actual build and they are installed on separate machines. This way you never run tests on the same server that stores all you code._[1]\r\n\r\n## The Coordinator\r\n\r\n### Installation\r\n\r\n#### Dependencies\r\n\r\n```bash\r\n# update the system\r\nsudo apt-get update\r\nsudo apt-get upgrade\r\n\r\n# install dependencies\r\nsudo apt-get install wget curl gcc checkinstall libxml2-dev libxslt-dev libcurl4-openssl-dev libreadline6-dev libc6-dev libssl-dev libmysql++-dev make build-essential zlib1g-dev openssh-server git-core libyaml-dev postfix libpq-dev libicu-dev\r\nsudo apt-get install redis-server\r\n\r\n# compile ruby\r\nmkdir /tmp/ruby && cd /tmp/ruby\r\ncurl --progress http://cache.ruby-lang.org/pub/ruby/2.0/ruby-2.0.0-p353.tar.bz2 | tar xj\r\ncd ruby-2.0.0-p353\r\n./configure --disable-install-rdoc\r\nmake\r\nsudo make install\r\n\r\n# install the bundler gem\r\nsudo gem install bundler --no-ri --no-rdoc\r\n\r\n# create a gitlab ci user\r\nsudo adduser --disabled-login --gecos \'GitLab CI\' gitlab_ci\r\n\r\n# install & configure postgresql\r\n#  we do not specify a password because we are using peer authentication\r\nsudo apt-get install -y postgresql-9.1 libpq-dev\r\nsudo -u postgres psql -d template1 -c \"CREATE USER gitlab_ci;\"\r\nsudo -u postgres psql -d template1 -c \"CREATE DATABASE gitlab_ci_production OWNER gitlab_ci;\"\r\nsudo -u gitlab_ci -H psql -d gitlab_ci_production -c \"\\du\" # verify you can connect\r\n```\r\n\r\n#### GitLab CI\r\n\r\n```bash\r\n# get the gitlab ci source\r\ncd /home/gitlab_ci/\r\nsudo -u gitlab_ci -H git clone https://gitlab.com/gitlab-org/gitlab-ci.git\r\ncd gitlab-ci\r\nsudo -u gitlab_ci -H git checkout 5-0-stable\r\n\r\n# set-up gitlab\r\nsudo -u gitlab_ci -H cp config/application.yml.example config/application.yml\r\nsudo -u gitlab_ci -H vim config/application.yml # configure the application\r\nsudo -u gitlab_ci -H cp config/unicorn.rb.example config/unicorn.rb\r\nsudo -u gitlab_ci -H vim config/unicorn.rb # configure the server\r\n\r\n# Create socket and pid directories\r\nsudo -u gitlab_ci -H mkdir -p tmp/sockets/\r\nsudo chmod -R u+rwX tmp/sockets/ # yes, relative\r\nsudo -u gitlab_ci -H mkdir -p tmp/pids/\r\nsudo chmod -R u+rwX tmp/pids/ # yes, relative\r\n\r\n# install gems\r\nsudo -u gitlab_ci -H bundle install --without development test mysql --deployment # without ... mysql\r\n\r\n# set-up database\r\nsudo -u gitlab_ci -H cp config/database.yml.postgresql config/database.yml\r\nsudo -u gitlab_ci -H bundle exec rake setup RAILS_ENV=production\r\nsudo -u gitlab_ci -H bundle exec whenever -w RAILS_ENV=production\r\n```\r\n\r\n#### Post-installation\r\n\r\n```bash\r\n# install init.d script\r\nsudo cp /home/gitlab_ci/gitlab-ci/lib/support/init.d/gitlab_ci /etc/init.d/gitlab_ci\r\nsudo update-rc.d gitlab_ci defaults 21 # start on boot\r\nsudo service gitlab_ci start\r\n```\r\n\r\n[1] https://about.gitlab.com/2013/06/20/integrating-gitlab-ci-with-gitlab/\r\n[2] https://gitlab.com/gitlab-org/gitlab-ci/blob/master/doc/install/installation.md','GitLab Continuous Integration','','inherit','open','open','','70-revision-v1','','','2014-10-16 21:16:39','2014-10-16 19:16:39','',70,'http://blog.gingerik.nl/?p=88',0,'revision','',0),(89,1,'2014-10-16 21:21:04','2014-10-16 19:21:04','_The GitLab.com team strongly believes in using feature branches and merge requests in software development. We also think that Test Driven Development (TDD) should be used wherever possible. If you combine these things what follows is that you have to know the testing results of a feature branch before accepting the merge request. GitLab CI was build to offer this functionality and we think most people using GitLab would benefit from using GitLab CI as well._\r\n\r\n> If you are running tests on the CI server you are doing it wrong!\r\n\r\n_Anybody who can push to a branch that is tested on a CI server can easily own that server. So you don\'t want to have projects with different authorization levels being tested on the same CI server._\r\n\r\n_To solve the problem we have split the CI application in two parts, a coordinator and runners. The coordinator enables you to specify how you want to test and stores the results. This is a rack application that communicates with the GitLab API. The runners perform the actual build and they are installed on separate machines. This way you never run tests on the same server that stores all you code._[1]\r\n\r\n## The Coordinator\r\n\r\n### Installation\r\n\r\n#### Dependencies\r\n\r\n```bash\r\n# update the system\r\nsudo apt-get update\r\nsudo apt-get upgrade\r\n\r\n# install dependencies\r\nsudo apt-get install wget curl gcc checkinstall libxml2-dev libxslt-dev libcurl4-openssl-dev libreadline6-dev libc6-dev libssl-dev libmysql++-dev make build-essential zlib1g-dev openssh-server git-core libyaml-dev postfix libpq-dev libicu-dev\r\nsudo apt-get install redis-server\r\n\r\n# compile ruby\r\nmkdir /tmp/ruby && cd /tmp/ruby\r\ncurl --progress http://cache.ruby-lang.org/pub/ruby/2.0/ruby-2.0.0-p353.tar.bz2 | tar xj\r\ncd ruby-2.0.0-p353\r\n./configure --disable-install-rdoc\r\nmake\r\nsudo make install\r\n\r\n# install the bundler gem\r\nsudo gem install bundler --no-ri --no-rdoc\r\n\r\n# create a gitlab ci user\r\nsudo adduser --disabled-login --gecos \'GitLab CI\' gitlab_ci\r\n\r\n# install & configure postgresql\r\n#  we do not specify a password because we are using peer authentication\r\nsudo apt-get install -y postgresql-9.1 libpq-dev\r\nsudo -u postgres psql -d template1 -c \"CREATE USER gitlab_ci;\"\r\nsudo -u postgres psql -d template1 -c \"CREATE DATABASE gitlab_ci_production OWNER gitlab_ci;\"\r\nsudo -u gitlab_ci -H psql -d gitlab_ci_production -c \"\\du\" # verify you can connect\r\n```\r\n\r\n#### GitLab CI\r\n\r\n```bash\r\n# get the gitlab ci source\r\ncd /home/gitlab_ci/\r\nsudo -u gitlab_ci -H git clone https://gitlab.com/gitlab-org/gitlab-ci.git\r\ncd gitlab-ci\r\nsudo -u gitlab_ci -H git checkout 5-0-stable\r\n\r\n# set-up gitlab\r\nsudo -u gitlab_ci -H cp config/application.yml.example config/application.yml\r\nsudo -u gitlab_ci -H vim config/application.yml # configure the application\r\nsudo -u gitlab_ci -H cp config/unicorn.rb.example config/unicorn.rb\r\nsudo -u gitlab_ci -H vim config/unicorn.rb # configure the server\r\n\r\n# Create socket and pid directories\r\nsudo -u gitlab_ci -H mkdir -p tmp/sockets/\r\nsudo chmod -R u+rwX tmp/sockets/ # yes, relative\r\nsudo -u gitlab_ci -H mkdir -p tmp/pids/\r\nsudo chmod -R u+rwX tmp/pids/ # yes, relative\r\n\r\n# install gems\r\nsudo -u gitlab_ci -H bundle install --without development test mysql --deployment # without ... mysql\r\n\r\n# set-up database\r\nsudo -u gitlab_ci -H cp config/database.yml.postgresql config/database.yml\r\nsudo -u gitlab_ci -H bundle exec rake setup RAILS_ENV=production\r\nsudo -u gitlab_ci -H bundle exec whenever -w RAILS_ENV=production\r\n```\r\n\r\n#### Post-installation\r\n\r\n##### Init.d script\r\n\r\n```bash\r\nsudo cp /home/gitlab_ci/gitlab-ci/lib/support/init.d/gitlab_ci /etc/init.d/gitlab_ci\r\nsudo update-rc.d gitlab_ci defaults 21 # start on boot\r\nsudo service gitlab_ci start\r\n```\r\n\r\n##### Nginx\r\n\r\n```bash\r\nsudo apt-get install nginx\r\nsudo cp /home/gitlab_ci/gitlab-ci/lib/support/nginx/gitlab_ci /etc/nginx/sites-available/gitlab_ci\r\nsudo vim /etc/nginx/sites-available/gitlab_ci # edit ip & fqdn\r\nsudo ln -s /etc/nginx/sites-available/gitlab_ci /etc/nginx/sites-enabled/gitlab_ci\r\nsudo service nginx start\r\n```\r\n\r\n[1] https://about.gitlab.com/2013/06/20/integrating-gitlab-ci-with-gitlab/\r\n[2] https://gitlab.com/gitlab-org/gitlab-ci/blob/master/doc/install/installation.md','GitLab Continuous Integration','','inherit','open','open','','70-revision-v1','','','2014-10-16 21:21:04','2014-10-16 19:21:04','',70,'http://blog.gingerik.nl/?p=89',0,'revision','',0),(90,1,'2014-10-16 21:22:38','2014-10-16 19:22:38','_The GitLab.com team strongly believes in using feature branches and merge requests in software development. We also think that Test Driven Development (TDD) should be used wherever possible. If you combine these things what follows is that you have to know the testing results of a feature branch before accepting the merge request. GitLab CI was build to offer this functionality and we think most people using GitLab would benefit from using GitLab CI as well._\r\n\r\n> If you are running tests on the CI server you are doing it wrong!\r\n\r\n_Anybody who can push to a branch that is tested on a CI server can easily own that server. So you don\'t want to have projects with different authorization levels being tested on the same CI server._\r\n\r\n_To solve the problem we have split the CI application in two parts, a coordinator and runners. The coordinator enables you to specify how you want to test and stores the results. This is a rack application that communicates with the GitLab API. The runners perform the actual build and they are installed on separate machines. This way you never run tests on the same server that stores all you code._[1]\r\n\r\n## The Coordinator\r\n\r\n### Installation\r\n\r\n#### Dependencies\r\n\r\n```bash\r\n# update the system\r\nsudo apt-get update\r\nsudo apt-get upgrade\r\n\r\n# install dependencies\r\nsudo apt-get install wget curl gcc checkinstall libxml2-dev libxslt-dev libcurl4-openssl-dev libreadline6-dev libc6-dev libssl-dev libmysql++-dev make build-essential zlib1g-dev openssh-server git-core libyaml-dev postfix libpq-dev libicu-dev\r\nsudo apt-get install redis-server\r\n\r\n# compile ruby\r\nmkdir /tmp/ruby && cd /tmp/ruby\r\ncurl --progress http://cache.ruby-lang.org/pub/ruby/2.0/ruby-2.0.0-p353.tar.bz2 | tar xj\r\ncd ruby-2.0.0-p353\r\n./configure --disable-install-rdoc\r\nmake\r\nsudo make install\r\n\r\n# install the bundler gem\r\nsudo gem install bundler --no-ri --no-rdoc\r\n\r\n# create a gitlab ci user\r\nsudo adduser --disabled-login --gecos \'GitLab CI\' gitlab_ci\r\n\r\n# install & configure postgresql\r\n#  we do not specify a password because we are using peer authentication\r\nsudo apt-get install -y postgresql-9.1 libpq-dev\r\nsudo -u postgres psql -d template1 -c \"CREATE USER gitlab_ci;\"\r\nsudo -u postgres psql -d template1 -c \"CREATE DATABASE gitlab_ci_production OWNER gitlab_ci;\"\r\nsudo -u gitlab_ci -H psql -d gitlab_ci_production -c \"\\du\" # verify you can connect\r\n```\r\n\r\n#### GitLab CI\r\n\r\n```bash\r\n# get the gitlab ci source\r\ncd /home/gitlab_ci/\r\nsudo -u gitlab_ci -H git clone https://gitlab.com/gitlab-org/gitlab-ci.git\r\ncd gitlab-ci\r\nsudo -u gitlab_ci -H git checkout 5-0-stable\r\n\r\n# set-up gitlab\r\nsudo -u gitlab_ci -H cp config/application.yml.example config/application.yml\r\nsudo -u gitlab_ci -H vim config/application.yml # configure the application\r\nsudo -u gitlab_ci -H cp config/unicorn.rb.example config/unicorn.rb\r\nsudo -u gitlab_ci -H vim config/unicorn.rb # configure the server\r\n\r\n# Create socket and pid directories\r\nsudo -u gitlab_ci -H mkdir -p tmp/sockets/\r\nsudo chmod -R u+rwX tmp/sockets/ # yes, relative\r\nsudo -u gitlab_ci -H mkdir -p tmp/pids/\r\nsudo chmod -R u+rwX tmp/pids/ # yes, relative\r\n\r\n# install gems\r\nsudo -u gitlab_ci -H bundle install --without development test mysql --deployment # without ... mysql\r\n\r\n# set-up database\r\nsudo -u gitlab_ci -H cp config/database.yml.postgresql config/database.yml\r\nsudo -u gitlab_ci -H bundle exec rake setup RAILS_ENV=production\r\nsudo -u gitlab_ci -H bundle exec whenever -w RAILS_ENV=production\r\n```\r\n\r\n#### Post-installation\r\n\r\nGitLab is now installed! We need some final configurations.\r\n\r\n##### Init.d script\r\n\r\nWe want GitLab CI to start on boot, so we add an init.d script.\r\n\r\n```bash\r\nsudo cp /home/gitlab_ci/gitlab-ci/lib/support/init.d/gitlab_ci /etc/init.d/gitlab_ci\r\nsudo update-rc.d gitlab_ci defaults 21 # start on boot\r\nsudo service gitlab_ci start\r\n```\r\n\r\n##### Nginx\r\n\r\nConfigure nginx (an apache alternative) to host GitLab CI.\r\n\r\n```bash\r\nsudo apt-get install nginx\r\nsudo cp /home/gitlab_ci/gitlab-ci/lib/support/nginx/gitlab_ci /etc/nginx/sites-available/gitlab_ci\r\nsudo vim /etc/nginx/sites-available/gitlab_ci # edit ip & fqdn\r\nsudo ln -s /etc/nginx/sites-available/gitlab_ci /etc/nginx/sites-enabled/gitlab_ci\r\nsudo service nginx start\r\n```\r\n\r\n[1] https://about.gitlab.com/2013/06/20/integrating-gitlab-ci-with-gitlab/\r\n[2] https://gitlab.com/gitlab-org/gitlab-ci/blob/master/doc/install/installation.md','GitLab Continuous Integration','','inherit','open','open','','70-revision-v1','','','2014-10-16 21:22:38','2014-10-16 19:22:38','',70,'http://blog.gingerik.nl/?p=90',0,'revision','',0),(91,1,'2014-10-16 21:25:33','2014-10-16 19:25:33','_The GitLab.com team strongly believes in using feature branches and merge requests in software development. We also think that Test Driven Development (TDD) should be used wherever possible. If you combine these things what follows is that you have to know the testing results of a feature branch before accepting the merge request. GitLab CI was build to offer this functionality and we think most people using GitLab would benefit from using GitLab CI as well._\r\n\r\n> If you are running tests on the CI server you are doing it wrong!\r\n\r\n_Anybody who can push to a branch that is tested on a CI server can easily own that server. So you don\'t want to have projects with different authorization levels being tested on the same CI server._\r\n\r\n_To solve the problem we have split the CI application in two parts, a coordinator and runners. The coordinator enables you to specify how you want to test and stores the results. This is a rack application that communicates with the GitLab API. The runners perform the actual build and they are installed on separate machines. This way you never run tests on the same server that stores all you code._[1]\r\n\r\n## The Coordinator\r\n\r\nThe Coordinator is installed on the **same** server as GitLab itself. There is no need to put this somewhere else.\r\n\r\n### Installation\r\n\r\nMake sure **all** steps are run successfully!\r\n\r\n#### Dependencies\r\n\r\nFirst we install some packages that are required by GitLab CI.\r\n\r\n```bash\r\n# update the system\r\nsudo apt-get update\r\nsudo apt-get upgrade\r\n\r\n# install dependencies\r\nsudo apt-get install wget curl gcc checkinstall libxml2-dev libxslt-dev libcurl4-openssl-dev libreadline6-dev libc6-dev libssl-dev libmysql++-dev make build-essential zlib1g-dev openssh-server git-core libyaml-dev postfix libpq-dev libicu-dev\r\nsudo apt-get install redis-server\r\n\r\n# compile ruby\r\nmkdir /tmp/ruby && cd /tmp/ruby\r\ncurl --progress http://cache.ruby-lang.org/pub/ruby/2.0/ruby-2.0.0-p353.tar.bz2 | tar xj\r\ncd ruby-2.0.0-p353\r\n./configure --disable-install-rdoc\r\nmake\r\nsudo make install\r\n\r\n# install the bundler gem\r\nsudo gem install bundler --no-ri --no-rdoc\r\n\r\n# create a gitlab ci user\r\nsudo adduser --disabled-login --gecos \'GitLab CI\' gitlab_ci\r\n\r\n# install & configure postgresql\r\n#  we do not specify a password because we are using peer authentication\r\nsudo apt-get install -y postgresql-9.1 libpq-dev\r\nsudo -u postgres psql -d template1 -c \"CREATE USER gitlab_ci;\"\r\nsudo -u postgres psql -d template1 -c \"CREATE DATABASE gitlab_ci_production OWNER gitlab_ci;\"\r\nsudo -u gitlab_ci -H psql -d gitlab_ci_production -c \"\\du\" # verify you can connect\r\n```\r\n\r\n#### GitLab CI\r\n\r\nNow we have successfully installed all dependencies, it is time to install GitLab CI itself.\r\n\r\n```bash\r\n# get the gitlab ci source\r\ncd /home/gitlab_ci/\r\nsudo -u gitlab_ci -H git clone https://gitlab.com/gitlab-org/gitlab-ci.git\r\ncd gitlab-ci\r\nsudo -u gitlab_ci -H git checkout 5-0-stable\r\n\r\n# set-up gitlab\r\nsudo -u gitlab_ci -H cp config/application.yml.example config/application.yml\r\nsudo -u gitlab_ci -H vim config/application.yml # configure the application\r\nsudo -u gitlab_ci -H cp config/unicorn.rb.example config/unicorn.rb\r\nsudo -u gitlab_ci -H vim config/unicorn.rb # configure the server\r\n\r\n# Create socket and pid directories\r\nsudo -u gitlab_ci -H mkdir -p tmp/sockets/\r\nsudo chmod -R u+rwX tmp/sockets/ # yes, relative\r\nsudo -u gitlab_ci -H mkdir -p tmp/pids/\r\nsudo chmod -R u+rwX tmp/pids/ # yes, relative\r\n\r\n# install gems\r\nsudo -u gitlab_ci -H bundle install --without development test mysql --deployment # without ... mysql\r\n\r\n# set-up database\r\nsudo -u gitlab_ci -H cp config/database.yml.postgresql config/database.yml\r\nsudo -u gitlab_ci -H bundle exec rake setup RAILS_ENV=production\r\nsudo -u gitlab_ci -H bundle exec whenever -w RAILS_ENV=production\r\n```\r\n\r\n#### Post-installation\r\n\r\nGitLab is now installed! We need some final configurations.\r\n\r\n##### Init.d script\r\n\r\nWe want GitLab CI to start on boot, so we add an init.d script.\r\n\r\n```bash\r\nsudo cp /home/gitlab_ci/gitlab-ci/lib/support/init.d/gitlab_ci /etc/init.d/gitlab_ci\r\nsudo update-rc.d gitlab_ci defaults 21 # start on boot\r\nsudo service gitlab_ci start\r\n```\r\n\r\n##### Nginx\r\n\r\nConfigure nginx (an apache alternative) to host GitLab CI.\r\n\r\n```bash\r\nsudo apt-get install nginx\r\nsudo cp /home/gitlab_ci/gitlab-ci/lib/support/nginx/gitlab_ci /etc/nginx/sites-available/gitlab_ci\r\nsudo vim /etc/nginx/sites-available/gitlab_ci # edit ip & fqdn\r\nsudo ln -s /etc/nginx/sites-available/gitlab_ci /etc/nginx/sites-enabled/gitlab_ci\r\nsudo service nginx start\r\n```\r\n\r\n[1] https://about.gitlab.com/2013/06/20/integrating-gitlab-ci-with-gitlab/\r\n[2] https://gitlab.com/gitlab-org/gitlab-ci/blob/master/doc/install/installation.md','GitLab Continuous Integration','','inherit','open','open','','70-revision-v1','','','2014-10-16 21:25:33','2014-10-16 19:25:33','',70,'http://blog.gingerik.nl/?p=91',0,'revision','',0),(92,1,'2014-10-16 21:34:10','2014-10-16 19:34:10','_The GitLab.com team strongly believes in using feature branches and merge requests in software development. We also think that Test Driven Development (TDD) should be used wherever possible. If you combine these things what follows is that you have to know the testing results of a feature branch before accepting the merge request. GitLab CI was build to offer this functionality and we think most people using GitLab would benefit from using GitLab CI as well._\r\n\r\n> If you are running tests on the CI server you are doing it wrong!\r\n\r\n_Anybody who can push to a branch that is tested on a CI server can easily own that server. So you don\'t want to have projects with different authorization levels being tested on the same CI server._\r\n\r\n_To solve the problem we have split the CI application in two parts, a coordinator and runners. The coordinator enables you to specify how you want to test and stores the results. This is a rack application that communicates with the GitLab API. The runners perform the actual build and they are installed on separate machines. This way you never run tests on the same server that stores all you code._[1]\r\n\r\n## The Coordinator\r\n\r\nThe Coordinator is installed on the **same** server as GitLab itself. There is no need to put this somewhere else.\r\n\r\n### Installation\r\n\r\nMake sure **all** steps are run successfully!\r\n\r\n#### Dependencies\r\n\r\nFirst we install some packages that are required by GitLab CI.\r\n\r\n```bash\r\n# update the system\r\nsudo apt-get update\r\nsudo apt-get upgrade\r\n\r\n# install dependencies\r\nsudo apt-get install wget curl gcc checkinstall libxml2-dev libxslt-dev libcurl4-openssl-dev libreadline6-dev libc6-dev libssl-dev libmysql++-dev make build-essential zlib1g-dev openssh-server git-core libyaml-dev postfix libpq-dev libicu-dev\r\nsudo apt-get install redis-server\r\n\r\n# compile ruby\r\nmkdir /tmp/ruby && cd /tmp/ruby\r\ncurl --progress http://cache.ruby-lang.org/pub/ruby/2.0/ruby-2.0.0-p353.tar.bz2 | tar xj\r\ncd ruby-2.0.0-p353\r\n./configure --disable-install-rdoc\r\nmake\r\nsudo make install\r\n\r\n# install the bundler gem\r\nsudo gem install bundler --no-ri --no-rdoc\r\n\r\n# create a gitlab ci user\r\nsudo adduser --disabled-login --gecos \'GitLab CI\' gitlab_ci\r\n\r\n# install & configure postgresql\r\n#  we do not specify a password because we are using peer authentication\r\nsudo apt-get install -y postgresql-9.1 libpq-dev\r\nsudo -u postgres psql -d template1 -c \"CREATE USER gitlab_ci;\"\r\nsudo -u postgres psql -d template1 -c \"CREATE DATABASE gitlab_ci_production OWNER gitlab_ci;\"\r\nsudo -u gitlab_ci -H psql -d gitlab_ci_production -c \"\\du\" # verify you can connect\r\n```\r\n\r\n#### GitLab CI\r\n\r\nNow we have successfully installed all dependencies, it is time to install GitLab CI itself.\r\n\r\n```bash\r\n# get the gitlab ci source\r\ncd /home/gitlab_ci/\r\nsudo -u gitlab_ci -H git clone https://gitlab.com/gitlab-org/gitlab-ci.git\r\ncd gitlab-ci\r\nsudo -u gitlab_ci -H git checkout 5-0-stable\r\n\r\n# set-up gitlab\r\nsudo -u gitlab_ci -H cp config/application.yml.example config/application.yml\r\nsudo -u gitlab_ci -H vim config/application.yml # configure the application\r\nsudo -u gitlab_ci -H cp config/unicorn.rb.example config/unicorn.rb\r\nsudo -u gitlab_ci -H vim config/unicorn.rb # configure the server\r\n\r\n# Create socket and pid directories\r\nsudo -u gitlab_ci -H mkdir -p tmp/sockets/\r\nsudo chmod -R u+rwX tmp/sockets/ # yes, relative\r\nsudo -u gitlab_ci -H mkdir -p tmp/pids/\r\nsudo chmod -R u+rwX tmp/pids/ # yes, relative\r\n\r\n# install gems\r\nsudo -u gitlab_ci -H bundle install --without development test mysql --deployment # without ... mysql\r\n\r\n# set-up database\r\nsudo -u gitlab_ci -H cp config/database.yml.postgresql config/database.yml\r\nsudo -u gitlab_ci -H bundle exec rake setup RAILS_ENV=production\r\nsudo -u gitlab_ci -H bundle exec whenever -w RAILS_ENV=production\r\n```\r\n\r\n#### Post-installation\r\n\r\nGitLab is now installed! We need some final configurations.\r\n\r\n##### Init.d script\r\n\r\nWe want GitLab CI to start on boot, so we add an init.d script.\r\n\r\n```bash\r\nsudo cp /home/gitlab_ci/gitlab-ci/lib/support/init.d/gitlab_ci /etc/init.d/gitlab_ci\r\nsudo update-rc.d gitlab_ci defaults 21 # start on boot\r\nsudo service gitlab_ci start\r\n```\r\n\r\n##### Nginx\r\n\r\nConfigure nginx (an apache alternative) to host GitLab CI.\r\n\r\n```bash\r\nsudo apt-get install nginx\r\nsudo cp /home/gitlab_ci/gitlab-ci/lib/support/nginx/gitlab_ci /etc/nginx/sites-available/gitlab_ci\r\nsudo vim /etc/nginx/sites-available/gitlab_ci # edit ip & fqdn\r\nsudo ln -s /etc/nginx/sites-available/gitlab_ci /etc/nginx/sites-enabled/gitlab_ci\r\nsudo service nginx start\r\n```\r\n\r\n## Runners\r\n\r\nThe runners perform the actual build and need to be installed on **separate machines**.\r\n\r\n[1] https://about.gitlab.com/2013/06/20/integrating-gitlab-ci-with-gitlab/\r\n[2] https://gitlab.com/gitlab-org/gitlab-ci/blob/master/doc/install/installation.md','GitLab Continuous Integration','','inherit','open','open','','70-revision-v1','','','2014-10-16 21:34:10','2014-10-16 19:34:10','',70,'http://blog.gingerik.nl/?p=92',0,'revision','',0),(93,1,'2014-10-16 21:35:06','2014-10-16 19:35:06','_The GitLab.com team strongly believes in using feature branches and merge requests in software development. We also think that Test Driven Development (TDD) should be used wherever possible. If you combine these things what follows is that you have to know the testing results of a feature branch before accepting the merge request. GitLab CI was build to offer this functionality and we think most people using GitLab would benefit from using GitLab CI as well._\r\n\r\n> If you are running tests on the CI server you are doing it wrong!\r\n\r\n_Anybody who can push to a branch that is tested on a CI server can easily own that server. So you don\'t want to have projects with different authorization levels being tested on the same CI server._\r\n\r\n_To solve the problem we have split the CI application in two parts, a coordinator and runners. The coordinator enables you to specify how you want to test and stores the results. This is a rack application that communicates with the GitLab API. The runners perform the actual build and they are installed on separate machines. This way you never run tests on the same server that stores all you code._[1]\r\n\r\nTime to install GitLab CI[2]!\r\n\r\n## The Coordinator\r\n\r\nThe Coordinator is installed on the **same** server as GitLab itself. There is no need to put this somewhere else.\r\n\r\n### Installation\r\n\r\nMake sure **all** steps are run successfully!\r\n\r\n#### Dependencies\r\n\r\nFirst we install some packages that are required by GitLab CI.\r\n\r\n```bash\r\n# update the system\r\nsudo apt-get update\r\nsudo apt-get upgrade\r\n\r\n# install dependencies\r\nsudo apt-get install wget curl gcc checkinstall libxml2-dev libxslt-dev libcurl4-openssl-dev libreadline6-dev libc6-dev libssl-dev libmysql++-dev make build-essential zlib1g-dev openssh-server git-core libyaml-dev postfix libpq-dev libicu-dev\r\nsudo apt-get install redis-server\r\n\r\n# compile ruby\r\nmkdir /tmp/ruby && cd /tmp/ruby\r\ncurl --progress http://cache.ruby-lang.org/pub/ruby/2.0/ruby-2.0.0-p353.tar.bz2 | tar xj\r\ncd ruby-2.0.0-p353\r\n./configure --disable-install-rdoc\r\nmake\r\nsudo make install\r\n\r\n# install the bundler gem\r\nsudo gem install bundler --no-ri --no-rdoc\r\n\r\n# create a gitlab ci user\r\nsudo adduser --disabled-login --gecos \'GitLab CI\' gitlab_ci\r\n\r\n# install & configure postgresql\r\n#  we do not specify a password because we are using peer authentication\r\nsudo apt-get install -y postgresql-9.1 libpq-dev\r\nsudo -u postgres psql -d template1 -c \"CREATE USER gitlab_ci;\"\r\nsudo -u postgres psql -d template1 -c \"CREATE DATABASE gitlab_ci_production OWNER gitlab_ci;\"\r\nsudo -u gitlab_ci -H psql -d gitlab_ci_production -c \"\\du\" # verify you can connect\r\n```\r\n\r\n#### GitLab CI\r\n\r\nNow we have successfully installed all dependencies, it is time to install GitLab CI itself.\r\n\r\n```bash\r\n# get the gitlab ci source\r\ncd /home/gitlab_ci/\r\nsudo -u gitlab_ci -H git clone https://gitlab.com/gitlab-org/gitlab-ci.git\r\ncd gitlab-ci\r\nsudo -u gitlab_ci -H git checkout 5-0-stable\r\n\r\n# set-up gitlab\r\nsudo -u gitlab_ci -H cp config/application.yml.example config/application.yml\r\nsudo -u gitlab_ci -H vim config/application.yml # configure the application\r\nsudo -u gitlab_ci -H cp config/unicorn.rb.example config/unicorn.rb\r\nsudo -u gitlab_ci -H vim config/unicorn.rb # configure the server\r\n\r\n# Create socket and pid directories\r\nsudo -u gitlab_ci -H mkdir -p tmp/sockets/\r\nsudo chmod -R u+rwX tmp/sockets/ # yes, relative\r\nsudo -u gitlab_ci -H mkdir -p tmp/pids/\r\nsudo chmod -R u+rwX tmp/pids/ # yes, relative\r\n\r\n# install gems\r\nsudo -u gitlab_ci -H bundle install --without development test mysql --deployment # without ... mysql\r\n\r\n# set-up database\r\nsudo -u gitlab_ci -H cp config/database.yml.postgresql config/database.yml\r\nsudo -u gitlab_ci -H bundle exec rake setup RAILS_ENV=production\r\nsudo -u gitlab_ci -H bundle exec whenever -w RAILS_ENV=production\r\n```\r\n\r\n#### Post-installation\r\n\r\nGitLab is now installed! We need some final configurations.\r\n\r\n##### Init.d script\r\n\r\nWe want GitLab CI to start on boot, so we add an init.d script.\r\n\r\n```bash\r\nsudo cp /home/gitlab_ci/gitlab-ci/lib/support/init.d/gitlab_ci /etc/init.d/gitlab_ci\r\nsudo update-rc.d gitlab_ci defaults 21 # start on boot\r\nsudo service gitlab_ci start\r\n```\r\n\r\n##### Nginx\r\n\r\nConfigure nginx (an apache alternative) to host GitLab CI.\r\n\r\n```bash\r\nsudo apt-get install nginx\r\nsudo cp /home/gitlab_ci/gitlab-ci/lib/support/nginx/gitlab_ci /etc/nginx/sites-available/gitlab_ci\r\nsudo vim /etc/nginx/sites-available/gitlab_ci # edit ip & fqdn\r\nsudo ln -s /etc/nginx/sites-available/gitlab_ci /etc/nginx/sites-enabled/gitlab_ci\r\nsudo service nginx start\r\n```\r\n\r\n## Runners\r\n\r\nThe runners perform the actual build and need to be installed on **separate machines**.\r\n\r\n[1] https://about.gitlab.com/2013/06/20/integrating-gitlab-ci-with-gitlab/\r\n[2] https://gitlab.com/gitlab-org/gitlab-ci/blob/master/doc/install/installation.md','GitLab Continuous Integration','','inherit','open','open','','70-revision-v1','','','2014-10-16 21:35:06','2014-10-16 19:35:06','',70,'http://blog.gingerik.nl/?p=93',0,'revision','',0),(94,1,'2014-10-16 21:37:51','2014-10-16 19:37:51','_The GitLab.com team strongly believes in using feature branches and merge requests in software development. We also think that Test Driven Development (TDD) should be used wherever possible. If you combine these things what follows is that you have to know the testing results of a feature branch before accepting the merge request. GitLab CI was build to offer this functionality and we think most people using GitLab would benefit from using GitLab CI as well._\r\n\r\n> If you are running tests on the CI server you are doing it wrong!\r\n\r\n_Anybody who can push to a branch that is tested on a CI server can easily own that server. So you don\'t want to have projects with different authorization levels being tested on the same CI server._\r\n\r\n_To solve the problem we have split the CI application in two parts, a coordinator and runners. The coordinator enables you to specify how you want to test and stores the results. This is a rack application that communicates with the GitLab API. The runners perform the actual build and they are installed on separate machines. This way you never run tests on the same server that stores all you code._[1]\r\n\r\nTime to install GitLab CI[2]!\r\n\r\n## The Coordinator\r\n\r\nThe Coordinator is installed on the **same** server as GitLab itself. There is no need to put this somewhere else.\r\n\r\n### Installation\r\n\r\nMake sure **all** steps are run successfully!\r\n\r\n#### Dependencies\r\n\r\nFirst we install some packages that are required by GitLab CI.\r\n\r\n```bash\r\n# update the system\r\nsudo apt-get update\r\nsudo apt-get upgrade\r\n\r\n# install dependencies\r\nsudo apt-get install wget curl gcc checkinstall libxml2-dev libxslt-dev libcurl4-openssl-dev libreadline6-dev libc6-dev libssl-dev libmysql++-dev make build-essential zlib1g-dev openssh-server git-core libyaml-dev postfix libpq-dev libicu-dev\r\nsudo apt-get install redis-server\r\n\r\n# compile ruby\r\nmkdir /tmp/ruby && cd /tmp/ruby\r\ncurl --progress http://cache.ruby-lang.org/pub/ruby/2.0/ruby-2.0.0-p353.tar.bz2 | tar xj\r\ncd ruby-2.0.0-p353\r\n./configure --disable-install-rdoc\r\nmake\r\nsudo make install\r\n\r\n# install the bundler gem\r\nsudo gem install bundler --no-ri --no-rdoc\r\n\r\n# create a gitlab ci user\r\nsudo adduser --disabled-login --gecos \'GitLab CI\' gitlab_ci\r\n\r\n# install & configure postgresql\r\n#  we do not specify a password because we are using peer authentication\r\nsudo apt-get install -y postgresql-9.1 libpq-dev\r\nsudo -u postgres psql -d template1 -c \"CREATE USER gitlab_ci;\"\r\nsudo -u postgres psql -d template1 -c \"CREATE DATABASE gitlab_ci_production OWNER gitlab_ci;\"\r\nsudo -u gitlab_ci -H psql -d gitlab_ci_production -c \"\\du\" # verify you can connect\r\n```\r\n\r\n#### GitLab CI\r\n\r\nNow we have successfully installed all dependencies, it is time to install GitLab CI itself.\r\n\r\n```bash\r\n# get the gitlab ci source\r\ncd /home/gitlab_ci/\r\nsudo -u gitlab_ci -H git clone https://gitlab.com/gitlab-org/gitlab-ci.git\r\ncd gitlab-ci\r\nsudo -u gitlab_ci -H git checkout 5-0-stable\r\n\r\n# set-up gitlab\r\nsudo -u gitlab_ci -H cp config/application.yml.example config/application.yml\r\nsudo -u gitlab_ci -H vim config/application.yml # configure the application (gitlab_server_urls = GitLab -CI-)\r\nsudo -u gitlab_ci -H cp config/unicorn.rb.example config/unicorn.rb\r\nsudo -u gitlab_ci -H vim config/unicorn.rb # configure the server\r\n\r\n# Create socket and pid directories\r\nsudo -u gitlab_ci -H mkdir -p tmp/sockets/\r\nsudo chmod -R u+rwX tmp/sockets/ # yes, relative\r\nsudo -u gitlab_ci -H mkdir -p tmp/pids/\r\nsudo chmod -R u+rwX tmp/pids/ # yes, relative\r\n\r\n# install gems\r\nsudo -u gitlab_ci -H bundle install --without development test mysql --deployment # without ... mysql\r\n\r\n# set-up database\r\nsudo -u gitlab_ci -H cp config/database.yml.postgresql config/database.yml\r\nsudo -u gitlab_ci -H bundle exec rake setup RAILS_ENV=production\r\nsudo -u gitlab_ci -H bundle exec whenever -w RAILS_ENV=production\r\n```\r\n\r\n#### Post-installation\r\n\r\nGitLab is now installed! We need some final configurations.\r\n\r\n##### Init.d script\r\n\r\nWe want GitLab CI to start on boot, so we add an init.d script.\r\n\r\n```bash\r\nsudo cp /home/gitlab_ci/gitlab-ci/lib/support/init.d/gitlab_ci /etc/init.d/gitlab_ci\r\nsudo update-rc.d gitlab_ci defaults 21 # start on boot\r\nsudo service gitlab_ci start\r\n```\r\n\r\n##### Nginx\r\n\r\nConfigure nginx (an apache alternative) to host GitLab CI.\r\n\r\n```bash\r\nsudo apt-get install nginx\r\nsudo cp /home/gitlab_ci/gitlab-ci/lib/support/nginx/gitlab_ci /etc/nginx/sites-available/gitlab_ci\r\nsudo vim /etc/nginx/sites-available/gitlab_ci # edit ip & fqdn\r\nsudo ln -s /etc/nginx/sites-available/gitlab_ci /etc/nginx/sites-enabled/gitlab_ci\r\nsudo service nginx start\r\n```\r\n\r\n## Runners\r\n\r\nThe runners perform the actual build and need to be installed on **separate machines**.\r\n\r\n[1] https://about.gitlab.com/2013/06/20/integrating-gitlab-ci-with-gitlab/\r\n[2] https://gitlab.com/gitlab-org/gitlab-ci/blob/master/doc/install/installation.md','GitLab Continuous Integration','','inherit','open','open','','70-revision-v1','','','2014-10-16 21:37:51','2014-10-16 19:37:51','',70,'http://blog.gingerik.nl/?p=94',0,'revision','',0),(95,1,'2014-10-16 21:38:27','2014-10-16 19:38:27','_The GitLab.com team strongly believes in using feature branches and merge requests in software development. We also think that Test Driven Development (TDD) should be used wherever possible. If you combine these things what follows is that you have to know the testing results of a feature branch before accepting the merge request. GitLab CI was build to offer this functionality and we think most people using GitLab would benefit from using GitLab CI as well._\r\n\r\n> If you are running tests on the CI server you are doing it wrong!\r\n\r\n_Anybody who can push to a branch that is tested on a CI server can easily own that server. So you don\'t want to have projects with different authorization levels being tested on the same CI server._\r\n\r\n_To solve the problem we have split the CI application in two parts, a coordinator and runners. The coordinator enables you to specify how you want to test and stores the results. This is a rack application that communicates with the GitLab API. The runners perform the actual build and they are installed on separate machines. This way you never run tests on the same server that stores all you code._[1]\r\n\r\nTime to install GitLab CI[2]!\r\n\r\n## The Coordinator\r\n\r\nThe Coordinator is installed on the **same** server as GitLab itself. There is no need to put this somewhere else.\r\n\r\n### Installation\r\n\r\nMake sure **all** steps are run successfully!\r\n\r\n#### Dependencies\r\n\r\nFirst we install some packages that are required by GitLab CI.\r\n\r\n```bash\r\n# update the system\r\nsudo apt-get update\r\nsudo apt-get upgrade\r\n\r\n# install dependencies\r\nsudo apt-get install wget curl gcc checkinstall libxml2-dev libxslt-dev libcurl4-openssl-dev libreadline6-dev libc6-dev libssl-dev libmysql++-dev make build-essential zlib1g-dev openssh-server git-core libyaml-dev postfix libpq-dev libicu-dev\r\nsudo apt-get install redis-server\r\n\r\n# compile ruby\r\nmkdir /tmp/ruby && cd /tmp/ruby\r\ncurl --progress http://cache.ruby-lang.org/pub/ruby/2.0/ruby-2.0.0-p353.tar.bz2 | tar xj\r\ncd ruby-2.0.0-p353\r\n./configure --disable-install-rdoc\r\nmake\r\nsudo make install\r\n\r\n# install the bundler gem\r\nsudo gem install bundler --no-ri --no-rdoc\r\n\r\n# create a gitlab ci user\r\nsudo adduser --disabled-login --gecos \'GitLab CI\' gitlab_ci\r\n\r\n# install & configure postgresql\r\n#  we do not specify a password because we are using peer authentication\r\nsudo apt-get install -y postgresql-9.1 libpq-dev\r\nsudo -u postgres psql -d template1 -c \"CREATE USER gitlab_ci;\"\r\nsudo -u postgres psql -d template1 -c \"CREATE DATABASE gitlab_ci_production OWNER gitlab_ci;\"\r\nsudo -u gitlab_ci -H psql -d gitlab_ci_production -c \"\\du\" # verify you can connect\r\n```\r\n\r\n#### GitLab CI\r\n\r\nNow we have successfully installed all dependencies, it is time to install GitLab CI itself.\r\n\r\n```bash\r\n# get the gitlab ci source\r\ncd /home/gitlab_ci/\r\nsudo -u gitlab_ci -H git clone https://gitlab.com/gitlab-org/gitlab-ci.git\r\ncd gitlab-ci\r\nsudo -u gitlab_ci -H git checkout 5-0-stable\r\n\r\n# set-up gitlab\r\nsudo -u gitlab_ci -H cp config/application.yml.example config/application.yml\r\nsudo -u gitlab_ci -H vim config/application.yml # configure the application (gitlab_server_urls = GitLab [not CI])\r\nsudo -u gitlab_ci -H cp config/unicorn.rb.example config/unicorn.rb\r\nsudo -u gitlab_ci -H vim config/unicorn.rb # configure the server\r\n\r\n# Create socket and pid directories\r\nsudo -u gitlab_ci -H mkdir -p tmp/sockets/\r\nsudo chmod -R u+rwX tmp/sockets/ # yes, relative\r\nsudo -u gitlab_ci -H mkdir -p tmp/pids/\r\nsudo chmod -R u+rwX tmp/pids/ # yes, relative\r\n\r\n# install gems\r\nsudo -u gitlab_ci -H bundle install --without development test mysql --deployment # without ... mysql\r\n\r\n# set-up database\r\nsudo -u gitlab_ci -H cp config/database.yml.postgresql config/database.yml\r\nsudo -u gitlab_ci -H bundle exec rake setup RAILS_ENV=production\r\nsudo -u gitlab_ci -H bundle exec whenever -w RAILS_ENV=production\r\n```\r\n\r\n#### Post-installation\r\n\r\nGitLab is now installed! We need some final configurations.\r\n\r\n##### Init.d script\r\n\r\nWe want GitLab CI to start on boot, so we add an init.d script.\r\n\r\n```bash\r\nsudo cp /home/gitlab_ci/gitlab-ci/lib/support/init.d/gitlab_ci /etc/init.d/gitlab_ci\r\nsudo update-rc.d gitlab_ci defaults 21 # start on boot\r\nsudo service gitlab_ci start\r\n```\r\n\r\n##### Nginx\r\n\r\nConfigure nginx (an apache alternative) to host GitLab CI.\r\n\r\n```bash\r\nsudo apt-get install nginx\r\nsudo cp /home/gitlab_ci/gitlab-ci/lib/support/nginx/gitlab_ci /etc/nginx/sites-available/gitlab_ci\r\nsudo vim /etc/nginx/sites-available/gitlab_ci # edit ip & fqdn\r\nsudo ln -s /etc/nginx/sites-available/gitlab_ci /etc/nginx/sites-enabled/gitlab_ci\r\nsudo service nginx start\r\n```\r\n\r\n## Runners\r\n\r\nThe runners perform the actual build and need to be installed on **separate machines**.\r\n\r\n[1] https://about.gitlab.com/2013/06/20/integrating-gitlab-ci-with-gitlab/\r\n[2] https://gitlab.com/gitlab-org/gitlab-ci/blob/master/doc/install/installation.md','GitLab Continuous Integration','','inherit','open','open','','70-revision-v1','','','2014-10-16 21:38:27','2014-10-16 19:38:27','',70,'http://blog.gingerik.nl/?p=95',0,'revision','',0),(96,1,'2014-10-16 21:38:58','2014-10-16 19:38:58','_The GitLab.com team strongly believes in using feature branches and merge requests in software development. We also think that Test Driven Development (TDD) should be used wherever possible. If you combine these things what follows is that you have to know the testing results of a feature branch before accepting the merge request. GitLab CI was build to offer this functionality and we think most people using GitLab would benefit from using GitLab CI as well._\r\n\r\n> If you are running tests on the CI server you are doing it wrong!\r\n\r\n_Anybody who can push to a branch that is tested on a CI server can easily own that server. So you don\'t want to have projects with different authorization levels being tested on the same CI server._\r\n\r\n_To solve the problem we have split the CI application in two parts, a coordinator and runners. The coordinator enables you to specify how you want to test and stores the results. This is a rack application that communicates with the GitLab API. The runners perform the actual build and they are installed on separate machines. This way you never run tests on the same server that stores all you code._[1]\r\n\r\nTime to install GitLab CI[2]!\r\n\r\n## The Coordinator\r\n\r\nThe Coordinator is installed on the **same** server as GitLab itself. There is no need to put this somewhere else.\r\n\r\n### Installation\r\n\r\nMake sure **all** steps are run successfully!\r\n\r\n#### Dependencies\r\n\r\nFirst we install some packages that are required by GitLab CI.\r\n\r\n```bash\r\n# update the system\r\nsudo apt-get update\r\nsudo apt-get upgrade\r\n\r\n# install dependencies\r\nsudo apt-get install wget curl gcc checkinstall libxml2-dev libxslt-dev libcurl4-openssl-dev libreadline6-dev libc6-dev libssl-dev libmysql++-dev make build-essential zlib1g-dev openssh-server git-core libyaml-dev postfix libpq-dev libicu-dev\r\nsudo apt-get install redis-server\r\n\r\n# compile ruby\r\nmkdir /tmp/ruby && cd /tmp/ruby\r\ncurl --progress http://cache.ruby-lang.org/pub/ruby/2.0/ruby-2.0.0-p353.tar.bz2 | tar xj\r\ncd ruby-2.0.0-p353\r\n./configure --disable-install-rdoc\r\nmake\r\nsudo make install\r\n\r\n# install the bundler gem\r\nsudo gem install bundler --no-ri --no-rdoc\r\n\r\n# create a gitlab ci user\r\nsudo adduser --disabled-login --gecos \'GitLab CI\' gitlab_ci\r\n\r\n# install & configure postgresql\r\n#  we do not specify a password because we are using peer authentication\r\nsudo apt-get install -y postgresql-9.1 libpq-dev\r\nsudo -u postgres psql -d template1 -c \"CREATE USER gitlab_ci;\"\r\nsudo -u postgres psql -d template1 -c \"CREATE DATABASE gitlab_ci_production OWNER gitlab_ci;\"\r\nsudo -u gitlab_ci -H psql -d gitlab_ci_production -c \"\\du\" # verify you can connect\r\n```\r\n\r\n#### GitLab CI\r\n\r\nNow we have successfully installed all dependencies, it is time to install GitLab CI itself.\r\n\r\n```bash\r\n# get the gitlab ci source\r\ncd /home/gitlab_ci/\r\nsudo -u gitlab_ci -H git clone https://gitlab.com/gitlab-org/gitlab-ci.git\r\ncd gitlab-ci\r\nsudo -u gitlab_ci -H git checkout 5-0-stable\r\n\r\n# set-up gitlab\r\nsudo -u gitlab_ci -H cp config/application.yml.example config/application.yml\r\nsudo -u gitlab_ci -H vim config/application.yml\r\n    # configure the application (gitlab_server_urls = GitLab [not CI])\r\nsudo -u gitlab_ci -H cp config/unicorn.rb.example config/unicorn.rb\r\nsudo -u gitlab_ci -H vim config/unicorn.rb # configure the server\r\n\r\n# Create socket and pid directories\r\nsudo -u gitlab_ci -H mkdir -p tmp/sockets/\r\nsudo chmod -R u+rwX tmp/sockets/ # yes, relative\r\nsudo -u gitlab_ci -H mkdir -p tmp/pids/\r\nsudo chmod -R u+rwX tmp/pids/ # yes, relative\r\n\r\n# install gems\r\nsudo -u gitlab_ci -H bundle install --without development test mysql --deployment # without ... mysql\r\n\r\n# set-up database\r\nsudo -u gitlab_ci -H cp config/database.yml.postgresql config/database.yml\r\nsudo -u gitlab_ci -H bundle exec rake setup RAILS_ENV=production\r\nsudo -u gitlab_ci -H bundle exec whenever -w RAILS_ENV=production\r\n```\r\n\r\n#### Post-installation\r\n\r\nGitLab is now installed! We need some final configurations.\r\n\r\n##### Init.d script\r\n\r\nWe want GitLab CI to start on boot, so we add an init.d script.\r\n\r\n```bash\r\nsudo cp /home/gitlab_ci/gitlab-ci/lib/support/init.d/gitlab_ci /etc/init.d/gitlab_ci\r\nsudo update-rc.d gitlab_ci defaults 21 # start on boot\r\nsudo service gitlab_ci start\r\n```\r\n\r\n##### Nginx\r\n\r\nConfigure nginx (an apache alternative) to host GitLab CI.\r\n\r\n```bash\r\nsudo apt-get install nginx\r\nsudo cp /home/gitlab_ci/gitlab-ci/lib/support/nginx/gitlab_ci /etc/nginx/sites-available/gitlab_ci\r\nsudo vim /etc/nginx/sites-available/gitlab_ci # edit ip & fqdn\r\nsudo ln -s /etc/nginx/sites-available/gitlab_ci /etc/nginx/sites-enabled/gitlab_ci\r\nsudo service nginx start\r\n```\r\n\r\n## Runners\r\n\r\nThe runners perform the actual build and need to be installed on **separate machines**.\r\n\r\n[1] https://about.gitlab.com/2013/06/20/integrating-gitlab-ci-with-gitlab/\r\n[2] https://gitlab.com/gitlab-org/gitlab-ci/blob/master/doc/install/installation.md','GitLab Continuous Integration','','inherit','open','open','','70-revision-v1','','','2014-10-16 21:38:58','2014-10-16 19:38:58','',70,'http://blog.gingerik.nl/?p=96',0,'revision','',0),(97,1,'2014-10-16 21:39:20','2014-10-16 19:39:20','_The GitLab.com team strongly believes in using feature branches and merge requests in software development. We also think that Test Driven Development (TDD) should be used wherever possible. If you combine these things what follows is that you have to know the testing results of a feature branch before accepting the merge request. GitLab CI was build to offer this functionality and we think most people using GitLab would benefit from using GitLab CI as well._\r\n\r\n> If you are running tests on the CI server you are doing it wrong!\r\n\r\n_Anybody who can push to a branch that is tested on a CI server can easily own that server. So you don\'t want to have projects with different authorization levels being tested on the same CI server._\r\n\r\n_To solve the problem we have split the CI application in two parts, a coordinator and runners. The coordinator enables you to specify how you want to test and stores the results. This is a rack application that communicates with the GitLab API. The runners perform the actual build and they are installed on separate machines. This way you never run tests on the same server that stores all you code._[1]\r\n\r\nTime to install GitLab CI[2]!\r\n\r\n## The Coordinator\r\n\r\nThe Coordinator is installed on the **same** server as GitLab itself. There is no need to put this somewhere else.\r\n\r\n### Installation\r\n\r\nMake sure **all** steps are run successfully!\r\n\r\n#### Dependencies\r\n\r\nFirst we install some packages that are required by GitLab CI.\r\n\r\n```bash\r\n# update the system\r\nsudo apt-get update\r\nsudo apt-get upgrade\r\n\r\n# install dependencies\r\nsudo apt-get install wget curl gcc checkinstall libxml2-dev libxslt-dev libcurl4-openssl-dev libreadline6-dev libc6-dev libssl-dev libmysql++-dev make build-essential zlib1g-dev openssh-server git-core libyaml-dev postfix libpq-dev libicu-dev\r\nsudo apt-get install redis-server\r\n\r\n# compile ruby\r\nmkdir /tmp/ruby && cd /tmp/ruby\r\ncurl --progress http://cache.ruby-lang.org/pub/ruby/2.0/ruby-2.0.0-p353.tar.bz2 | tar xj\r\ncd ruby-2.0.0-p353\r\n./configure --disable-install-rdoc\r\nmake\r\nsudo make install\r\n\r\n# install the bundler gem\r\nsudo gem install bundler --no-ri --no-rdoc\r\n\r\n# create a gitlab ci user\r\nsudo adduser --disabled-login --gecos \'GitLab CI\' gitlab_ci\r\n\r\n# install & configure postgresql\r\n#  we do not specify a password because we are using peer authentication\r\nsudo apt-get install -y postgresql-9.1 libpq-dev\r\nsudo -u postgres psql -d template1 -c \"CREATE USER gitlab_ci;\"\r\nsudo -u postgres psql -d template1 -c \"CREATE DATABASE gitlab_ci_production OWNER gitlab_ci;\"\r\nsudo -u gitlab_ci -H psql -d gitlab_ci_production -c \"\\du\" # verify you can connect\r\n```\r\n\r\n#### GitLab CI\r\n\r\nNow we have successfully installed all dependencies, it is time to install GitLab CI itself.\r\n\r\n```bash\r\n# get the gitlab ci source\r\ncd /home/gitlab_ci/\r\nsudo -u gitlab_ci -H git clone https://gitlab.com/gitlab-org/gitlab-ci.git\r\ncd gitlab-ci\r\nsudo -u gitlab_ci -H git checkout 5-0-stable\r\n\r\n# set-up gitlab\r\nsudo -u gitlab_ci -H cp config/application.yml.example config/application.yml\r\nsudo -u gitlab_ci -H vim config/application.yml # configure the application (gitlab_server_urls = GitLab [not CI])\r\nsudo -u gitlab_ci -H cp config/unicorn.rb.example config/unicorn.rb\r\nsudo -u gitlab_ci -H vim config/unicorn.rb # configure the server\r\n\r\n# Create socket and pid directories\r\nsudo -u gitlab_ci -H mkdir -p tmp/sockets/\r\nsudo chmod -R u+rwX tmp/sockets/ # yes, relative\r\nsudo -u gitlab_ci -H mkdir -p tmp/pids/\r\nsudo chmod -R u+rwX tmp/pids/ # yes, relative\r\n\r\n# install gems\r\nsudo -u gitlab_ci -H bundle install --without development test mysql --deployment # without ... mysql\r\n\r\n# set-up database\r\nsudo -u gitlab_ci -H cp config/database.yml.postgresql config/database.yml\r\nsudo -u gitlab_ci -H bundle exec rake setup RAILS_ENV=production\r\nsudo -u gitlab_ci -H bundle exec whenever -w RAILS_ENV=production\r\n```\r\n\r\n#### Post-installation\r\n\r\nGitLab is now installed! We need some final configurations.\r\n\r\n##### Init.d script\r\n\r\nWe want GitLab CI to start on boot, so we add an init.d script.\r\n\r\n```bash\r\nsudo cp /home/gitlab_ci/gitlab-ci/lib/support/init.d/gitlab_ci /etc/init.d/gitlab_ci\r\nsudo update-rc.d gitlab_ci defaults 21 # start on boot\r\nsudo service gitlab_ci start\r\n```\r\n\r\n##### Nginx\r\n\r\nConfigure nginx (an apache alternative) to host GitLab CI.\r\n\r\n```bash\r\nsudo apt-get install nginx\r\nsudo cp /home/gitlab_ci/gitlab-ci/lib/support/nginx/gitlab_ci /etc/nginx/sites-available/gitlab_ci\r\nsudo vim /etc/nginx/sites-available/gitlab_ci # edit ip & fqdn\r\nsudo ln -s /etc/nginx/sites-available/gitlab_ci /etc/nginx/sites-enabled/gitlab_ci\r\nsudo service nginx start\r\n```\r\n\r\n## Runners\r\n\r\nThe runners perform the actual build and need to be installed on **separate machines**.\r\n\r\n[1] https://about.gitlab.com/2013/06/20/integrating-gitlab-ci-with-gitlab/\r\n[2] https://gitlab.com/gitlab-org/gitlab-ci/blob/master/doc/install/installation.md','GitLab Continuous Integration','','inherit','open','open','','70-revision-v1','','','2014-10-16 21:39:20','2014-10-16 19:39:20','',70,'http://blog.gingerik.nl/?p=97',0,'revision','',0),(98,1,'2014-10-16 21:40:41','2014-10-16 19:40:41','_The GitLab.com team strongly believes in using feature branches and merge requests in software development. We also think that Test Driven Development (TDD) should be used wherever possible. If you combine these things what follows is that you have to know the testing results of a feature branch before accepting the merge request. GitLab CI was build to offer this functionality and we think most people using GitLab would benefit from using GitLab CI as well._\r\n\r\n> If you are running tests on the CI server you are doing it wrong!\r\n\r\n_Anybody who can push to a branch that is tested on a CI server can easily own that server. So you don\'t want to have projects with different authorization levels being tested on the same CI server._\r\n\r\n_To solve the problem we have split the CI application in two parts, a coordinator and runners. The coordinator enables you to specify how you want to test and stores the results. This is a rack application that communicates with the GitLab API. The runners perform the actual build and they are installed on separate machines. This way you never run tests on the same server that stores all you code._[1]\r\n\r\nTime to install GitLab CI[2]!\r\n\r\n## The Coordinator\r\n\r\nThe Coordinator is installed on the **same** server as GitLab itself. There is no need to put this somewhere else.\r\n\r\n### Installation\r\n\r\nMake sure **all** steps are run successfully!\r\n\r\n#### Dependencies\r\n\r\nFirst we install some packages that are required by GitLab CI.\r\n\r\n```bash\r\n# update the system\r\nsudo apt-get update\r\nsudo apt-get upgrade\r\n\r\n# install dependencies\r\nsudo apt-get install wget curl gcc checkinstall libxml2-dev libxslt-dev libcurl4-openssl-dev libreadline6-dev libc6-dev libssl-dev libmysql++-dev make build-essential zlib1g-dev openssh-server git-core libyaml-dev postfix libpq-dev libicu-dev\r\nsudo apt-get install redis-server\r\n\r\n# compile ruby\r\nmkdir /tmp/ruby && cd /tmp/ruby\r\ncurl --progress http://cache.ruby-lang.org/pub/ruby/2.0/ruby-2.0.0-p353.tar.bz2 | tar xj\r\ncd ruby-2.0.0-p353\r\n./configure --disable-install-rdoc\r\nmake\r\nsudo make install\r\n\r\n# install the bundler gem\r\nsudo gem install bundler --no-ri --no-rdoc\r\n\r\n# create a gitlab ci user\r\nsudo adduser --disabled-login --gecos \'GitLab CI\' gitlab_ci\r\n\r\n# install & configure postgresql\r\n#  we do not specify a password because we are using peer authentication\r\nsudo apt-get install -y postgresql-9.1 libpq-dev\r\nsudo -u postgres psql -d template1 -c \"CREATE USER gitlab_ci;\"\r\nsudo -u postgres psql -d template1 -c \"CREATE DATABASE gitlab_ci_production OWNER gitlab_ci;\"\r\nsudo -u gitlab_ci -H psql -d gitlab_ci_production -c \"\\du\" # verify you can connect\r\n```\r\n\r\n#### GitLab CI\r\n\r\nNow we have successfully installed all dependencies, it is time to install GitLab CI itself.\r\n\r\n```bash\r\n# get the gitlab ci source\r\ncd /home/gitlab_ci/\r\nsudo -u gitlab_ci -H git clone https://gitlab.com/gitlab-org/gitlab-ci.git\r\ncd gitlab-ci\r\nsudo -u gitlab_ci -H git checkout 5-0-stable\r\n\r\n# set-up gitlab\r\nsudo -u gitlab_ci -H cp config/application.yml.example config/application.yml\r\nsudo -u gitlab_ci -H vim config/application.yml # configure the application (gitlab_server_urls = GitLab [not CI])\r\nsudo -u gitlab_ci -H cp config/unicorn.rb.example config/unicorn.rb\r\nsudo -u gitlab_ci -H vim config/unicorn.rb # configure the server\r\n\r\n# Create socket and pid directories\r\nsudo -u gitlab_ci -H mkdir -p tmp/sockets/\r\nsudo chmod -R u+rwX tmp/sockets/ # yes, relative\r\nsudo -u gitlab_ci -H mkdir -p tmp/pids/\r\nsudo chmod -R u+rwX tmp/pids/ # yes, relative\r\n\r\n# install gems\r\nsudo -u gitlab_ci -H bundle install --without development test mysql --deployment # without ... mysql\r\n\r\n# set-up database\r\nsudo -u gitlab_ci -H cp config/database.yml.postgresql config/database.yml\r\nsudo -u gitlab_ci -H bundle exec rake setup RAILS_ENV=production\r\nsudo -u gitlab_ci -H bundle exec whenever -w RAILS_ENV=production\r\n```\r\n\r\n#### Post-installation\r\n\r\nGitLab is now installed! We need some final configurations.\r\n\r\n##### Init.d script\r\n\r\nWe want GitLab CI to start on boot, so we add an init.d script.\r\n\r\n```bash\r\nsudo cp /home/gitlab_ci/gitlab-ci/lib/support/init.d/gitlab_ci /etc/init.d/gitlab_ci\r\nsudo update-rc.d gitlab_ci defaults 21 # start on boot\r\nsudo service gitlab_ci start\r\n```\r\n\r\n##### Nginx\r\n\r\nConfigure nginx (an apache alternative) to host GitLab CI.\r\n\r\n```bash\r\nsudo apt-get install nginx\r\nsudo cp /home/gitlab_ci/gitlab-ci/lib/support/nginx/gitlab_ci /etc/nginx/sites-available/gitlab_ci\r\nsudo vim /etc/nginx/sites-available/gitlab_ci # edit ip & fqdn\r\nsudo ln -s /etc/nginx/sites-available/gitlab_ci /etc/nginx/sites-enabled/gitlab_ci\r\nsudo service nginx start\r\n```\r\n\r\n## Runners\r\n\r\nThe runners perform the actual build and need to be installed on **separate machines**, e.g. on a virtual machine.\r\nTime to install[3].\r\n\r\n\r\n\r\n[1] https://about.gitlab.com/2013/06/20/integrating-gitlab-ci-with-gitlab/\r\n[2] https://gitlab.com/gitlab-org/gitlab-ci/blob/master/doc/install/installation.md\r\n[3] https://gitlab.com/gitlab-org/gitlab-ci-runner/blob/master/README.md','GitLab Continuous Integration','','inherit','open','open','','70-revision-v1','','','2014-10-16 21:40:41','2014-10-16 19:40:41','',70,'http://blog.gingerik.nl/?p=98',0,'revision','',0),(99,1,'2014-10-16 21:44:19','2014-10-16 19:44:19','_The GitLab.com team strongly believes in using feature branches and merge requests in software development. We also think that Test Driven Development (TDD) should be used wherever possible. If you combine these things what follows is that you have to know the testing results of a feature branch before accepting the merge request. GitLab CI was build to offer this functionality and we think most people using GitLab would benefit from using GitLab CI as well._\r\n\r\n> If you are running tests on the CI server you are doing it wrong!\r\n\r\n_Anybody who can push to a branch that is tested on a CI server can easily own that server. So you don\'t want to have projects with different authorization levels being tested on the same CI server._\r\n\r\n_To solve the problem we have split the CI application in two parts, a coordinator and runners. The coordinator enables you to specify how you want to test and stores the results. This is a rack application that communicates with the GitLab API. The runners perform the actual build and they are installed on separate machines. This way you never run tests on the same server that stores all you code._[1]\r\n\r\nTime to install GitLab CI[2]!\r\n\r\n## The Coordinator\r\n\r\nThe Coordinator is installed on the **same** server as GitLab itself. There is no need to put this somewhere else.\r\n\r\n### Installation\r\n\r\nMake sure **all** steps are run successfully!\r\n\r\n#### Dependencies\r\n\r\nFirst we install some packages that are required by GitLab CI.\r\n\r\n```bash\r\n# update the system\r\nsudo apt-get update\r\nsudo apt-get upgrade\r\n\r\n# install dependencies\r\nsudo apt-get install wget curl gcc checkinstall libxml2-dev libxslt-dev libcurl4-openssl-dev libreadline6-dev libc6-dev libssl-dev libmysql++-dev make build-essential zlib1g-dev openssh-server git-core libyaml-dev postfix libpq-dev libicu-dev\r\nsudo apt-get install redis-server\r\n\r\n# compile ruby\r\nmkdir /tmp/ruby && cd /tmp/ruby\r\ncurl --progress http://cache.ruby-lang.org/pub/ruby/2.0/ruby-2.0.0-p353.tar.bz2 | tar xj\r\ncd ruby-2.0.0-p353\r\n./configure --disable-install-rdoc\r\nmake\r\nsudo make install\r\n\r\n# install the bundler gem\r\nsudo gem install bundler --no-ri --no-rdoc\r\n\r\n# create a gitlab ci user\r\nsudo adduser --disabled-login --gecos \'GitLab CI\' gitlab_ci\r\n\r\n# install & configure postgresql\r\n#  we do not specify a password because we are using peer authentication\r\nsudo apt-get install -y postgresql-9.1 libpq-dev\r\nsudo -u postgres psql -d template1 -c \"CREATE USER gitlab_ci;\"\r\nsudo -u postgres psql -d template1 -c \"CREATE DATABASE gitlab_ci_production OWNER gitlab_ci;\"\r\nsudo -u gitlab_ci -H psql -d gitlab_ci_production -c \"\\du\" # verify you can connect\r\n```\r\n\r\n#### GitLab CI\r\n\r\nNow we have successfully installed all dependencies, it is time to install GitLab CI itself.\r\n\r\n```bash\r\n# get the gitlab ci source\r\ncd /home/gitlab_ci/\r\nsudo -u gitlab_ci -H git clone https://gitlab.com/gitlab-org/gitlab-ci.git\r\ncd gitlab-ci\r\nsudo -u gitlab_ci -H git checkout 5-0-stable\r\n\r\n# set-up gitlab\r\nsudo -u gitlab_ci -H cp config/application.yml.example config/application.yml\r\nsudo -u gitlab_ci -H vim config/application.yml # configure the application (gitlab_server_urls = GitLab [not CI])\r\nsudo -u gitlab_ci -H cp config/unicorn.rb.example config/unicorn.rb\r\nsudo -u gitlab_ci -H vim config/unicorn.rb # configure the server\r\n\r\n# Create socket and pid directories\r\nsudo -u gitlab_ci -H mkdir -p tmp/sockets/\r\nsudo chmod -R u+rwX tmp/sockets/ # yes, relative\r\nsudo -u gitlab_ci -H mkdir -p tmp/pids/\r\nsudo chmod -R u+rwX tmp/pids/ # yes, relative\r\n\r\n# install gems\r\nsudo -u gitlab_ci -H bundle install --without development test mysql --deployment # without ... mysql\r\n\r\n# set-up database\r\nsudo -u gitlab_ci -H cp config/database.yml.postgresql config/database.yml\r\nsudo -u gitlab_ci -H bundle exec rake setup RAILS_ENV=production\r\nsudo -u gitlab_ci -H bundle exec whenever -w RAILS_ENV=production\r\n```\r\n\r\n#### Post-installation\r\n\r\nGitLab is now installed! We need some final configurations.\r\n\r\n##### Init.d script\r\n\r\nWe want GitLab CI to start on boot, so we add an init.d script.\r\n\r\n```bash\r\nsudo cp /home/gitlab_ci/gitlab-ci/lib/support/init.d/gitlab_ci /etc/init.d/gitlab_ci\r\nsudo update-rc.d gitlab_ci defaults 21 # start on boot\r\nsudo service gitlab_ci start\r\n```\r\n\r\n##### Nginx\r\n\r\nConfigure nginx (an apache alternative) to host GitLab CI.\r\n\r\n```bash\r\nsudo apt-get install nginx\r\nsudo cp /home/gitlab_ci/gitlab-ci/lib/support/nginx/gitlab_ci /etc/nginx/sites-available/gitlab_ci\r\nsudo vim /etc/nginx/sites-available/gitlab_ci # edit ip & fqdn\r\nsudo ln -s /etc/nginx/sites-available/gitlab_ci /etc/nginx/sites-enabled/gitlab_ci\r\nsudo service nginx start\r\n```\r\n\r\n## Runners\r\n\r\nThe runners perform the actual build and need to be installed on **separate machines**, e.g. on a VPS.\r\nTime to install[3].\r\n\r\n### Easily add Runners to existing GitLab CI\r\n\r\nCreating a snapshot enables you to quickly add runners. Have the registration token at hand and:\r\n\r\n* instantiate a new VPS with the snapshot `gitlab-ci-runner-2gb-2gbswap`\r\n* `bundle exec ./bin/setup`\r\n* `sudo service gitlab-ci-runner start`\r\n\r\nNow the runner will start to pick up builds automatically. When you are done with it, you can destroy the VPS without worrying about anything.\r\n\r\n[1] https://about.gitlab.com/2013/06/20/integrating-gitlab-ci-with-gitlab/\r\n[2] https://gitlab.com/gitlab-org/gitlab-ci/blob/master/doc/install/installation.md\r\n[3] https://gitlab.com/gitlab-org/gitlab-ci-runner/blob/master/README.md','GitLab Continuous Integration','','inherit','open','open','','70-revision-v1','','','2014-10-16 21:44:19','2014-10-16 19:44:19','',70,'http://blog.gingerik.nl/?p=99',0,'revision','',0),(100,1,'2014-10-16 21:44:45','2014-10-16 19:44:45','_The GitLab.com team strongly believes in using feature branches and merge requests in software development. We also think that Test Driven Development (TDD) should be used wherever possible. If you combine these things what follows is that you have to know the testing results of a feature branch before accepting the merge request. GitLab CI was build to offer this functionality and we think most people using GitLab would benefit from using GitLab CI as well._\r\n\r\n> If you are running tests on the CI server you are doing it wrong!\r\n\r\n_Anybody who can push to a branch that is tested on a CI server can easily own that server. So you don\'t want to have projects with different authorization levels being tested on the same CI server._\r\n\r\n_To solve the problem we have split the CI application in two parts, a coordinator and runners. The coordinator enables you to specify how you want to test and stores the results. This is a rack application that communicates with the GitLab API. The runners perform the actual build and they are installed on separate machines. This way you never run tests on the same server that stores all you code._[1]\r\n\r\nTime to install GitLab CI[2]!\r\n\r\n## The Coordinator\r\n\r\nThe Coordinator is installed on the **same** server as GitLab itself. There is no need to put this somewhere else.\r\n\r\n### Installation\r\n\r\nMake sure **all** steps are run successfully!\r\n\r\n#### Dependencies\r\n\r\nFirst we install some packages that are required by GitLab CI.\r\n\r\n```bash\r\n# update the system\r\nsudo apt-get update\r\nsudo apt-get upgrade\r\n\r\n# install dependencies\r\nsudo apt-get install wget curl gcc checkinstall libxml2-dev libxslt-dev libcurl4-openssl-dev libreadline6-dev libc6-dev libssl-dev libmysql++-dev make build-essential zlib1g-dev openssh-server git-core libyaml-dev postfix libpq-dev libicu-dev\r\nsudo apt-get install redis-server\r\n\r\n# compile ruby\r\nmkdir /tmp/ruby && cd /tmp/ruby\r\ncurl --progress http://cache.ruby-lang.org/pub/ruby/2.0/ruby-2.0.0-p353.tar.bz2 | tar xj\r\ncd ruby-2.0.0-p353\r\n./configure --disable-install-rdoc\r\nmake\r\nsudo make install\r\n\r\n# install the bundler gem\r\nsudo gem install bundler --no-ri --no-rdoc\r\n\r\n# create a gitlab ci user\r\nsudo adduser --disabled-login --gecos \'GitLab CI\' gitlab_ci\r\n\r\n# install & configure postgresql\r\n#  we do not specify a password because we are using peer authentication\r\nsudo apt-get install -y postgresql-9.1 libpq-dev\r\nsudo -u postgres psql -d template1 -c \"CREATE USER gitlab_ci;\"\r\nsudo -u postgres psql -d template1 -c \"CREATE DATABASE gitlab_ci_production OWNER gitlab_ci;\"\r\nsudo -u gitlab_ci -H psql -d gitlab_ci_production -c \"\\du\" # verify you can connect\r\n```\r\n\r\n#### GitLab CI\r\n\r\nNow we have successfully installed all dependencies, it is time to install GitLab CI itself.\r\n\r\n```bash\r\n# get the gitlab ci source\r\ncd /home/gitlab_ci/\r\nsudo -u gitlab_ci -H git clone https://gitlab.com/gitlab-org/gitlab-ci.git\r\ncd gitlab-ci\r\nsudo -u gitlab_ci -H git checkout 5-0-stable\r\n\r\n# set-up gitlab\r\nsudo -u gitlab_ci -H cp config/application.yml.example config/application.yml\r\nsudo -u gitlab_ci -H vim config/application.yml # configure the application (gitlab_server_urls = GitLab [not CI])\r\nsudo -u gitlab_ci -H cp config/unicorn.rb.example config/unicorn.rb\r\nsudo -u gitlab_ci -H vim config/unicorn.rb # configure the server\r\n\r\n# Create socket and pid directories\r\nsudo -u gitlab_ci -H mkdir -p tmp/sockets/\r\nsudo chmod -R u+rwX tmp/sockets/ # yes, relative\r\nsudo -u gitlab_ci -H mkdir -p tmp/pids/\r\nsudo chmod -R u+rwX tmp/pids/ # yes, relative\r\n\r\n# install gems\r\nsudo -u gitlab_ci -H bundle install --without development test mysql --deployment # without ... mysql\r\n\r\n# set-up database\r\nsudo -u gitlab_ci -H cp config/database.yml.postgresql config/database.yml\r\nsudo -u gitlab_ci -H bundle exec rake setup RAILS_ENV=production\r\nsudo -u gitlab_ci -H bundle exec whenever -w RAILS_ENV=production\r\n```\r\n\r\n#### Post-installation\r\n\r\nGitLab is now installed! We need some final configurations.\r\n\r\n##### Init.d script\r\n\r\nWe want GitLab CI to start on boot, so we add an init.d script.\r\n\r\n```bash\r\nsudo cp /home/gitlab_ci/gitlab-ci/lib/support/init.d/gitlab_ci /etc/init.d/gitlab_ci\r\nsudo update-rc.d gitlab_ci defaults 21 # start on boot\r\nsudo service gitlab_ci start\r\n```\r\n\r\n##### Nginx\r\n\r\nConfigure nginx (an apache alternative) to host GitLab CI.\r\n\r\n```bash\r\nsudo apt-get install nginx\r\nsudo cp /home/gitlab_ci/gitlab-ci/lib/support/nginx/gitlab_ci /etc/nginx/sites-available/gitlab_ci\r\nsudo vim /etc/nginx/sites-available/gitlab_ci # edit ip & fqdn\r\nsudo ln -s /etc/nginx/sites-available/gitlab_ci /etc/nginx/sites-enabled/gitlab_ci\r\nsudo service nginx start\r\n```\r\n\r\n## Runners\r\n\r\nThe runners perform the actual build and need to be installed on **separate machines**, e.g. on a VPS.\r\nTime to install[3].\r\n\r\n### Easily add Runners\r\n\r\nCreating a snapshot enables you to quickly add runners. Have the registration token at hand and:\r\n\r\n* instantiate a new VPS with the snapshot `gitlab-ci-runner-2gb-2gbswap`\r\n* `bundle exec ./bin/setup`\r\n* `sudo service gitlab-ci-runner start`\r\n\r\nNow the runner will start to pick up builds automatically. When you are done with it, you can destroy the VPS without worrying about anything.\r\n\r\n[1] https://about.gitlab.com/2013/06/20/integrating-gitlab-ci-with-gitlab/\r\n[2] https://gitlab.com/gitlab-org/gitlab-ci/blob/master/doc/install/installation.md\r\n[3] https://gitlab.com/gitlab-org/gitlab-ci-runner/blob/master/README.md','GitLab Continuous Integration','','inherit','open','open','','70-revision-v1','','','2014-10-16 21:44:45','2014-10-16 19:44:45','',70,'http://blog.gingerik.nl/?p=100',0,'revision','',0),(101,1,'2014-10-16 21:53:45','2014-10-16 19:53:45','_The GitLab.com team strongly believes in using feature branches and merge requests in software development. We also think that Test Driven Development (TDD) should be used wherever possible. If you combine these things what follows is that you have to know the testing results of a feature branch before accepting the merge request. GitLab CI was build to offer this functionality and we think most people using GitLab would benefit from using GitLab CI as well._\r\n\r\n> If you are running tests on the CI server you are doing it wrong!\r\n\r\n_Anybody who can push to a branch that is tested on a CI server can easily own that server. So you don\'t want to have projects with different authorization levels being tested on the same CI server._\r\n\r\n_To solve the problem we have split the CI application in two parts, a coordinator and runners. The coordinator enables you to specify how you want to test and stores the results. This is a rack application that communicates with the GitLab API. The runners perform the actual build and they are installed on separate machines. This way you never run tests on the same server that stores all you code._[1]\r\n\r\nTime to install GitLab CI[2]!\r\n\r\n## The Coordinator\r\n\r\nThe Coordinator is installed on the **same** server as GitLab itself. There is no need to put this somewhere else.\r\n\r\n### Installation\r\n\r\nMake sure **all** steps are run successfully!\r\n\r\n#### Dependencies\r\n\r\nFirst we install some packages that are required by GitLab CI.\r\n\r\n```bash\r\n# update the system\r\nsudo apt-get update\r\nsudo apt-get upgrade\r\n\r\n# install dependencies\r\nsudo apt-get install wget curl gcc checkinstall libxml2-dev libxslt-dev libcurl4-openssl-dev libreadline6-dev libc6-dev libssl-dev libmysql++-dev make build-essential zlib1g-dev openssh-server git-core libyaml-dev postfix libpq-dev libicu-dev\r\nsudo apt-get install redis-server\r\n\r\n# install ruby from source\r\nmkdir /tmp/ruby && cd /tmp/ruby\r\ncurl --progress http://cache.ruby-lang.org/pub/ruby/2.0/ruby-2.0.0-p353.tar.bz2 | tar xj\r\ncd ruby-2.0.0-p353\r\n./configure --disable-install-rdoc\r\nmake\r\nsudo make install\r\n\r\n# install the bundler gem\r\nsudo gem install bundler --no-ri --no-rdoc\r\n\r\n# create a gitlab ci user\r\nsudo adduser --disabled-login --gecos \'GitLab CI\' gitlab_ci\r\n\r\n# install & configure postgresql\r\n#  we do not specify a password because we are using peer authentication\r\nsudo apt-get install -y postgresql-9.1 libpq-dev\r\nsudo -u postgres psql -d template1 -c \"CREATE USER gitlab_ci;\"\r\nsudo -u postgres psql -d template1 -c \"CREATE DATABASE gitlab_ci_production OWNER gitlab_ci;\"\r\nsudo -u gitlab_ci -H psql -d gitlab_ci_production -c \"\\du\" # verify you can connect\r\n```\r\n\r\n#### GitLab CI\r\n\r\nNow we have successfully installed all dependencies, it is time to install GitLab CI itself.\r\n\r\n```bash\r\n# get the gitlab ci source\r\ncd /home/gitlab_ci/\r\nsudo -u gitlab_ci -H git clone https://gitlab.com/gitlab-org/gitlab-ci.git\r\ncd gitlab-ci\r\nsudo -u gitlab_ci -H git checkout 5-0-stable\r\n\r\n# set-up gitlab\r\nsudo -u gitlab_ci -H cp config/application.yml.example config/application.yml\r\nsudo -u gitlab_ci -H vim config/application.yml # configure the application (gitlab_server_urls = GitLab [not CI])\r\nsudo -u gitlab_ci -H cp config/unicorn.rb.example config/unicorn.rb\r\nsudo -u gitlab_ci -H vim config/unicorn.rb # configure the server\r\n\r\n# create socket and pid directories\r\nsudo -u gitlab_ci -H mkdir -p tmp/sockets/\r\nsudo chmod -R u+rwX tmp/sockets/ # yes, relative\r\nsudo -u gitlab_ci -H mkdir -p tmp/pids/\r\nsudo chmod -R u+rwX tmp/pids/ # yes, relative\r\n\r\n# install gems\r\nsudo -u gitlab_ci -H bundle install --without development test mysql --deployment # without ... mysql\r\n\r\n# set-up database\r\nsudo -u gitlab_ci -H cp config/database.yml.postgresql config/database.yml\r\nsudo -u gitlab_ci -H bundle exec rake setup RAILS_ENV=production\r\nsudo -u gitlab_ci -H bundle exec whenever -w RAILS_ENV=production\r\n```\r\n\r\n#### Post-installation\r\n\r\nGitLab is now installed! We need some final configurations.\r\n\r\n##### Init.d script\r\n\r\nWe want GitLab CI to start on boot, so we add an init.d script.\r\n\r\n```bash\r\nsudo cp /home/gitlab_ci/gitlab-ci/lib/support/init.d/gitlab_ci /etc/init.d/gitlab_ci\r\nsudo update-rc.d gitlab_ci defaults 21 # start on boot\r\nsudo service gitlab_ci start\r\n```\r\n\r\n##### Nginx\r\n\r\nConfigure nginx (an apache alternative) to host GitLab CI.\r\n\r\n```bash\r\nsudo apt-get install nginx\r\nsudo cp /home/gitlab_ci/gitlab-ci/lib/support/nginx/gitlab_ci /etc/nginx/sites-available/gitlab_ci\r\nsudo vim /etc/nginx/sites-available/gitlab_ci # edit ip & fqdn\r\nsudo ln -s /etc/nginx/sites-available/gitlab_ci /etc/nginx/sites-enabled/gitlab_ci\r\nsudo service nginx start\r\n```\r\n\r\n## Runners\r\n\r\nThe runners perform the actual build and need to be installed on **separate machines**, e.g. on a VPS.\r\nTime to install[3].\r\n\r\n### Installation\r\n\r\n#### Dependencies\r\n\r\n```bash\r\n# update system\r\nsudo apt-get update\r\nsudo apt-get upgrade\r\n\r\n# install dependencies\r\nsudo apt-get install -y wget curl gcc libxml2-dev libxslt-dev libcurl4-openssl-dev libreadline6-dev libc6-dev libssl-dev make build-essential zlib1g-dev openssh-server git-core libyaml-dev postfix libpq-dev libicu-dev\r\n\r\n# install ruby from source\r\nmkdir /tmp/ruby && cd /tmp/ruby\r\ncurl --progress ftp://ftp.ruby-lang.org/pub/ruby/2.0/ruby-2.0.0-p353.tar.gz | tar xz\r\ncd ruby-2.0.0-p353\r\n./configure --disable-install-rdoc\r\nmake\r\nsudo make install\r\n\r\n# install the bundler gem\r\nsudo gem install bundler\r\n\r\n# create a gitlab ci runner user\r\nsudo adduser --disabled-login --gecos \'GitLab CI Runner\' gitlab_ci_runner\r\n```\r\n\r\n#### GitLab CI Runner\r\n\r\n```bash\r\n# get the gitlab ci runner source\r\ncd /home/gitlab_ci_runner/\r\nsudo -u gitlab_ci_runner -H git clone https://gitlab.com/gitlab-org/gitlab-ci-runner.git\r\ncd gitlab-ci-runner\r\n\r\n# install gems\r\nsudo -u gitlab_ci_runner -H bundle install --deployment\r\n\r\n# set-up the bundle interactively\r\nsudo -u gitlab_ci_runner -H bundle exec ./bin/setup\r\n```\r\n\r\n### Easily add Runners\r\n\r\nCreating a snapshot enables you to quickly add runners. Have the registration token at hand and:\r\n\r\n* instantiate a new VPS with the snapshot `gitlab-ci-runner-2gb-2gbswap`\r\n* `bundle exec ./bin/setup`\r\n* `sudo service gitlab-ci-runner start`\r\n\r\nNow the runner will start to pick up builds automatically. When you are done with it, you can destroy the VPS without worrying about anything.\r\n\r\n[1] https://about.gitlab.com/2013/06/20/integrating-gitlab-ci-with-gitlab/\r\n[2] https://gitlab.com/gitlab-org/gitlab-ci/blob/master/doc/install/installation.md\r\n[3] https://gitlab.com/gitlab-org/gitlab-ci-runner/blob/master/README.md','GitLab Continuous Integration','','inherit','open','open','','70-revision-v1','','','2014-10-16 21:53:45','2014-10-16 19:53:45','',70,'http://blog.gingerik.nl/?p=101',0,'revision','',0),(102,1,'2014-10-16 21:57:45','2014-10-16 19:57:45','_The GitLab.com team strongly believes in using feature branches and merge requests in software development. We also think that Test Driven Development (TDD) should be used wherever possible. If you combine these things what follows is that you have to know the testing results of a feature branch before accepting the merge request. GitLab CI was build to offer this functionality and we think most people using GitLab would benefit from using GitLab CI as well._\r\n\r\n> If you are running tests on the CI server you are doing it wrong!\r\n\r\n_Anybody who can push to a branch that is tested on a CI server can easily own that server. So you don\'t want to have projects with different authorization levels being tested on the same CI server._\r\n\r\n_To solve the problem we have split the CI application in two parts, a coordinator and runners. The coordinator enables you to specify how you want to test and stores the results. This is a rack application that communicates with the GitLab API. The runners perform the actual build and they are installed on separate machines. This way you never run tests on the same server that stores all you code._[1]\r\n\r\nTime to install GitLab CI[2]!\r\n\r\n## The Coordinator\r\n\r\nThe Coordinator is installed on the **same** server as GitLab itself. There is no need to put this somewhere else.\r\n\r\n### Installation\r\n\r\nMake sure **all** steps are run successfully!\r\n\r\n#### Dependencies\r\n\r\nFirst we install some packages that are required by GitLab CI.\r\n\r\n```bash\r\n# update the system\r\nsudo apt-get update\r\nsudo apt-get upgrade\r\n\r\n# install dependencies\r\nsudo apt-get install wget curl gcc checkinstall libxml2-dev libxslt-dev libcurl4-openssl-dev libreadline6-dev libc6-dev libssl-dev libmysql++-dev make build-essential zlib1g-dev openssh-server git-core libyaml-dev postfix libpq-dev libicu-dev\r\nsudo apt-get install redis-server\r\n\r\n# install ruby from source\r\nmkdir /tmp/ruby && cd /tmp/ruby\r\ncurl --progress http://cache.ruby-lang.org/pub/ruby/2.0/ruby-2.0.0-p353.tar.bz2 | tar xj\r\ncd ruby-2.0.0-p353\r\n./configure --disable-install-rdoc\r\nmake\r\nsudo make install\r\n\r\n# install the bundler gem\r\nsudo gem install bundler --no-ri --no-rdoc\r\n\r\n# create a gitlab ci user\r\nsudo adduser --disabled-login --gecos \'GitLab CI\' gitlab_ci\r\n\r\n# install & configure postgresql\r\n#  we do not specify a password because we are using peer authentication\r\nsudo apt-get install -y postgresql-9.1 libpq-dev\r\nsudo -u postgres psql -d template1 -c \"CREATE USER gitlab_ci;\"\r\nsudo -u postgres psql -d template1 -c \"CREATE DATABASE gitlab_ci_production OWNER gitlab_ci;\"\r\nsudo -u gitlab_ci -H psql -d gitlab_ci_production -c \"\\du\" # verify you can connect\r\n```\r\n\r\n#### GitLab CI\r\n\r\nNow we have successfully installed all dependencies, it is time to install GitLab CI itself.\r\n\r\n```bash\r\n# get the gitlab ci source\r\ncd /home/gitlab_ci/\r\nsudo -u gitlab_ci -H git clone https://gitlab.com/gitlab-org/gitlab-ci.git\r\ncd gitlab-ci\r\nsudo -u gitlab_ci -H git checkout 5-0-stable\r\n\r\n# set-up gitlab\r\nsudo -u gitlab_ci -H cp config/application.yml.example config/application.yml\r\nsudo -u gitlab_ci -H vim config/application.yml # configure the application (gitlab_server_urls = GitLab [not CI])\r\nsudo -u gitlab_ci -H cp config/unicorn.rb.example config/unicorn.rb\r\nsudo -u gitlab_ci -H vim config/unicorn.rb # configure the server\r\n\r\n# create socket and pid directories\r\nsudo -u gitlab_ci -H mkdir -p tmp/sockets/\r\nsudo chmod -R u+rwX tmp/sockets/ # yes, relative\r\nsudo -u gitlab_ci -H mkdir -p tmp/pids/\r\nsudo chmod -R u+rwX tmp/pids/ # yes, relative\r\n\r\n# install gems\r\nsudo -u gitlab_ci -H bundle install --without development test mysql --deployment # without ... mysql\r\n\r\n# set-up database\r\nsudo -u gitlab_ci -H cp config/database.yml.postgresql config/database.yml\r\nsudo -u gitlab_ci -H bundle exec rake setup RAILS_ENV=production\r\nsudo -u gitlab_ci -H bundle exec whenever -w RAILS_ENV=production\r\n```\r\n\r\n#### Post-installation\r\n\r\nGitLab is now installed! We need some final configurations.\r\n\r\n##### Init.d script\r\n\r\nWe want GitLab CI to start on boot, so we add an init.d script.\r\n\r\n```bash\r\nsudo cp /home/gitlab_ci/gitlab-ci/lib/support/init.d/gitlab_ci /etc/init.d/gitlab_ci\r\nsudo update-rc.d gitlab_ci defaults 21 # start on boot\r\nsudo service gitlab_ci start\r\n```\r\n\r\n##### Nginx\r\n\r\nConfigure nginx (an apache alternative) to host GitLab CI.\r\n\r\n```bash\r\nsudo apt-get install nginx\r\nsudo cp /home/gitlab_ci/gitlab-ci/lib/support/nginx/gitlab_ci /etc/nginx/sites-available/gitlab_ci\r\nsudo vim /etc/nginx/sites-available/gitlab_ci # edit ip & fqdn\r\nsudo ln -s /etc/nginx/sites-available/gitlab_ci /etc/nginx/sites-enabled/gitlab_ci\r\nsudo service nginx start\r\n```\r\n\r\n## Runners\r\n\r\nThe runners perform the actual build and need to be installed on **separate machines**, e.g. on a VPS.\r\nTime to install[3].\r\n\r\n### Installation\r\n\r\n#### Dependencies\r\n\r\n```bash\r\n# update system\r\nsudo apt-get update\r\nsudo apt-get upgrade\r\n\r\n# install dependencies\r\nsudo apt-get install -y wget curl gcc libxml2-dev libxslt-dev libcurl4-openssl-dev libreadline6-dev libc6-dev libssl-dev make build-essential zlib1g-dev openssh-server git-core libyaml-dev postfix libpq-dev libicu-dev\r\n\r\n# install ruby from source\r\nmkdir /tmp/ruby && cd /tmp/ruby\r\ncurl --progress ftp://ftp.ruby-lang.org/pub/ruby/2.0/ruby-2.0.0-p353.tar.gz | tar xz\r\ncd ruby-2.0.0-p353\r\n./configure --disable-install-rdoc\r\nmake\r\nsudo make install\r\n\r\n# install the bundler gem\r\nsudo gem install bundler\r\n\r\n# create a gitlab ci runner user\r\nsudo adduser --disabled-login --gecos \'GitLab CI Runner\' gitlab_ci_runner\r\n```\r\n\r\n#### GitLab CI Runner\r\n\r\nThe registration token can be found at: <http://ci-domain/admin/runners>, accessible through _Header_ > _Runners_.\r\n\r\n```bash\r\n# get the gitlab ci runner source\r\ncd /home/gitlab_ci_runner/\r\nsudo -u gitlab_ci_runner -H git clone https://gitlab.com/gitlab-org/gitlab-ci-runner.git\r\ncd gitlab-ci-runner\r\n\r\n# install gems\r\nsudo -u gitlab_ci_runner -H bundle install --deployment\r\n\r\n# set-up the bundle interactively\r\nsudo -u gitlab_ci_runner -H bundle exec ./bin/setup\r\n```\r\n\r\n#### Post-installation\r\n\r\nWe need some final configurations.\r\n\r\n##### Init.d script\r\n\r\nWe want the GitLab CI Runner to start on boot, so we add an init.d script.\r\n\r\n```bash\r\nsudo cp lib/support/init.d/gitlab_ci_runner /etc/init.d/gitlab-ci-runner\r\nsudo chmod +x /etc/init.d/gitlab-ci-runner\r\nsudo update-rc.d gitlab-ci-runner defaults 21 # start on boot\r\nsudo service gitlab-ci-runner start\r\n```\r\n\r\n### Easily add Runners\r\n\r\nCreating a snapshot enables you to quickly add runners. Have the registration token at hand and:\r\n\r\n* instantiate a new VPS with the snapshot `gitlab-ci-runner-2gb-2gbswap`\r\n* `bundle exec ./bin/setup`\r\n* `sudo service gitlab-ci-runner start`\r\n\r\nNow the runner will start to pick up builds automatically. When you are done with it, you can destroy the VPS without worrying about anything.\r\n\r\n[1] https://about.gitlab.com/2013/06/20/integrating-gitlab-ci-with-gitlab/\r\n[2] https://gitlab.com/gitlab-org/gitlab-ci/blob/master/doc/install/installation.md\r\n[3] https://gitlab.com/gitlab-org/gitlab-ci-runner/blob/master/README.md','GitLab Continuous Integration','','inherit','open','open','','70-revision-v1','','','2014-10-16 21:57:45','2014-10-16 19:57:45','',70,'http://blog.gingerik.nl/?p=102',0,'revision','',0),(103,1,'2014-10-16 21:58:15','2014-10-16 19:58:15','_The GitLab.com team strongly believes in using feature branches and merge requests in software development. We also think that Test Driven Development (TDD) should be used wherever possible. If you combine these things what follows is that you have to know the testing results of a feature branch before accepting the merge request. GitLab CI was build to offer this functionality and we think most people using GitLab would benefit from using GitLab CI as well._\r\n\r\n> If you are running tests on the CI server you are doing it wrong!\r\n\r\n_Anybody who can push to a branch that is tested on a CI server can easily own that server. So you don\'t want to have projects with different authorization levels being tested on the same CI server._\r\n\r\n_To solve the problem we have split the CI application in two parts, a coordinator and runners. The coordinator enables you to specify how you want to test and stores the results. This is a rack application that communicates with the GitLab API. The runners perform the actual build and they are installed on separate machines. This way you never run tests on the same server that stores all you code._[1]\r\n\r\nTime to install GitLab CI[2]!\r\n\r\n## The Coordinator\r\n\r\nThe Coordinator is installed on the **same** server as GitLab itself. There is no need to put this somewhere else.\r\n\r\n### Installation\r\n\r\nMake sure **all** steps are run successfully!\r\n\r\n#### Dependencies\r\n\r\nFirst we install some packages that are required by GitLab CI.\r\n\r\n```bash\r\n# update the system\r\nsudo apt-get update\r\nsudo apt-get upgrade\r\n\r\n# install dependencies\r\nsudo apt-get install wget curl gcc checkinstall libxml2-dev libxslt-dev libcurl4-openssl-dev libreadline6-dev libc6-dev libssl-dev libmysql++-dev make build-essential zlib1g-dev openssh-server git-core libyaml-dev postfix libpq-dev libicu-dev\r\nsudo apt-get install redis-server\r\n\r\n# install ruby from source\r\nmkdir /tmp/ruby && cd /tmp/ruby\r\ncurl --progress http://cache.ruby-lang.org/pub/ruby/2.0/ruby-2.0.0-p353.tar.bz2 | tar xj\r\ncd ruby-2.0.0-p353\r\n./configure --disable-install-rdoc\r\nmake\r\nsudo make install\r\n\r\n# install the bundler gem\r\nsudo gem install bundler --no-ri --no-rdoc\r\n\r\n# create a gitlab ci user\r\nsudo adduser --disabled-login --gecos \'GitLab CI\' gitlab_ci\r\n\r\n# install & configure postgresql\r\n#  we do not specify a password because we are using peer authentication\r\nsudo apt-get install -y postgresql-9.1 libpq-dev\r\nsudo -u postgres psql -d template1 -c \"CREATE USER gitlab_ci;\"\r\nsudo -u postgres psql -d template1 -c \"CREATE DATABASE gitlab_ci_production OWNER gitlab_ci;\"\r\nsudo -u gitlab_ci -H psql -d gitlab_ci_production -c \"\\du\" # verify you can connect\r\n```\r\n\r\n#### GitLab CI\r\n\r\nNow we have successfully installed all dependencies, it is time to install GitLab CI itself.\r\n\r\n```bash\r\n# get the gitlab ci source\r\ncd /home/gitlab_ci/\r\nsudo -u gitlab_ci -H git clone https://gitlab.com/gitlab-org/gitlab-ci.git\r\ncd gitlab-ci\r\nsudo -u gitlab_ci -H git checkout 5-0-stable\r\n\r\n# set-up gitlab\r\nsudo -u gitlab_ci -H cp config/application.yml.example config/application.yml\r\nsudo -u gitlab_ci -H vim config/application.yml # configure the application (gitlab_server_urls = GitLab [not CI])\r\nsudo -u gitlab_ci -H cp config/unicorn.rb.example config/unicorn.rb\r\nsudo -u gitlab_ci -H vim config/unicorn.rb # configure the server\r\n\r\n# create socket and pid directories\r\nsudo -u gitlab_ci -H mkdir -p tmp/sockets/\r\nsudo chmod -R u+rwX tmp/sockets/ # yes, relative\r\nsudo -u gitlab_ci -H mkdir -p tmp/pids/\r\nsudo chmod -R u+rwX tmp/pids/ # yes, relative\r\n\r\n# install gems\r\nsudo -u gitlab_ci -H bundle install --without development test mysql --deployment # without ... mysql\r\n\r\n# set-up database\r\nsudo -u gitlab_ci -H cp config/database.yml.postgresql config/database.yml\r\nsudo -u gitlab_ci -H bundle exec rake setup RAILS_ENV=production\r\nsudo -u gitlab_ci -H bundle exec whenever -w RAILS_ENV=production\r\n```\r\n\r\n#### Post-installation\r\n\r\nGitLab is now installed! We need some final configurations.\r\n\r\n##### Init.d script\r\n\r\nWe want GitLab CI to start on boot, so we add an init.d script.\r\n\r\n```bash\r\nsudo cp /home/gitlab_ci/gitlab-ci/lib/support/init.d/gitlab_ci /etc/init.d/gitlab_ci\r\nsudo update-rc.d gitlab_ci defaults 21 # start on boot\r\nsudo service gitlab_ci start\r\n```\r\n\r\n##### Nginx\r\n\r\nConfigure nginx (an apache alternative) to host GitLab CI.\r\n\r\n```bash\r\nsudo apt-get install nginx\r\nsudo cp /home/gitlab_ci/gitlab-ci/lib/support/nginx/gitlab_ci /etc/nginx/sites-available/gitlab_ci\r\nsudo vim /etc/nginx/sites-available/gitlab_ci # edit ip & fqdn\r\nsudo ln -s /etc/nginx/sites-available/gitlab_ci /etc/nginx/sites-enabled/gitlab_ci\r\nsudo service nginx start\r\n```\r\n\r\n## Runners\r\n\r\nThe runners perform the actual build and need to be installed on **separate machines**, e.g. on a VPS.\r\nTime to install[3].\r\n\r\n### Installation\r\n\r\n#### Dependencies\r\n\r\n```bash\r\n# update system\r\nsudo apt-get update\r\nsudo apt-get upgrade\r\n\r\n# install dependencies\r\nsudo apt-get install -y wget curl gcc libxml2-dev libxslt-dev libcurl4-openssl-dev libreadline6-dev libc6-dev libssl-dev make build-essential zlib1g-dev openssh-server git-core libyaml-dev postfix libpq-dev libicu-dev\r\n\r\n# install ruby from source\r\nmkdir /tmp/ruby && cd /tmp/ruby\r\ncurl --progress ftp://ftp.ruby-lang.org/pub/ruby/2.0/ruby-2.0.0-p353.tar.gz | tar xz\r\ncd ruby-2.0.0-p353\r\n./configure --disable-install-rdoc\r\nmake\r\nsudo make install\r\n\r\n# install the bundler gem\r\nsudo gem install bundler\r\n\r\n# create a gitlab ci runner user\r\nsudo adduser --disabled-login --gecos \'GitLab CI Runner\' gitlab_ci_runner\r\n```\r\n\r\n#### GitLab CI Runner\r\n\r\nThe registration token can be found at: <http://ci-domain/admin/runners>, accessible through _Header_ > _Runners_.\r\n\r\n```bash\r\n# get the gitlab ci runner source\r\ncd /home/gitlab_ci_runner/\r\nsudo -u gitlab_ci_runner -H git clone https://gitlab.com/gitlab-org/gitlab-ci-runner.git\r\ncd gitlab-ci-runner\r\n\r\n# install gems\r\nsudo -u gitlab_ci_runner -H bundle install --deployment\r\n\r\n# set-up the bundle interactively\r\nsudo -u gitlab_ci_runner -H bundle exec ./bin/setup\r\n```\r\n\r\n#### Post-installation\r\n\r\nWe need some final configurations.\r\n\r\n##### Init.d script\r\n\r\nWe want the GitLab CI Runner to start on boot, so we add an init.d script.\r\n\r\n```bash\r\nsudo cp lib/support/init.d/gitlab_ci_runner /etc/init.d/gitlab-ci-runner\r\nsudo chmod +x /etc/init.d/gitlab-ci-runner\r\nsudo update-rc.d gitlab-ci-runner defaults 21 # start on boot\r\nsudo service gitlab-ci-runner start\r\n```\r\n\r\n### Easily add Runners\r\n\r\nCreating a snapshot enables you to quickly add runners. Have the registration token at hand and:\r\n\r\n* instantiate a new VPS with the snapshot `gitlab-ci-runner-2gb-2gbswap`\r\n* `bundle exec ./bin/setup`\r\n* `sudo service gitlab-ci-runner start`\r\n\r\nNow the runner will start to pick up builds automatically. When you are done with it, you can destroy the VPS without worrying about anything.\r\n\r\n## References\r\n\r\n[1] https://about.gitlab.com/2013/06/20/integrating-gitlab-ci-with-gitlab/\r\n[2] https://gitlab.com/gitlab-org/gitlab-ci/blob/master/doc/install/installation.md\r\n[3] https://gitlab.com/gitlab-org/gitlab-ci-runner/blob/master/README.md','GitLab Continuous Integration','','inherit','open','open','','70-revision-v1','','','2014-10-16 21:58:15','2014-10-16 19:58:15','',70,'http://blog.gingerik.nl/?p=103',0,'revision','',0),(104,1,'2014-10-16 22:01:23','2014-10-16 20:01:23','_The GitLab.com team strongly believes in using feature branches and merge requests in software development. We also think that Test Driven Development (TDD) should be used wherever possible. If you combine these things what follows is that you have to know the testing results of a feature branch before accepting the merge request. GitLab CI was build to offer this functionality and we think most people using GitLab would benefit from using GitLab CI as well._\r\n\r\n> If you are running tests on the CI server you are doing it wrong!\r\n\r\n_Anybody who can push to a branch that is tested on a CI server can easily own that server. So you don\'t want to have projects with different authorization levels being tested on the same CI server._\r\n\r\n_To solve the problem we have split the CI application in two parts, a coordinator and runners. The coordinator enables you to specify how you want to test and stores the results. This is a rack application that communicates with the GitLab API. The runners perform the actual build and they are installed on separate machines. This way you never run tests on the same server that stores all you code._[1]\r\n\r\nTime to install GitLab CI[2]!\r\n\r\n## The Coordinator\r\n\r\nThe Coordinator is installed on the **same** server as GitLab itself. There is no need to put this somewhere else.\r\n\r\n### Installation\r\n\r\nMake sure **all** steps are run successfully!\r\n\r\n#### Dependencies\r\n\r\nFirst we install some packages that are required by GitLab CI.\r\n\r\n```bash\r\n# update the system\r\nsudo apt-get update\r\nsudo apt-get upgrade\r\n\r\n# install dependencies\r\nsudo apt-get install wget curl gcc checkinstall libxml2-dev libxslt-dev libcurl4-openssl-dev libreadline6-dev libc6-dev libssl-dev libmysql++-dev make build-essential zlib1g-dev openssh-server git-core libyaml-dev postfix libpq-dev libicu-dev\r\nsudo apt-get install redis-server\r\n\r\n# install ruby from source\r\nmkdir /tmp/ruby && cd /tmp/ruby\r\ncurl --progress http://cache.ruby-lang.org/pub/ruby/2.0/ruby-2.0.0-p353.tar.bz2 | tar xj\r\ncd ruby-2.0.0-p353\r\n./configure --disable-install-rdoc\r\nmake\r\nsudo make install\r\n\r\n# install the bundler gem\r\nsudo gem install bundler --no-ri --no-rdoc\r\n\r\n# create a gitlab ci user\r\nsudo adduser --disabled-login --gecos \'GitLab CI\' gitlab_ci\r\n\r\n# install & configure postgresql\r\n#  we do not specify a password because we are using peer authentication\r\nsudo apt-get install -y postgresql-9.1 libpq-dev\r\nsudo -u postgres psql -d template1 -c \"CREATE USER gitlab_ci;\"\r\nsudo -u postgres psql -d template1 -c \"CREATE DATABASE gitlab_ci_production OWNER gitlab_ci;\"\r\nsudo -u gitlab_ci -H psql -d gitlab_ci_production -c \"\\du\" # verify you can connect\r\n```\r\n\r\n#### GitLab CI\r\n\r\nNow we have successfully installed all dependencies, it is time to install GitLab CI itself.\r\n\r\n```bash\r\n# get the gitlab ci source\r\ncd /home/gitlab_ci/\r\nsudo -u gitlab_ci -H git clone https://gitlab.com/gitlab-org/gitlab-ci.git\r\ncd gitlab-ci\r\nsudo -u gitlab_ci -H git checkout 5-0-stable\r\n\r\n# set-up gitlab\r\nsudo -u gitlab_ci -H cp config/application.yml.example config/application.yml\r\nsudo -u gitlab_ci -H vim config/application.yml # configure the application (gitlab_server_urls = GitLab [not CI])\r\nsudo -u gitlab_ci -H cp config/unicorn.rb.example config/unicorn.rb\r\nsudo -u gitlab_ci -H vim config/unicorn.rb # configure the server\r\n\r\n# create socket and pid directories\r\nsudo -u gitlab_ci -H mkdir -p tmp/sockets/\r\nsudo chmod -R u+rwX tmp/sockets/ # yes, relative\r\nsudo -u gitlab_ci -H mkdir -p tmp/pids/\r\nsudo chmod -R u+rwX tmp/pids/ # yes, relative\r\n\r\n# install gems\r\nsudo -u gitlab_ci -H bundle install --without development test mysql --deployment # without ... mysql\r\n\r\n# set-up database\r\nsudo -u gitlab_ci -H cp config/database.yml.postgresql config/database.yml\r\nsudo -u gitlab_ci -H bundle exec rake setup RAILS_ENV=production\r\nsudo -u gitlab_ci -H bundle exec whenever -w RAILS_ENV=production\r\n```\r\n\r\n#### Post-installation\r\n\r\nGitLab is now installed! We need some final configurations.\r\n\r\n##### Init.d script\r\n\r\nWe want GitLab CI to start on boot, so we add an init.d script.\r\n\r\n```bash\r\nsudo cp /home/gitlab_ci/gitlab-ci/lib/support/init.d/gitlab_ci /etc/init.d/gitlab_ci\r\nsudo update-rc.d gitlab_ci defaults 21 # start on boot\r\nsudo service gitlab_ci start\r\n```\r\n\r\n##### Nginx\r\n\r\nConfigure nginx (an apache alternative) to host GitLab CI.\r\n\r\n```bash\r\nsudo apt-get install nginx\r\nsudo cp /home/gitlab_ci/gitlab-ci/lib/support/nginx/gitlab_ci /etc/nginx/sites-available/gitlab_ci\r\nsudo vim /etc/nginx/sites-available/gitlab_ci # edit ip & fqdn\r\nsudo ln -s /etc/nginx/sites-available/gitlab_ci /etc/nginx/sites-enabled/gitlab_ci\r\nsudo service nginx start\r\n```\r\n\r\n## Runners\r\n\r\nThe runners perform the actual build and need to be installed on **separate machines**, e.g. on a VPS.\r\nTime to install[3].\r\n\r\n### Installation\r\n\r\n#### Dependencies\r\n\r\n```bash\r\n# update system\r\nsudo apt-get update\r\nsudo apt-get upgrade\r\n\r\n# install dependencies\r\nsudo apt-get install -y wget curl gcc libxml2-dev libxslt-dev libcurl4-openssl-dev libreadline6-dev libc6-dev libssl-dev make build-essential zlib1g-dev openssh-server git-core libyaml-dev postfix libpq-dev libicu-dev\r\n\r\n# install ruby from source\r\nmkdir /tmp/ruby && cd /tmp/ruby\r\ncurl --progress ftp://ftp.ruby-lang.org/pub/ruby/2.0/ruby-2.0.0-p353.tar.gz | tar xz\r\ncd ruby-2.0.0-p353\r\n./configure --disable-install-rdoc\r\nmake\r\nsudo make install\r\n\r\n# install the bundler gem\r\nsudo gem install bundler\r\n\r\n# create a gitlab ci runner user\r\nsudo adduser --disabled-login --gecos \'GitLab CI Runner\' gitlab_ci_runner\r\n```\r\n\r\n#### GitLab CI Runner\r\n\r\nThe registration token can be found at: <http://the-gitlab-ci-domain/admin/runners>, accessible through _Header_ > _Runners_.\r\n\r\n```bash\r\n# get the gitlab ci runner source\r\ncd /home/gitlab_ci_runner/\r\nsudo -u gitlab_ci_runner -H git clone https://gitlab.com/gitlab-org/gitlab-ci-runner.git\r\ncd gitlab-ci-runner\r\n\r\n# install gems\r\nsudo -u gitlab_ci_runner -H bundle install --deployment\r\n\r\n# set-up the bundle interactively\r\nsudo -u gitlab_ci_runner -H bundle exec ./bin/setup\r\n```\r\n\r\n#### Post-installation\r\n\r\nWe need some final configurations.\r\n\r\n##### Init.d script\r\n\r\nWe want the GitLab CI Runner to start on boot, so we add an init.d script.\r\n\r\n```bash\r\nsudo cp lib/support/init.d/gitlab_ci_runner /etc/init.d/gitlab-ci-runner\r\nsudo chmod +x /etc/init.d/gitlab-ci-runner\r\nsudo update-rc.d gitlab-ci-runner defaults 21 # start on boot\r\nsudo service gitlab-ci-runner start\r\n```\r\n\r\n### Easily add Runners\r\n\r\nCreating a snapshot enables you to quickly add runners. Have the registration token at hand and:\r\n\r\n* instantiate a new VPS with the snapshot `gitlab-ci-runner-2gb-2gbswap`\r\n* `bundle exec ./bin/setup`\r\n* `sudo service gitlab-ci-runner start`\r\n\r\nNow the runner will start to pick up builds automatically. When you are done with it, you can destroy the VPS without worrying about anything.\r\n\r\n## References\r\n\r\n[1] https://about.gitlab.com/2013/06/20/integrating-gitlab-ci-with-gitlab/\r\n[2] https://gitlab.com/gitlab-org/gitlab-ci/blob/master/doc/install/installation.md\r\n[3] https://gitlab.com/gitlab-org/gitlab-ci-runner/blob/master/README.md','GitLab Continuous Integration','','inherit','open','open','','70-revision-v1','','','2014-10-16 22:01:23','2014-10-16 20:01:23','',70,'http://blog.gingerik.nl/?p=104',0,'revision','',0),(105,1,'2014-10-16 22:02:08','2014-10-16 20:02:08','_The GitLab.com team strongly believes in using feature branches and merge requests in software development. We also think that Test Driven Development (TDD) should be used wherever possible. If you combine these things what follows is that you have to know the testing results of a feature branch before accepting the merge request. GitLab CI was build to offer this functionality and we think most people using GitLab would benefit from using GitLab CI as well._\r\n\r\n> If you are running tests on the CI server you are doing it wrong!\r\n\r\n_Anybody who can push to a branch that is tested on a CI server can easily own that server. So you don\'t want to have projects with different authorization levels being tested on the same CI server._\r\n\r\n_To solve the problem we have split the CI application in two parts, a coordinator and runners. The coordinator enables you to specify how you want to test and stores the results. This is a rack application that communicates with the GitLab API. The runners perform the actual build and they are installed on separate machines. This way you never run tests on the same server that stores all you code._[1]\r\n\r\nTime to install GitLab CI[2]!\r\n\r\n## The Coordinator\r\n\r\nThe Coordinator is installed on the **same** server as GitLab itself. There is no need to put this somewhere else.\r\n\r\n### Installation\r\n\r\nMake sure **all** steps are run successfully!\r\n\r\n#### Dependencies\r\n\r\nFirst we install some packages that are required by GitLab CI.\r\n\r\n```bash\r\n# update the system\r\nsudo apt-get update\r\nsudo apt-get upgrade\r\n\r\n# install dependencies\r\nsudo apt-get install wget curl gcc checkinstall libxml2-dev libxslt-dev libcurl4-openssl-dev libreadline6-dev libc6-dev libssl-dev libmysql++-dev make build-essential zlib1g-dev openssh-server git-core libyaml-dev postfix libpq-dev libicu-dev\r\nsudo apt-get install redis-server\r\n\r\n# install ruby from source\r\nmkdir /tmp/ruby && cd /tmp/ruby\r\ncurl --progress http://cache.ruby-lang.org/pub/ruby/2.0/ruby-2.0.0-p353.tar.bz2 | tar xj\r\ncd ruby-2.0.0-p353\r\n./configure --disable-install-rdoc\r\nmake\r\nsudo make install\r\n\r\n# install the bundler gem\r\nsudo gem install bundler --no-ri --no-rdoc\r\n\r\n# create a gitlab ci user\r\nsudo adduser --disabled-login --gecos \'GitLab CI\' gitlab_ci\r\n\r\n# install & configure postgresql\r\n#  we do not specify a password because we are using peer authentication\r\nsudo apt-get install -y postgresql-9.1 libpq-dev\r\nsudo -u postgres psql -d template1 -c \"CREATE USER gitlab_ci;\"\r\nsudo -u postgres psql -d template1 -c \"CREATE DATABASE gitlab_ci_production OWNER gitlab_ci;\"\r\nsudo -u gitlab_ci -H psql -d gitlab_ci_production -c \"\\du\" # verify you can connect\r\n```\r\n\r\n#### GitLab CI\r\n\r\nNow we have successfully installed all dependencies, it is time to install GitLab CI itself.\r\n\r\n```bash\r\n# get the gitlab ci source\r\ncd /home/gitlab_ci/\r\nsudo -u gitlab_ci -H git clone https://gitlab.com/gitlab-org/gitlab-ci.git\r\ncd gitlab-ci\r\nsudo -u gitlab_ci -H git checkout 5-0-stable\r\n\r\n# set-up gitlab\r\nsudo -u gitlab_ci -H cp config/application.yml.example config/application.yml\r\nsudo -u gitlab_ci -H vim config/application.yml # configure the application (gitlab_server_urls = GitLab [not CI])\r\nsudo -u gitlab_ci -H cp config/unicorn.rb.example config/unicorn.rb\r\nsudo -u gitlab_ci -H vim config/unicorn.rb # configure the server\r\n\r\n# create socket and pid directories\r\nsudo -u gitlab_ci -H mkdir -p tmp/sockets/\r\nsudo chmod -R u+rwX tmp/sockets/ # yes, relative\r\nsudo -u gitlab_ci -H mkdir -p tmp/pids/\r\nsudo chmod -R u+rwX tmp/pids/ # yes, relative\r\n\r\n# install gems\r\nsudo -u gitlab_ci -H bundle install --without development test mysql --deployment # without ... mysql\r\n\r\n# set-up database\r\nsudo -u gitlab_ci -H cp config/database.yml.postgresql config/database.yml\r\nsudo -u gitlab_ci -H bundle exec rake setup RAILS_ENV=production\r\nsudo -u gitlab_ci -H bundle exec whenever -w RAILS_ENV=production\r\n```\r\n\r\n#### Post-installation\r\n\r\nGitLab is now installed! We need some final configurations.\r\n\r\n##### Init.d script\r\n\r\nWe want GitLab CI to start on boot, so we add an init.d script.\r\n\r\n```bash\r\nsudo cp /home/gitlab_ci/gitlab-ci/lib/support/init.d/gitlab_ci /etc/init.d/gitlab_ci\r\nsudo update-rc.d gitlab_ci defaults 21 # start on boot\r\nsudo service gitlab_ci start\r\n```\r\n\r\n##### Nginx\r\n\r\nConfigure nginx (an apache alternative) to host GitLab CI.\r\n\r\n```bash\r\nsudo apt-get install nginx\r\nsudo cp /home/gitlab_ci/gitlab-ci/lib/support/nginx/gitlab_ci /etc/nginx/sites-available/gitlab_ci\r\nsudo vim /etc/nginx/sites-available/gitlab_ci # edit ip & fqdn\r\nsudo ln -s /etc/nginx/sites-available/gitlab_ci /etc/nginx/sites-enabled/gitlab_ci\r\nsudo service nginx start\r\n```\r\n\r\n## Runners\r\n\r\nThe runners perform the actual build and need to be installed on **separate machines**, e.g. on a VPS.\r\nTime to install[3].\r\n\r\n### Installation\r\n\r\n#### Dependencies\r\n\r\n```bash\r\n# update system\r\nsudo apt-get update\r\nsudo apt-get upgrade\r\n\r\n# install dependencies\r\nsudo apt-get install -y wget curl gcc libxml2-dev libxslt-dev libcurl4-openssl-dev libreadline6-dev libc6-dev libssl-dev make build-essential zlib1g-dev openssh-server git-core libyaml-dev postfix libpq-dev libicu-dev\r\n\r\n# install ruby from source\r\nmkdir /tmp/ruby && cd /tmp/ruby\r\ncurl --progress ftp://ftp.ruby-lang.org/pub/ruby/2.0/ruby-2.0.0-p353.tar.gz | tar xz\r\ncd ruby-2.0.0-p353\r\n./configure --disable-install-rdoc\r\nmake\r\nsudo make install\r\n\r\n# install the bundler gem\r\nsudo gem install bundler\r\n\r\n# create a gitlab ci runner user\r\nsudo adduser --disabled-login --gecos \'GitLab CI Runner\' gitlab_ci_runner\r\n```\r\n\r\n#### GitLab CI Runner\r\n\r\nThe registration token can be found at: <http://the-gitlab-ci-domain/admin/runners>, accessible through _Header_ > _Runners_.\r\n\r\n```bash\r\n# get the gitlab ci runner source\r\ncd /home/gitlab_ci_runner/\r\nsudo -u gitlab_ci_runner -H git clone https://gitlab.com/gitlab-org/gitlab-ci-runner.git\r\ncd gitlab-ci-runner\r\n\r\n# install gems\r\nsudo -u gitlab_ci_runner -H bundle install --deployment\r\n\r\n# set-up the bundle interactively\r\nsudo -u gitlab_ci_runner -H bundle exec ./bin/setup\r\n```\r\n\r\n#### Post-installation\r\n\r\nWe need some final configurations.\r\n\r\n##### Init.d script\r\n\r\nWe want the GitLab CI Runner to start on boot, so we add an init.d script.\r\n\r\n```bash\r\nsudo cp lib/support/init.d/gitlab_ci_runner /etc/init.d/gitlab-ci-runner\r\nsudo chmod +x /etc/init.d/gitlab-ci-runner\r\nsudo update-rc.d gitlab-ci-runner defaults 21 # start on boot\r\nsudo service gitlab-ci-runner start\r\n```\r\n\r\n### Easily add Runners\r\n\r\nCreating a snapshot enables you to quickly add runners. Have the registration token at hand and:\r\n\r\n* instantiate a new VPS with the snapshot `gitlab-ci-runner-2gb-2gbswap`\r\n* `bundle exec ./bin/setup`\r\n* `sudo service gitlab-ci-runner start`\r\n\r\nNow the runner will start to pick up builds automatically. When you are done with it, you can destroy the VPS without worrying about anything.\r\n\r\n## References\r\n\r\n[1] <https://about.gitlab.com/2013/06/20/integrating-gitlab-ci-with-gitlab/>\r\n[2] <https://gitlab.com/gitlab-org/gitlab-ci/blob/master/doc/install/installation.md>\r\n[3] <https://gitlab.com/gitlab-org/gitlab-ci-runner/blob/master/README.md>','GitLab Continuous Integration','','inherit','open','open','','70-revision-v1','','','2014-10-16 22:02:08','2014-10-16 20:02:08','',70,'http://blog.gingerik.nl/?p=105',0,'revision','',0),(108,0,'2014-10-21 00:26:38','2014-10-20 22:26:38','','Daily backup - October 20, 2014','','publish','open','open','','daily-backup-october-20-2014','','','2014-10-21 00:26:38','2014-10-20 22:26:38','',0,'http://blog.gingerik.nl/?revisr_commits=daily-backup-october-20-2014',0,'revisr_commits','',0),(109,1,'2014-10-21 09:11:29','2014-10-21 07:11:29','','Backed up the database with Revisr.','','publish','open','open','','backed-up-the-database-with-revisr','','','2014-10-21 09:11:29','2014-10-21 07:11:29','',0,'http://blog.gingerik.nl/?revisr_commits=backed-up-the-database-with-revisr',0,'revisr_commits','',0),(110,1,'2014-10-21 17:39:33','2014-10-21 15:39:33','_The GitLab.com team strongly believes in using feature branches and merge requests in software development. We also think that Test Driven Development (TDD) should be used wherever possible. If you combine these things what follows is that you have to know the testing results of a feature branch before accepting the merge request. GitLab CI was build to offer this functionality and we think most people using GitLab would benefit from using GitLab CI as well._\r\n\r\n> If you are running tests on the CI server you are doing it wrong!\r\n\r\n_Anybody who can push to a branch that is tested on a CI server can easily own that server. So you don\'t want to have projects with different authorization levels being tested on the same CI server._\r\n\r\n_To solve the problem we have split the CI application in two parts, a coordinator and runners. The coordinator enables you to specify how you want to test and stores the results. This is a rack application that communicates with the GitLab API. The runners perform the actual build and they are installed on separate machines. This way you never run tests on the same server that stores all you code._[1]\r\n\r\nTime to install GitLab CI[2]!\r\n\r\n## The Coordinator\r\n\r\nThe Coordinator is installed on the **same** server as GitLab itself. There is no need to put this somewhere else.\r\n\r\n### Installation\r\n\r\nMake sure **all** steps are run successfully!\r\n\r\n#### Dependencies\r\n\r\nFirst we install some packages that are required by GitLab CI.\r\n\r\n```bash\r\n# update the system\r\nsudo apt-get update\r\nsudo apt-get upgrade\r\n\r\n# install dependencies\r\nsudo apt-get install wget curl gcc checkinstall libxml2-dev libxslt-dev libcurl4-openssl-dev libreadline6-dev libc6-dev libssl-dev libmysql++-dev make build-essential zlib1g-dev openssh-server git-core libyaml-dev postfix libpq-dev libicu-dev\r\nsudo apt-get install redis-server\r\n\r\n# install ruby from source\r\nmkdir /tmp/ruby && cd /tmp/ruby\r\ncurl --progress http://cache.ruby-lang.org/pub/ruby/2.0/ruby-2.0.0-p353.tar.bz2 | tar xj\r\ncd ruby-2.0.0-p353\r\n./configure --disable-install-rdoc\r\nmake\r\nsudo make install\r\n\r\n# install the bundler gem\r\nsudo gem install bundler --no-ri --no-rdoc\r\n\r\n# create a gitlab ci user\r\nsudo adduser --disabled-login --gecos \'GitLab CI\' gitlab_ci\r\n\r\n# install & configure postgresql\r\n#   we do not specify a password because we are using peer authentication\r\nsudo apt-get install -y postgresql-9.1 libpq-dev\r\nsudo -u postgres psql -d template1 -c \"CREATE USER gitlab_ci;\"\r\nsudo -u postgres psql -d template1 -c \"CREATE DATABASE gitlab_ci_production OWNER gitlab_ci;\"\r\nsudo -u gitlab_ci -H psql -d gitlab_ci_production -c \"\\du\" # verify you can connect\r\n```\r\n\r\n#### GitLab CI\r\n\r\nNow we have successfully installed all dependencies, it is time to install GitLab CI itself.\r\n\r\n```bash\r\n# get the gitlab ci source\r\ncd /home/gitlab_ci/\r\nsudo -u gitlab_ci -H git clone https://gitlab.com/gitlab-org/gitlab-ci.git\r\ncd gitlab-ci\r\nsudo -u gitlab_ci -H git checkout 5-0-stable\r\n\r\n# set-up gitlab\r\nsudo -u gitlab_ci -H cp config/application.yml.example config/application.yml\r\nsudo -u gitlab_ci -H vim config/application.yml # configure the application (gitlab_server_urls = GitLab [not CI])\r\nsudo -u gitlab_ci -H cp config/unicorn.rb.example config/unicorn.rb\r\nsudo -u gitlab_ci -H vim config/unicorn.rb # configure the server, port -> 8081 (8080 is used by GitLab)\r\n\r\n# create socket and pid directories\r\n# yes, relative paths\r\nsudo -u gitlab_ci -H mkdir -p tmp/sockets/\r\nsudo chmod -R u+rwX tmp/sockets/\r\nsudo -u gitlab_ci -H mkdir -p tmp/pids/\r\nsudo chmod -R u+rwX tmp/pids/\r\n\r\n# install gems\r\nsudo -u gitlab_ci -H bundle install --without development test mysql --deployment # without ... mysql\r\n\r\n# set-up database\r\nsudo -u gitlab_ci -H cp config/database.yml.postgresql config/database.yml\r\nsudo -u gitlab_ci -H bundle exec rake setup RAILS_ENV=production\r\nsudo -u gitlab_ci -H bundle exec whenever -w RAILS_ENV=production\r\n```\r\n\r\n#### Post-installation\r\n\r\nGitLab is now installed! We need some final configurations.\r\n\r\n##### Init.d script\r\n\r\nWe want GitLab CI to start on boot, so we add an init.d script.\r\n\r\n```bash\r\nsudo cp /home/gitlab_ci/gitlab-ci/lib/support/init.d/gitlab_ci /etc/init.d/gitlab_ci\r\nsudo update-rc.d gitlab_ci defaults 21 # start on boot\r\nsudo service gitlab_ci start\r\n```\r\n\r\n##### Nginx\r\n\r\nConfigure nginx (an apache alternative) to host GitLab CI.\r\n\r\n```bash\r\nsudo apt-get install nginx\r\nsudo cp /home/gitlab_ci/gitlab-ci/lib/support/nginx/gitlab_ci /etc/nginx/sites-available/gitlab_ci\r\nsudo vim /etc/nginx/sites-available/gitlab_ci # edit ip & fqdn\r\nsudo ln -s /etc/nginx/sites-available/gitlab_ci /etc/nginx/sites-enabled/gitlab_ci\r\nsudo service nginx start\r\n```\r\n\r\n## Runners\r\n\r\nThe runners perform the actual build and need to be installed on **separate machines**, e.g. on a VPS.\r\nTime to install[3].\r\n\r\n### Installation\r\n\r\n#### Dependencies\r\n\r\n```bash\r\n# update system\r\nsudo apt-get update\r\nsudo apt-get upgrade\r\n\r\n# install dependencies\r\nsudo apt-get install -y wget curl gcc libxml2-dev libxslt-dev libcurl4-openssl-dev libreadline6-dev libc6-dev libssl-dev make build-essential zlib1g-dev openssh-server git-core libyaml-dev postfix libpq-dev libicu-dev\r\n\r\n# install ruby from source\r\nmkdir /tmp/ruby && cd /tmp/ruby\r\ncurl --progress ftp://ftp.ruby-lang.org/pub/ruby/2.0/ruby-2.0.0-p353.tar.gz | tar xz\r\ncd ruby-2.0.0-p353\r\n./configure --disable-install-rdoc\r\nmake\r\nsudo make install\r\n\r\n# install the bundler gem\r\nsudo gem install bundler\r\n\r\n# create a gitlab ci runner user\r\nsudo adduser --disabled-login --gecos \'GitLab CI Runner\' gitlab_ci_runner\r\n```\r\n\r\n#### GitLab CI Runner\r\n\r\nThe registration token can be found at: <http://the-gitlab-ci-domain/admin/runners>, accessible through _Header_ > _Runners_.\r\n\r\n```bash\r\n# get the gitlab ci runner source\r\ncd /home/gitlab_ci_runner/\r\nsudo -u gitlab_ci_runner -H git clone https://gitlab.com/gitlab-org/gitlab-ci-runner.git\r\ncd gitlab-ci-runner\r\n\r\n# install gems\r\nsudo -u gitlab_ci_runner -H bundle install --deployment\r\n\r\n# set-up the bundle interactively\r\nsudo -u gitlab_ci_runner -H bundle exec ./bin/setup\r\n```\r\n\r\n#### Post-installation\r\n\r\nWe need some final configurations.\r\n\r\n##### Init.d script\r\n\r\nWe want the GitLab CI Runner to start on boot, so we add an init.d script.\r\n\r\n```bash\r\nsudo cp lib/support/init.d/gitlab_ci_runner /etc/init.d/gitlab-ci-runner\r\nsudo chmod +x /etc/init.d/gitlab-ci-runner\r\nsudo update-rc.d gitlab-ci-runner defaults 21 # start on boot\r\nsudo service gitlab-ci-runner start\r\n```\r\n\r\n### Easily add Runners\r\n\r\nCreating a snapshot enables you to quickly add runners. Have the registration token at hand and:\r\n\r\n* instantiate a new VPS with the snapshot `gitlab-ci-runner-2gb-2gbswap`\r\n* `bundle exec ./bin/setup`\r\n* `sudo service gitlab-ci-runner start`\r\n\r\nNow the runner will start to pick up builds automatically. When you are done with it, you can destroy the VPS without worrying about anything.\r\n\r\n## References\r\n\r\n[1] <https://about.gitlab.com/2013/06/20/integrating-gitlab-ci-with-gitlab/>\r\n[2] <https://gitlab.com/gitlab-org/gitlab-ci/blob/master/doc/install/installation.md>\r\n[3] <https://gitlab.com/gitlab-org/gitlab-ci-runner/blob/master/README.md>','GitLab Continuous Integration','','inherit','open','open','','70-revision-v1','','','2014-10-21 17:39:33','2014-10-21 15:39:33','',70,'http://blog.gingerik.nl/?p=110',0,'revision','',0),(111,1,'2014-10-21 17:48:14','2014-10-21 15:48:14','_The GitLab.com team strongly believes in using feature branches and merge requests in software development. We also think that Test Driven Development (TDD) should be used wherever possible. If you combine these things what follows is that you have to know the testing results of a feature branch before accepting the merge request. GitLab CI was build to offer this functionality and we think most people using GitLab would benefit from using GitLab CI as well._\r\n\r\n> If you are running tests on the CI server you are doing it wrong!\r\n\r\n_Anybody who can push to a branch that is tested on a CI server can easily own that server. So you don\'t want to have projects with different authorization levels being tested on the same CI server._\r\n\r\n_To solve the problem we have split the CI application in two parts, a coordinator and runners. The coordinator enables you to specify how you want to test and stores the results. This is a rack application that communicates with the GitLab API. The runners perform the actual build and they are installed on separate machines. This way you never run tests on the same server that stores all you code._[1]\r\n\r\nTime to install GitLab CI[2]!\r\n\r\n## The Coordinator\r\n\r\nThe Coordinator is installed on the **same** server as GitLab itself. There is no need to put this somewhere else.\r\n\r\n### Installation\r\n\r\nMake sure **all** steps are run successfully!\r\n\r\n#### Dependencies\r\n\r\nFirst we install some packages that are required by GitLab CI.\r\n\r\n```bash\r\n# update the system\r\nsudo apt-get update\r\nsudo apt-get upgrade\r\n\r\n# install dependencies\r\nsudo apt-get install wget curl gcc checkinstall libxml2-dev libxslt-dev libcurl4-openssl-dev libreadline6-dev libc6-dev libssl-dev libmysql++-dev make build-essential zlib1g-dev openssh-server git-core libyaml-dev postfix libpq-dev libicu-dev\r\nsudo apt-get install redis-server\r\n\r\n# install ruby from source\r\nmkdir /tmp/ruby && cd /tmp/ruby\r\ncurl --progress http://cache.ruby-lang.org/pub/ruby/2.0/ruby-2.0.0-p353.tar.bz2 | tar xj\r\ncd ruby-2.0.0-p353\r\n./configure --disable-install-rdoc\r\nmake\r\nsudo make install\r\n\r\n# install the bundler gem\r\nsudo gem install bundler --no-ri --no-rdoc\r\n\r\n# create a gitlab ci user\r\nsudo adduser --disabled-login --gecos \'GitLab CI\' gitlab_ci\r\n\r\n# install & configure postgresql\r\n#   we do not specify a password because we are using peer authentication\r\nsudo apt-get install -y postgresql-9.1 libpq-dev\r\nsudo -u postgres psql -d template1 -c \"CREATE USER gitlab_ci;\"\r\nsudo -u postgres psql -d template1 -c \"CREATE DATABASE gitlab_ci_production OWNER gitlab_ci;\"\r\nsudo -u gitlab_ci -H psql -d gitlab_ci_production -c \"\\du\" # verify you can connect\r\n```\r\n\r\n#### GitLab CI\r\n\r\nNow we have successfully installed all dependencies, it is time to install GitLab CI itself.\r\n\r\n```bash\r\n# get the gitlab ci source\r\ncd /home/gitlab_ci/\r\nsudo -u gitlab_ci -H git clone https://gitlab.com/gitlab-org/gitlab-ci.git\r\ncd gitlab-ci\r\nsudo -u gitlab_ci -H git checkout 5-0-stable\r\n\r\n# set-up gitlab\r\nsudo -u gitlab_ci -H cp config/application.yml.example config/application.yml\r\nsudo -u gitlab_ci -H vim config/application.yml # configure the application (gitlab_server_urls = GitLab [not CI])\r\nsudo -u gitlab_ci -H cp config/unicorn.rb.example config/unicorn.rb\r\nsudo -u gitlab_ci -H vim config/unicorn.rb # configure the server, port -> 8081 (8080 is used by GitLab)\r\n\r\n# create socket and pid directories\r\n# yes, relative paths\r\nsudo -u gitlab_ci -H mkdir -p tmp/sockets/\r\nsudo chmod -R u+rwX tmp/sockets/\r\nsudo -u gitlab_ci -H mkdir -p tmp/pids/\r\nsudo chmod -R u+rwX tmp/pids/\r\n\r\n# install gems\r\nsudo -u gitlab_ci -H bundle install --without development test mysql --deployment # without ... mysql\r\n\r\n# set-up database\r\nsudo -u gitlab_ci -H cp config/database.yml.postgresql config/database.yml\r\nsudo -u gitlab_ci -H bundle exec rake setup RAILS_ENV=production\r\nsudo -u gitlab_ci -H bundle exec whenever -w RAILS_ENV=production\r\n```\r\n\r\n#### Post-installation\r\n\r\nGitLab is now installed! We need some final configurations.\r\n\r\n##### Init.d script\r\n\r\nWe want GitLab CI to start on boot, so we add an init.d script.\r\n\r\n```bash\r\nsudo cp /home/gitlab_ci/gitlab-ci/lib/support/init.d/gitlab_ci /etc/init.d/gitlab_ci\r\nsudo update-rc.d gitlab_ci defaults 21 # start on boot\r\nsudo service gitlab_ci start\r\n```\r\n\r\n##### Nginx\r\n\r\nConfigure nginx (an Apache alternative) to host GitLab CI.\r\n\r\n```bash\r\nsudo apt-get install nginx\r\nsudo cp /home/gitlab_ci/gitlab-ci/lib/support/nginx/gitlab_ci /etc/nginx/sites-available/gitlab_ci\r\nsudo vim /etc/nginx/sites-available/gitlab_ci # edit ip & fqdn\r\nsudo rm /etc/nginx/sites-enabled/default\r\nsudo ln -s /etc/nginx/sites-available/gitlab_ci /etc/nginx/sites-enabled/gitlab_ci\r\nsudo service nginx start\r\n```\r\n\r\n## Runners\r\n\r\nThe runners perform the actual build and need to be installed on **separate machines**, e.g. on a VPS.\r\nTime to install[3].\r\n\r\n### Installation\r\n\r\n#### Dependencies\r\n\r\n```bash\r\n# update system\r\nsudo apt-get update\r\nsudo apt-get upgrade\r\n\r\n# install dependencies\r\nsudo apt-get install -y wget curl gcc libxml2-dev libxslt-dev libcurl4-openssl-dev libreadline6-dev libc6-dev libssl-dev make build-essential zlib1g-dev openssh-server git-core libyaml-dev postfix libpq-dev libicu-dev\r\n\r\n# install ruby from source\r\nmkdir /tmp/ruby && cd /tmp/ruby\r\ncurl --progress ftp://ftp.ruby-lang.org/pub/ruby/2.0/ruby-2.0.0-p353.tar.gz | tar xz\r\ncd ruby-2.0.0-p353\r\n./configure --disable-install-rdoc\r\nmake\r\nsudo make install\r\n\r\n# install the bundler gem\r\nsudo gem install bundler\r\n\r\n# create a gitlab ci runner user\r\nsudo adduser --disabled-login --gecos \'GitLab CI Runner\' gitlab_ci_runner\r\n```\r\n\r\n#### GitLab CI Runner\r\n\r\nThe registration token can be found at: <http://the-gitlab-ci-domain/admin/runners>, accessible through _Header_ > _Runners_.\r\n\r\n```bash\r\n# get the gitlab ci runner source\r\ncd /home/gitlab_ci_runner/\r\nsudo -u gitlab_ci_runner -H git clone https://gitlab.com/gitlab-org/gitlab-ci-runner.git\r\ncd gitlab-ci-runner\r\n\r\n# install gems\r\nsudo -u gitlab_ci_runner -H bundle install --deployment\r\n\r\n# set-up the bundle interactively\r\nsudo -u gitlab_ci_runner -H bundle exec ./bin/setup\r\n```\r\n\r\n#### Post-installation\r\n\r\nWe need some final configurations.\r\n\r\n##### Init.d script\r\n\r\nWe want the GitLab CI Runner to start on boot, so we add an init.d script.\r\n\r\n```bash\r\nsudo cp lib/support/init.d/gitlab_ci_runner /etc/init.d/gitlab-ci-runner\r\nsudo chmod +x /etc/init.d/gitlab-ci-runner\r\nsudo update-rc.d gitlab-ci-runner defaults 21 # start on boot\r\nsudo service gitlab-ci-runner start\r\n```\r\n\r\n### Easily add Runners\r\n\r\nCreating a snapshot enables you to quickly add runners. Have the registration token at hand and:\r\n\r\n* instantiate a new VPS with the snapshot `gitlab-ci-runner-2gb-2gbswap`\r\n* `bundle exec ./bin/setup`\r\n* `sudo service gitlab-ci-runner start`\r\n\r\nNow the runner will start to pick up builds automatically. When you are done with it, you can destroy the VPS without worrying about anything.\r\n\r\n## References\r\n\r\n[1] <https://about.gitlab.com/2013/06/20/integrating-gitlab-ci-with-gitlab/>\r\n[2] <https://gitlab.com/gitlab-org/gitlab-ci/blob/master/doc/install/installation.md>\r\n[3] <https://gitlab.com/gitlab-org/gitlab-ci-runner/blob/master/README.md>','GitLab Continuous Integration','','inherit','open','open','','70-revision-v1','','','2014-10-21 17:48:14','2014-10-21 15:48:14','',70,'http://blog.gingerik.nl/?p=111',0,'revision','',0),(112,1,'2014-10-21 18:13:30','2014-10-21 16:13:30','_The GitLab.com team strongly believes in using feature branches and merge requests in software development. We also think that Test Driven Development (TDD) should be used wherever possible. If you combine these things what follows is that you have to know the testing results of a feature branch before accepting the merge request. GitLab CI was build to offer this functionality and we think most people using GitLab would benefit from using GitLab CI as well._\r\n\r\n> If you are running tests on the CI server you are doing it wrong!\r\n\r\n_Anybody who can push to a branch that is tested on a CI server can easily own that server. So you don\'t want to have projects with different authorization levels being tested on the same CI server._\r\n\r\n_To solve the problem we have split the CI application in two parts, a coordinator and runners. The coordinator enables you to specify how you want to test and stores the results. This is a rack application that communicates with the GitLab API. The runners perform the actual build and they are installed on separate machines. This way you never run tests on the same server that stores all you code._[1]\r\n\r\nTime to install GitLab CI[2]!\r\n\r\n## The Coordinator\r\n\r\nThe Coordinator is installed on the **same** server as GitLab itself. There is no need to put this somewhere else.\r\n\r\n### Installation\r\n\r\nMake sure **all** steps are run successfully!\r\n\r\n#### Dependencies\r\n\r\nFirst we install some packages that are required by GitLab CI.\r\n\r\n```bash\r\n# update the system\r\nsudo apt-get update\r\nsudo apt-get upgrade\r\n\r\n# install dependencies\r\nsudo apt-get install wget curl gcc checkinstall libxml2-dev libxslt-dev libcurl4-openssl-dev libreadline6-dev libc6-dev libssl-dev libmysql++-dev make build-essential zlib1g-dev openssh-server git-core libyaml-dev postfix libpq-dev libicu-dev\r\nsudo apt-get install redis-server\r\n\r\n# install ruby from source\r\nmkdir /tmp/ruby && cd /tmp/ruby\r\ncurl --progress http://cache.ruby-lang.org/pub/ruby/2.0/ruby-2.0.0-p353.tar.bz2 | tar xj\r\ncd ruby-2.0.0-p353\r\n./configure --disable-install-rdoc\r\nmake\r\nsudo make install\r\n\r\n# install the bundler gem\r\nsudo gem install bundler --no-ri --no-rdoc\r\n\r\n# create a gitlab ci user\r\nsudo adduser --disabled-login --gecos \'GitLab CI\' gitlab_ci\r\n\r\n# install & configure postgresql\r\n#   we do not specify a password because we are using peer authentication\r\nsudo apt-get install -y postgresql-9.1 libpq-dev\r\nsudo -u postgres psql -d template1 -c \"CREATE USER gitlab_ci;\"\r\nsudo -u postgres psql -d template1 -c \"CREATE DATABASE gitlab_ci_production OWNER gitlab_ci;\"\r\nsudo -u gitlab_ci -H psql -d gitlab_ci_production -c \"\\du\" # verify you can connect\r\n```\r\n\r\n#### GitLab CI\r\n\r\nNow we have successfully installed all dependencies, it is time to install GitLab CI itself.\r\n\r\n```bash\r\n# get the gitlab ci source\r\ncd /home/gitlab_ci/\r\nsudo -u gitlab_ci -H git clone https://gitlab.com/gitlab-org/gitlab-ci.git\r\ncd gitlab-ci\r\nsudo -u gitlab_ci -H git checkout 5-0-stable\r\n\r\n# set-up gitlab\r\nsudo -u gitlab_ci -H cp config/application.yml.example config/application.yml\r\nsudo -u gitlab_ci -H vim config/application.yml # configure the application (gitlab_server_urls = GitLab [not CI])\r\nsudo -u gitlab_ci -H cp config/unicorn.rb.example config/unicorn.rb\r\nsudo -u gitlab_ci -H vim config/unicorn.rb # configure the server, port -> 8081 (8080 is used by GitLab)\r\n\r\n# create socket and pid directories\r\n# yes, relative paths\r\nsudo -u gitlab_ci -H mkdir -p tmp/sockets/\r\nsudo chmod -R u+rwX tmp/sockets/\r\nsudo -u gitlab_ci -H mkdir -p tmp/pids/\r\nsudo chmod -R u+rwX tmp/pids/\r\n\r\n# install gems\r\nsudo -u gitlab_ci -H bundle install --without development test mysql --deployment # without ... mysql\r\n\r\n# set-up database\r\nsudo -u gitlab_ci -H cp config/database.yml.postgresql config/database.yml\r\nsudo -u gitlab_ci -H bundle exec rake setup RAILS_ENV=production\r\nsudo -u gitlab_ci -H bundle exec whenever -w RAILS_ENV=production\r\n```\r\n\r\n#### Post-installation\r\n\r\nGitLab is now installed! We need some final configurations.\r\n\r\n##### Init.d script\r\n\r\nWe want GitLab CI to start on boot, so we add an init.d script.\r\n\r\n```bash\r\nsudo cp /home/gitlab_ci/gitlab-ci/lib/support/init.d/gitlab_ci /etc/init.d/gitlab_ci\r\nsudo update-rc.d gitlab_ci defaults 21 # start on boot\r\nsudo service gitlab_ci start\r\n```\r\n\r\n##### Nginx\r\n\r\nConfigure nginx (an Apache alternative) to host GitLab CI.\r\n\r\n```bash\r\nsudo apt-get install nginx\r\nsudo cp /home/gitlab_ci/gitlab-ci/lib/support/nginx/gitlab_ci /etc/nginx/sites-available/gitlab_ci\r\nsudo vim /etc/nginx/sites-available/gitlab_ci # edit port & fqdn\r\nsudo rm /etc/nginx/sites-enabled/default\r\nsudo ln -s /etc/nginx/sites-available/gitlab_ci /etc/nginx/sites-enabled/gitlab_ci\r\nsudo service nginx start\r\n```\r\n\r\n## Runners\r\n\r\nThe runners perform the actual build and need to be installed on **separate machines**, e.g. on a VPS.\r\nTime to install[3].\r\n\r\n### Installation\r\n\r\n#### Dependencies\r\n\r\n```bash\r\n# update system\r\nsudo apt-get update\r\nsudo apt-get upgrade\r\n\r\n# install dependencies\r\nsudo apt-get install -y wget curl gcc libxml2-dev libxslt-dev libcurl4-openssl-dev libreadline6-dev libc6-dev libssl-dev make build-essential zlib1g-dev openssh-server git-core libyaml-dev postfix libpq-dev libicu-dev\r\n\r\n# install ruby from source\r\nmkdir /tmp/ruby && cd /tmp/ruby\r\ncurl --progress ftp://ftp.ruby-lang.org/pub/ruby/2.0/ruby-2.0.0-p353.tar.gz | tar xz\r\ncd ruby-2.0.0-p353\r\n./configure --disable-install-rdoc\r\nmake\r\nsudo make install\r\n\r\n# install the bundler gem\r\nsudo gem install bundler\r\n\r\n# create a gitlab ci runner user\r\nsudo adduser --disabled-login --gecos \'GitLab CI Runner\' gitlab_ci_runner\r\n```\r\n\r\n#### GitLab CI Runner\r\n\r\nThe registration token can be found at: <http://the-gitlab-ci-domain/admin/runners>, accessible through _Header_ > _Runners_.\r\n\r\n```bash\r\n# get the gitlab ci runner source\r\ncd /home/gitlab_ci_runner/\r\nsudo -u gitlab_ci_runner -H git clone https://gitlab.com/gitlab-org/gitlab-ci-runner.git\r\ncd gitlab-ci-runner\r\n\r\n# install gems\r\nsudo -u gitlab_ci_runner -H bundle install --deployment\r\n\r\n# set-up the bundle interactively\r\nsudo -u gitlab_ci_runner -H bundle exec ./bin/setup\r\n```\r\n\r\n#### Post-installation\r\n\r\nWe need some final configurations.\r\n\r\n##### Init.d script\r\n\r\nWe want the GitLab CI Runner to start on boot, so we add an init.d script.\r\n\r\n```bash\r\nsudo cp lib/support/init.d/gitlab_ci_runner /etc/init.d/gitlab-ci-runner\r\nsudo chmod +x /etc/init.d/gitlab-ci-runner\r\nsudo update-rc.d gitlab-ci-runner defaults 21 # start on boot\r\nsudo service gitlab-ci-runner start\r\n```\r\n\r\n### Easily add Runners\r\n\r\nCreating a snapshot enables you to quickly add runners. Have the registration token at hand and:\r\n\r\n* instantiate a new VPS with the snapshot `gitlab-ci-runner-2gb-2gbswap`\r\n* `bundle exec ./bin/setup`\r\n* `sudo service gitlab-ci-runner start`\r\n\r\nNow the runner will start to pick up builds automatically. When you are done with it, you can destroy the VPS without worrying about anything.\r\n\r\n## References\r\n\r\n[1] <https://about.gitlab.com/2013/06/20/integrating-gitlab-ci-with-gitlab/>\r\n[2] <https://gitlab.com/gitlab-org/gitlab-ci/blob/master/doc/install/installation.md>\r\n[3] <https://gitlab.com/gitlab-org/gitlab-ci-runner/blob/master/README.md>','GitLab Continuous Integration','','inherit','open','open','','70-revision-v1','','','2014-10-21 18:13:30','2014-10-21 16:13:30','',70,'http://blog.gingerik.nl/?p=112',0,'revision','',0),(113,0,'2014-10-22 05:48:10','2014-10-22 03:48:10','','Daily backup - October 22, 2014','','publish','open','open','','daily-backup-october-22-2014','','','2014-10-22 05:48:10','2014-10-22 03:48:10','',0,'http://blog.gingerik.nl/?revisr_commits=daily-backup-october-22-2014',0,'revisr_commits','',0),(114,1,'2014-10-22 11:21:26','2014-10-22 09:21:26','_The GitLab.com team strongly believes in using feature branches and merge requests in software development. We also think that Test Driven Development (TDD) should be used wherever possible. If you combine these things what follows is that you have to know the testing results of a feature branch before accepting the merge request. GitLab CI was build to offer this functionality and we think most people using GitLab would benefit from using GitLab CI as well._\r\n\r\n> If you are running tests on the CI server you are doing it wrong!\r\n\r\n_Anybody who can push to a branch that is tested on a CI server can easily own that server. So you don\'t want to have projects with different authorization levels being tested on the same CI server._\r\n\r\n_To solve the problem we have split the CI application in two parts, a coordinator and runners. The coordinator enables you to specify how you want to test and stores the results. This is a rack application that communicates with the GitLab API. The runners perform the actual build and they are installed on separate machines. This way you never run tests on the same server that stores all you code._[1]\r\n\r\nTime to install GitLab CI[2]!\r\n\r\n## The Coordinator\r\n\r\nThe Coordinator is installed on the **same** server as GitLab itself. There is no need to put this somewhere else.\r\n\r\n### Installation\r\n\r\nMake sure **all** steps are run successfully!\r\n\r\n#### Dependencies\r\n\r\nFirst we install some packages that are required by GitLab CI.\r\n\r\n```bash\r\n# update the system\r\nsudo apt-get update\r\nsudo apt-get upgrade\r\n\r\n# install dependencies\r\nsudo apt-get install wget curl gcc checkinstall libxml2-dev libxslt-dev libcurl4-openssl-dev libreadline6-dev libc6-dev libssl-dev libmysql++-dev make build-essential zlib1g-dev openssh-server git-core libyaml-dev postfix libpq-dev libicu-dev\r\nsudo apt-get install redis-server\r\n\r\n# install ruby from source\r\nmkdir /tmp/ruby && cd /tmp/ruby\r\ncurl --progress http://cache.ruby-lang.org/pub/ruby/2.0/ruby-2.0.0-p353.tar.bz2 | tar xj\r\ncd ruby-2.0.0-p353\r\n./configure --disable-install-rdoc\r\nmake\r\nsudo make install\r\n\r\n# install the bundler gem\r\nsudo gem install bundler --no-ri --no-rdoc\r\n\r\n# create a gitlab ci user\r\nsudo adduser --disabled-login --gecos \'GitLab CI\' gitlab_ci\r\n\r\n# install & configure postgresql\r\n#   we do not specify a password because we are using peer authentication\r\nsudo apt-get install -y postgresql-9.1 libpq-dev\r\nsudo -u postgres psql -d template1 -c \"CREATE USER gitlab_ci;\"\r\nsudo -u postgres psql -d template1 -c \"CREATE DATABASE gitlab_ci_production OWNER gitlab_ci;\"\r\nsudo -u gitlab_ci -H psql -d gitlab_ci_production -c \"\\du\" # verify you can connect\r\n```\r\n\r\n#### GitLab CI\r\n\r\nNow we have successfully installed all dependencies, it is time to install GitLab CI itself.\r\n\r\n```bash\r\n# get the gitlab ci source\r\ncd /home/gitlab_ci/\r\nsudo -u gitlab_ci -H git clone https://gitlab.com/gitlab-org/gitlab-ci.git\r\ncd gitlab-ci\r\nsudo -u gitlab_ci -H git checkout 5-0-stable\r\n\r\n# set-up gitlab\r\nsudo -u gitlab_ci -H cp config/application.yml.example config/application.yml\r\nsudo -u gitlab_ci -H vim config/application.yml # configure the application (gitlab_server_urls = GitLab [not CI])\r\nsudo -u gitlab_ci -H cp config/unicorn.rb.example config/unicorn.rb\r\nsudo -u gitlab_ci -H vim config/unicorn.rb # configure the server, port -> 8081 (8080 is used by GitLab)\r\n\r\n# create socket and pid directories\r\n# yes, relative paths\r\nsudo -u gitlab_ci -H mkdir -p tmp/sockets/\r\nsudo chmod -R u+rwX tmp/sockets/\r\nsudo -u gitlab_ci -H mkdir -p tmp/pids/\r\nsudo chmod -R u+rwX tmp/pids/\r\n\r\n# install gems\r\nsudo -u gitlab_ci -H bundle install --without development test mysql --deployment # without ... mysql\r\n\r\n# set-up database\r\nsudo -u gitlab_ci -H cp config/database.yml.postgresql config/database.yml\r\nsudo -u gitlab_ci -H bundle exec rake setup RAILS_ENV=production\r\nsudo -u gitlab_ci -H bundle exec whenever -w RAILS_ENV=production\r\n```\r\n\r\n#### Post-installation\r\n\r\nGitLab is now installed! We need some final configurations.\r\n\r\n##### Init.d script\r\n\r\nWe want GitLab CI to start on boot, so we add an init.d script.\r\n\r\n```bash\r\nsudo cp /home/gitlab_ci/gitlab-ci/lib/support/init.d/gitlab_ci /etc/init.d/gitlab_ci\r\nsudo update-rc.d gitlab_ci defaults 21 # start on boot\r\nsudo service gitlab_ci start\r\n```\r\n\r\n##### Nginx\r\n\r\nConfigure nginx (an Apache alternative) to host GitLab CI.\r\n\r\n```bash\r\nsudo apt-get install nginx\r\nsudo cp /home/gitlab_ci/gitlab-ci/lib/support/nginx/gitlab_ci /etc/nginx/sites-available/gitlab_ci\r\nsudo vim /etc/nginx/sites-available/gitlab_ci # edit port & fqdn\r\nsudo rm /etc/nginx/sites-enabled/default\r\nsudo ln -s /etc/nginx/sites-available/gitlab_ci /etc/nginx/sites-enabled/gitlab_ci\r\nsudo service nginx start\r\n```\r\n\r\n## Runners\r\n\r\nThe runners perform the actual build and need to be installed on **separate machines**, e.g. on a VPS.\r\nTime to install[3].\r\n\r\n### Installation\r\n\r\n#### Dependencies\r\n\r\n```bash\r\n# update system\r\nsudo apt-get update\r\nsudo apt-get upgrade\r\n\r\n# install dependencies\r\nsudo apt-get install -y wget curl gcc libxml2-dev libxslt-dev libcurl4-openssl-dev libreadline6-dev libc6-dev libssl-dev make build-essential zlib1g-dev openssh-server git-core libyaml-dev postfix libpq-dev libicu-dev\r\n\r\n# install ruby from source\r\nmkdir /tmp/ruby && cd /tmp/ruby\r\ncurl --progress ftp://ftp.ruby-lang.org/pub/ruby/2.0/ruby-2.0.0-p353.tar.gz | tar xz\r\ncd ruby-2.0.0-p353\r\n./configure --disable-install-rdoc\r\nmake\r\nsudo make install\r\n\r\n# install the bundler gem\r\nsudo gem install bundler\r\n\r\n# create a gitlab ci runner user\r\nsudo adduser --disabled-login --gecos \'GitLab CI Runner\' gitlab_ci_runner\r\n```\r\n\r\n#### GitLab CI Runner\r\n\r\nThe registration token can be found at: <http://the-gitlab-ci-domain/admin/runners>, accessible through _Header_ > _Runners_.\r\n\r\n```bash\r\n# get the gitlab ci runner source\r\ncd /home/gitlab_ci_runner/\r\nsudo -u gitlab_ci_runner -H git clone https://gitlab.com/gitlab-org/gitlab-ci-runner.git\r\ncd gitlab-ci-runner\r\n\r\n# install gems\r\nsudo -u gitlab_ci_runner -H bundle install --deployment\r\n\r\n# set-up the bundle interactively\r\nsudo -u gitlab_ci_runner -H bundle exec ./bin/setup\r\n```\r\n\r\n#### Post-installation\r\n\r\nWe need some final configurations.\r\n\r\n##### Host\r\n\r\n```bash\r\necho \"127.0.1.1       git-ci.domain.com\" | sudo tee --append /etc/hosts\r\n```\r\n\r\n##### Init.d script\r\n\r\nWe want the GitLab CI Runner to start on boot, so we add an init.d script.\r\n\r\n```bash\r\nsudo cp lib/support/init.d/gitlab_ci_runner /etc/init.d/gitlab-ci-runner\r\nsudo chmod +x /etc/init.d/gitlab-ci-runner\r\nsudo update-rc.d gitlab-ci-runner defaults 21 # start on boot\r\nsudo service gitlab-ci-runner start\r\n```\r\n\r\n### Easily add Runners\r\n\r\nCreating a snapshot enables you to quickly add runners. Have the registration token at hand and:\r\n\r\n* instantiate a new VPS with the snapshot `gitlab-ci-runner-2gb-2gbswap`\r\n* `bundle exec ./bin/setup`\r\n* `sudo service gitlab-ci-runner start`\r\n\r\nNow the runner will start to pick up builds automatically. When you are done with it, you can destroy the VPS without worrying about anything.\r\n\r\n## References\r\n\r\n[1] <https://about.gitlab.com/2013/06/20/integrating-gitlab-ci-with-gitlab/>\r\n[2] <https://gitlab.com/gitlab-org/gitlab-ci/blob/master/doc/install/installation.md>\r\n[3] <https://gitlab.com/gitlab-org/gitlab-ci-runner/blob/master/README.md>','GitLab Continuous Integration','','inherit','open','open','','70-revision-v1','','','2014-10-22 11:21:26','2014-10-22 09:21:26','',70,'http://blog.gingerik.nl/?p=114',0,'revision','',0),(115,1,'2014-10-22 11:22:04','2014-10-22 09:22:04','_The GitLab.com team strongly believes in using feature branches and merge requests in software development. We also think that Test Driven Development (TDD) should be used wherever possible. If you combine these things what follows is that you have to know the testing results of a feature branch before accepting the merge request. GitLab CI was build to offer this functionality and we think most people using GitLab would benefit from using GitLab CI as well._\r\n\r\n> If you are running tests on the CI server you are doing it wrong!\r\n\r\n_Anybody who can push to a branch that is tested on a CI server can easily own that server. So you don\'t want to have projects with different authorization levels being tested on the same CI server._\r\n\r\n_To solve the problem we have split the CI application in two parts, a coordinator and runners. The coordinator enables you to specify how you want to test and stores the results. This is a rack application that communicates with the GitLab API. The runners perform the actual build and they are installed on separate machines. This way you never run tests on the same server that stores all you code._[1]\r\n\r\nTime to install GitLab CI[2]!\r\n\r\n## The Coordinator\r\n\r\nThe Coordinator is installed on the **same** server as GitLab itself. There is no need to put this somewhere else.\r\n\r\n### Installation\r\n\r\nMake sure **all** steps are run successfully!\r\n\r\n#### Dependencies\r\n\r\nFirst we install some packages that are required by GitLab CI.\r\n\r\n```bash\r\n# update the system\r\nsudo apt-get update\r\nsudo apt-get upgrade\r\n\r\n# install dependencies\r\nsudo apt-get install wget curl gcc checkinstall libxml2-dev libxslt-dev libcurl4-openssl-dev libreadline6-dev libc6-dev libssl-dev libmysql++-dev make build-essential zlib1g-dev openssh-server git-core libyaml-dev postfix libpq-dev libicu-dev\r\nsudo apt-get install redis-server\r\n\r\n# install ruby from source\r\nmkdir /tmp/ruby && cd /tmp/ruby\r\ncurl --progress http://cache.ruby-lang.org/pub/ruby/2.0/ruby-2.0.0-p353.tar.bz2 | tar xj\r\ncd ruby-2.0.0-p353\r\n./configure --disable-install-rdoc\r\nmake\r\nsudo make install\r\n\r\n# install the bundler gem\r\nsudo gem install bundler --no-ri --no-rdoc\r\n\r\n# create a gitlab ci user\r\nsudo adduser --disabled-login --gecos \'GitLab CI\' gitlab_ci\r\n\r\n# install & configure postgresql\r\n#   we do not specify a password because we are using peer authentication\r\nsudo apt-get install -y postgresql-9.1 libpq-dev\r\nsudo -u postgres psql -d template1 -c \"CREATE USER gitlab_ci;\"\r\nsudo -u postgres psql -d template1 -c \"CREATE DATABASE gitlab_ci_production OWNER gitlab_ci;\"\r\nsudo -u gitlab_ci -H psql -d gitlab_ci_production -c \"\\du\" # verify you can connect\r\n```\r\n\r\n#### GitLab CI\r\n\r\nNow we have successfully installed all dependencies, it is time to install GitLab CI itself.\r\n\r\n```bash\r\n# get the gitlab ci source\r\ncd /home/gitlab_ci/\r\nsudo -u gitlab_ci -H git clone https://gitlab.com/gitlab-org/gitlab-ci.git\r\ncd gitlab-ci\r\nsudo -u gitlab_ci -H git checkout 5-0-stable\r\n\r\n# set-up gitlab\r\nsudo -u gitlab_ci -H cp config/application.yml.example config/application.yml\r\nsudo -u gitlab_ci -H vim config/application.yml # configure the application (gitlab_server_urls = GitLab [not CI])\r\nsudo -u gitlab_ci -H cp config/unicorn.rb.example config/unicorn.rb\r\nsudo -u gitlab_ci -H vim config/unicorn.rb # configure the server, port -> 8081 (8080 is used by GitLab)\r\n\r\n# create socket and pid directories\r\n# yes, relative paths\r\nsudo -u gitlab_ci -H mkdir -p tmp/sockets/\r\nsudo chmod -R u+rwX tmp/sockets/\r\nsudo -u gitlab_ci -H mkdir -p tmp/pids/\r\nsudo chmod -R u+rwX tmp/pids/\r\n\r\n# install gems\r\nsudo -u gitlab_ci -H bundle install --without development test mysql --deployment # without ... mysql\r\n\r\n# set-up database\r\nsudo -u gitlab_ci -H cp config/database.yml.postgresql config/database.yml\r\nsudo -u gitlab_ci -H bundle exec rake setup RAILS_ENV=production\r\nsudo -u gitlab_ci -H bundle exec whenever -w RAILS_ENV=production\r\n```\r\n\r\n#### Post-installation\r\n\r\nGitLab is now installed! We need some final configurations.\r\n\r\n##### Host\r\n\r\n```bash\r\necho \"127.0.1.1       git-ci.domain.com\" | sudo tee --append /etc/hosts\r\n```\r\n\r\n##### Init.d script\r\n\r\nWe want GitLab CI to start on boot, so we add an init.d script.\r\n\r\n```bash\r\nsudo cp /home/gitlab_ci/gitlab-ci/lib/support/init.d/gitlab_ci /etc/init.d/gitlab_ci\r\nsudo update-rc.d gitlab_ci defaults 21 # start on boot\r\nsudo service gitlab_ci start\r\n```\r\n\r\n##### Nginx\r\n\r\nConfigure nginx (an Apache alternative) to host GitLab CI.\r\n\r\n```bash\r\nsudo apt-get install nginx\r\nsudo cp /home/gitlab_ci/gitlab-ci/lib/support/nginx/gitlab_ci /etc/nginx/sites-available/gitlab_ci\r\nsudo vim /etc/nginx/sites-available/gitlab_ci # edit port & fqdn\r\nsudo rm /etc/nginx/sites-enabled/default\r\nsudo ln -s /etc/nginx/sites-available/gitlab_ci /etc/nginx/sites-enabled/gitlab_ci\r\nsudo service nginx start\r\n```\r\n\r\n## Runners\r\n\r\nThe runners perform the actual build and need to be installed on **separate machines**, e.g. on a VPS.\r\nTime to install[3].\r\n\r\n### Installation\r\n\r\n#### Dependencies\r\n\r\n```bash\r\n# update system\r\nsudo apt-get update\r\nsudo apt-get upgrade\r\n\r\n# install dependencies\r\nsudo apt-get install -y wget curl gcc libxml2-dev libxslt-dev libcurl4-openssl-dev libreadline6-dev libc6-dev libssl-dev make build-essential zlib1g-dev openssh-server git-core libyaml-dev postfix libpq-dev libicu-dev\r\n\r\n# install ruby from source\r\nmkdir /tmp/ruby && cd /tmp/ruby\r\ncurl --progress ftp://ftp.ruby-lang.org/pub/ruby/2.0/ruby-2.0.0-p353.tar.gz | tar xz\r\ncd ruby-2.0.0-p353\r\n./configure --disable-install-rdoc\r\nmake\r\nsudo make install\r\n\r\n# install the bundler gem\r\nsudo gem install bundler\r\n\r\n# create a gitlab ci runner user\r\nsudo adduser --disabled-login --gecos \'GitLab CI Runner\' gitlab_ci_runner\r\n```\r\n\r\n#### GitLab CI Runner\r\n\r\nThe registration token can be found at: <http://the-gitlab-ci-domain/admin/runners>, accessible through _Header_ > _Runners_.\r\n\r\n```bash\r\n# get the gitlab ci runner source\r\ncd /home/gitlab_ci_runner/\r\nsudo -u gitlab_ci_runner -H git clone https://gitlab.com/gitlab-org/gitlab-ci-runner.git\r\ncd gitlab-ci-runner\r\n\r\n# install gems\r\nsudo -u gitlab_ci_runner -H bundle install --deployment\r\n\r\n# set-up the bundle interactively\r\nsudo -u gitlab_ci_runner -H bundle exec ./bin/setup\r\n```\r\n\r\n#### Post-installation\r\n\r\nWe need some final configurations.\r\n\r\n##### Init.d script\r\n\r\nWe want the GitLab CI Runner to start on boot, so we add an init.d script.\r\n\r\n```bash\r\nsudo cp lib/support/init.d/gitlab_ci_runner /etc/init.d/gitlab-ci-runner\r\nsudo chmod +x /etc/init.d/gitlab-ci-runner\r\nsudo update-rc.d gitlab-ci-runner defaults 21 # start on boot\r\nsudo service gitlab-ci-runner start\r\n```\r\n\r\n### Easily add Runners\r\n\r\nCreating a snapshot enables you to quickly add runners. Have the registration token at hand and:\r\n\r\n* instantiate a new VPS with the snapshot `gitlab-ci-runner-2gb-2gbswap`\r\n* `bundle exec ./bin/setup`\r\n* `sudo service gitlab-ci-runner start`\r\n\r\nNow the runner will start to pick up builds automatically. When you are done with it, you can destroy the VPS without worrying about anything.\r\n\r\n## References\r\n\r\n[1] <https://about.gitlab.com/2013/06/20/integrating-gitlab-ci-with-gitlab/>\r\n[2] <https://gitlab.com/gitlab-org/gitlab-ci/blob/master/doc/install/installation.md>\r\n[3] <https://gitlab.com/gitlab-org/gitlab-ci-runner/blob/master/README.md>','GitLab Continuous Integration','','inherit','open','open','','70-revision-v1','','','2014-10-22 11:22:04','2014-10-22 09:22:04','',70,'http://blog.gingerik.nl/?p=115',0,'revision','',0),(116,1,'2014-10-22 11:50:59','2014-10-22 09:50:59','_The GitLab.com team strongly believes in using feature branches and merge requests in software development. We also think that Test Driven Development (TDD) should be used wherever possible. If you combine these things what follows is that you have to know the testing results of a feature branch before accepting the merge request. GitLab CI was build to offer this functionality and we think most people using GitLab would benefit from using GitLab CI as well._\r\n\r\n> If you are running tests on the CI server you are doing it wrong!\r\n\r\n_Anybody who can push to a branch that is tested on a CI server can easily own that server. So you don\'t want to have projects with different authorization levels being tested on the same CI server._\r\n\r\n_To solve the problem we have split the CI application in two parts, a coordinator and runners. The coordinator enables you to specify how you want to test and stores the results. This is a rack application that communicates with the GitLab API. The runners perform the actual build and they are installed on separate machines. This way you never run tests on the same server that stores all you code._[1]\r\n\r\nTime to install GitLab CI[2]!\r\n\r\n## The Coordinator\r\n\r\nThe Coordinator is installed on the **same** server as GitLab itself. There is no need to put this somewhere else.\r\n\r\n### Installation\r\n\r\nMake sure **all** steps are run successfully!\r\n\r\n#### Dependencies\r\n\r\nFirst we install some packages that are required by GitLab CI.\r\n\r\n```bash\r\n# update the system\r\nsudo apt-get update\r\nsudo apt-get upgrade\r\n\r\n# install dependencies\r\nsudo apt-get install wget curl gcc checkinstall libxml2-dev libxslt-dev libcurl4-openssl-dev libreadline6-dev libc6-dev libssl-dev libmysql++-dev make build-essential zlib1g-dev openssh-server git-core libyaml-dev postfix libpq-dev libicu-dev\r\nsudo apt-get install redis-server\r\n\r\n# install ruby from source\r\nmkdir /tmp/ruby && cd /tmp/ruby\r\ncurl --progress http://cache.ruby-lang.org/pub/ruby/2.0/ruby-2.0.0-p353.tar.bz2 | tar xj\r\ncd ruby-2.0.0-p353\r\n./configure --disable-install-rdoc\r\nmake\r\nsudo make install\r\n\r\n# install the bundler gem\r\nsudo gem install bundler --no-ri --no-rdoc\r\n\r\n# create a gitlab ci user\r\nsudo adduser --disabled-login --gecos \'GitLab CI\' gitlab_ci\r\n\r\n# install & configure postgresql\r\n#   we do not specify a password because we are using peer authentication\r\nsudo apt-get install -y postgresql-9.1 libpq-dev\r\nsudo -u postgres psql -d template1 -c \"CREATE USER gitlab_ci;\"\r\nsudo -u postgres psql -d template1 -c \"CREATE DATABASE gitlab_ci_production OWNER gitlab_ci;\"\r\nsudo -u gitlab_ci -H psql -d gitlab_ci_production -c \"\\du\" # verify you can connect\r\n```\r\n\r\n#### GitLab CI\r\n\r\nNow we have successfully installed all dependencies, it is time to install GitLab CI itself.\r\n\r\n```bash\r\n# get the gitlab ci source\r\ncd /home/gitlab_ci/\r\nsudo -u gitlab_ci -H git clone https://gitlab.com/gitlab-org/gitlab-ci.git\r\ncd gitlab-ci\r\nsudo -u gitlab_ci -H git checkout 5-0-stable\r\n\r\n# set-up gitlab\r\nsudo -u gitlab_ci -H cp config/application.yml.example config/application.yml\r\nsudo -u gitlab_ci -H vim config/application.yml # configure the application (gitlab_server_urls = GitLab [not CI])\r\nsudo -u gitlab_ci -H cp config/unicorn.rb.example config/unicorn.rb\r\nsudo -u gitlab_ci -H vim config/unicorn.rb # configure the server, port -> 8081 (8080 is used by GitLab)\r\n\r\n# create socket and pid directories\r\n# yes, relative paths\r\nsudo -u gitlab_ci -H mkdir -p tmp/sockets/\r\nsudo chmod -R u+rwX tmp/sockets/\r\nsudo -u gitlab_ci -H mkdir -p tmp/pids/\r\nsudo chmod -R u+rwX tmp/pids/\r\n\r\n# install gems\r\nsudo -u gitlab_ci -H bundle install --without development test mysql --deployment # without ... mysql\r\n\r\n# set-up database\r\nsudo -u gitlab_ci -H cp config/database.yml.postgresql config/database.yml\r\nsudo -u gitlab_ci -H bundle exec rake setup RAILS_ENV=production\r\nsudo -u gitlab_ci -H bundle exec whenever -w RAILS_ENV=production\r\n```\r\n\r\n#### Post-installation\r\n\r\nGitLab is now installed! We need some final configurations.\r\n\r\n##### Host\r\n\r\n```bash\r\necho \"127.0.1.1       git-ci.domain.com\" | sudo tee --append /etc/hosts\r\n```\r\n\r\n##### Init.d script\r\n\r\nWe want GitLab CI to start on boot, so we add an init.d script.\r\n\r\n```bash\r\nsudo cp /home/gitlab_ci/gitlab-ci/lib/support/init.d/gitlab_ci /etc/init.d/gitlab_ci\r\nsudo update-rc.d gitlab_ci defaults 21 # start on boot\r\nsudo service gitlab_ci start\r\n```\r\n\r\n##### Nginx\r\n\r\nConfigure nginx (an Apache alternative) to host GitLab CI.\r\n\r\n```bash\r\nsudo apt-get install nginx\r\nsudo cp /home/gitlab_ci/gitlab-ci/lib/support/nginx/gitlab_ci /etc/nginx/sites-available/gitlab_ci\r\nsudo vim /etc/nginx/sites-available/gitlab_ci # edit port & fqdn\r\nsudo rm /etc/nginx/sites-enabled/default\r\nsudo ln -s /etc/nginx/sites-available/gitlab_ci /etc/nginx/sites-enabled/gitlab_ci\r\nsudo service nginx start\r\n```\r\n\r\n## Runners\r\n\r\nThe runners perform the actual build and need to be installed on **separate machines**, e.g. on a VPS.\r\nTime to install[3].\r\n\r\n### Installation\r\n\r\n#### Dependencies\r\n\r\n```bash\r\n# update system\r\nsudo apt-get update\r\nsudo apt-get upgrade\r\n\r\n# install dependencies\r\nsudo apt-get install -y wget curl gcc libxml2-dev libxslt-dev libcurl4-openssl-dev libreadline6-dev libc6-dev libssl-dev make build-essential zlib1g-dev openssh-server git-core libyaml-dev postfix libpq-dev libicu-dev\r\n\r\n# install ruby from source\r\nmkdir /tmp/ruby && cd /tmp/ruby\r\ncurl --progress ftp://ftp.ruby-lang.org/pub/ruby/2.0/ruby-2.0.0-p353.tar.gz | tar xz\r\ncd ruby-2.0.0-p353\r\n./configure --disable-install-rdoc\r\nmake\r\nsudo make install\r\n\r\n# install the bundler gem\r\nsudo gem install bundler\r\n\r\n# create a gitlab ci runner user\r\nsudo adduser --disabled-login --gecos \'GitLab CI Runner\' gitlab_ci_runner\r\n```\r\n\r\n#### GitLab CI Runner\r\n\r\nThe registration token can be found at: <http://the-gitlab-ci-domain/admin/runners>, accessible through _Header_ > _Runners_.\r\n\r\n```bash\r\n# get the gitlab ci runner source\r\ncd /home/gitlab_ci_runner/\r\nsudo -u gitlab_ci_runner -H git clone https://gitlab.com/gitlab-org/gitlab-ci-runner.git\r\ncd gitlab-ci-runner\r\n\r\n# install gems\r\nsudo -u gitlab_ci_runner -H bundle install --deployment\r\n\r\n# set-up the bundle interactively\r\nsudo -u gitlab_ci_runner -H bundle exec ./bin/setup\r\n```\r\n\r\n#### Post-installation\r\n\r\nWe need some final configurations.\r\n\r\n##### SSL certificates\r\n\r\n```bash\r\n# see https://github.com/gitlabhq/gitlab-ci-runner/issues/64\r\nsudo su\r\ncp ca-certificates.crt ca-certificates.crt.BAK\r\ncat git-server.crt >> ca-certificates.crt\r\n```\r\n\r\n##### Init.d script\r\n\r\nWe want the GitLab CI Runner to start on boot, so we add an init.d script.\r\n\r\n```bash\r\nsudo cp lib/support/init.d/gitlab_ci_runner /etc/init.d/gitlab-ci-runner\r\nsudo chmod +x /etc/init.d/gitlab-ci-runner\r\nsudo update-rc.d gitlab-ci-runner defaults 21 # start on boot\r\nsudo service gitlab-ci-runner start\r\n```\r\n\r\n### Easily add Runners\r\n\r\nCreating a snapshot enables you to quickly add runners. Have the registration token at hand and:\r\n\r\n* instantiate a new VPS with the snapshot `gitlab-ci-runner-2gb-2gbswap`\r\n* `bundle exec ./bin/setup`\r\n* `sudo service gitlab-ci-runner start`\r\n\r\nNow the runner will start to pick up builds automatically. When you are done with it, you can destroy the VPS without worrying about anything.\r\n\r\n## References\r\n\r\n[1] <https://about.gitlab.com/2013/06/20/integrating-gitlab-ci-with-gitlab/>\r\n[2] <https://gitlab.com/gitlab-org/gitlab-ci/blob/master/doc/install/installation.md>\r\n[3] <https://gitlab.com/gitlab-org/gitlab-ci-runner/blob/master/README.md>','GitLab Continuous Integration','','inherit','open','open','','70-revision-v1','','','2014-10-22 11:50:59','2014-10-22 09:50:59','',70,'http://blog.gingerik.nl/?p=116',0,'revision','',0),(117,1,'2014-10-22 11:57:10','2014-10-22 09:57:10','_The GitLab.com team strongly believes in using feature branches and merge requests in software development. We also think that Test Driven Development (TDD) should be used wherever possible. If you combine these things what follows is that you have to know the testing results of a feature branch before accepting the merge request. GitLab CI was build to offer this functionality and we think most people using GitLab would benefit from using GitLab CI as well._\r\n\r\n> If you are running tests on the CI server you are doing it wrong!\r\n\r\n_Anybody who can push to a branch that is tested on a CI server can easily own that server. So you don\'t want to have projects with different authorization levels being tested on the same CI server._\r\n\r\n_To solve the problem we have split the CI application in two parts, a coordinator and runners. The coordinator enables you to specify how you want to test and stores the results. This is a rack application that communicates with the GitLab API. The runners perform the actual build and they are installed on separate machines. This way you never run tests on the same server that stores all you code._[1]\r\n\r\nTime to install GitLab CI[2]!\r\n\r\n## The Coordinator\r\n\r\nThe Coordinator is installed on the **same** server as GitLab itself. There is no need to put this somewhere else.\r\n\r\n### Installation\r\n\r\nMake sure **all** steps are run successfully!\r\n\r\n#### Dependencies\r\n\r\nFirst we install some packages that are required by GitLab CI.\r\n\r\n```bash\r\n# update the system\r\nsudo apt-get update\r\nsudo apt-get upgrade\r\n\r\n# install dependencies\r\nsudo apt-get install wget curl gcc checkinstall libxml2-dev libxslt-dev libcurl4-openssl-dev libreadline6-dev libc6-dev libssl-dev libmysql++-dev make build-essential zlib1g-dev openssh-server git-core libyaml-dev postfix libpq-dev libicu-dev\r\nsudo apt-get install redis-server\r\n\r\n# install ruby from source\r\nmkdir /tmp/ruby && cd /tmp/ruby\r\ncurl --progress http://cache.ruby-lang.org/pub/ruby/2.0/ruby-2.0.0-p353.tar.bz2 | tar xj\r\ncd ruby-2.0.0-p353\r\n./configure --disable-install-rdoc\r\nmake\r\nsudo make install\r\n\r\n# install the bundler gem\r\nsudo gem install bundler --no-ri --no-rdoc\r\n\r\n# create a gitlab ci user\r\nsudo adduser --disabled-login --gecos \'GitLab CI\' gitlab_ci\r\n\r\n# install & configure postgresql\r\n#   we do not specify a password because we are using peer authentication\r\nsudo apt-get install -y postgresql-9.1 libpq-dev\r\nsudo -u postgres psql -d template1 -c \"CREATE USER gitlab_ci;\"\r\nsudo -u postgres psql -d template1 -c \"CREATE DATABASE gitlab_ci_production OWNER gitlab_ci;\"\r\nsudo -u gitlab_ci -H psql -d gitlab_ci_production -c \"\\du\" # verify you can connect\r\n```\r\n\r\n#### GitLab CI\r\n\r\nNow we have successfully installed all dependencies, it is time to install GitLab CI itself.\r\n\r\n```bash\r\n# get the gitlab ci source\r\ncd /home/gitlab_ci/\r\nsudo -u gitlab_ci -H git clone https://gitlab.com/gitlab-org/gitlab-ci.git\r\ncd gitlab-ci\r\nsudo -u gitlab_ci -H git checkout 5-0-stable\r\n\r\n# set-up gitlab\r\nsudo -u gitlab_ci -H cp config/application.yml.example config/application.yml\r\nsudo -u gitlab_ci -H vim config/application.yml # configure the application (gitlab_server_urls = GitLab [not CI])\r\nsudo -u gitlab_ci -H cp config/unicorn.rb.example config/unicorn.rb\r\nsudo -u gitlab_ci -H vim config/unicorn.rb # configure the server, port -> 8081 (8080 is used by GitLab)\r\n\r\n# create socket and pid directories\r\n# yes, relative paths\r\nsudo -u gitlab_ci -H mkdir -p tmp/sockets/\r\nsudo chmod -R u+rwX tmp/sockets/\r\nsudo -u gitlab_ci -H mkdir -p tmp/pids/\r\nsudo chmod -R u+rwX tmp/pids/\r\n\r\n# install gems\r\nsudo -u gitlab_ci -H bundle install --without development test mysql --deployment # without ... mysql\r\n\r\n# set-up database\r\nsudo -u gitlab_ci -H cp config/database.yml.postgresql config/database.yml\r\nsudo -u gitlab_ci -H bundle exec rake setup RAILS_ENV=production\r\nsudo -u gitlab_ci -H bundle exec whenever -w RAILS_ENV=production\r\n```\r\n\r\n#### Post-installation\r\n\r\nGitLab is now installed! We need some final configurations.\r\n\r\n##### Host\r\n\r\n```bash\r\necho \"127.0.1.1       git-ci.domain.com\" | sudo tee --append /etc/hosts\r\n```\r\n\r\n##### Init.d script\r\n\r\nWe want GitLab CI to start on boot, so we add an init.d script.\r\n\r\n```bash\r\nsudo cp /home/gitlab_ci/gitlab-ci/lib/support/init.d/gitlab_ci /etc/init.d/gitlab_ci\r\nsudo update-rc.d gitlab_ci defaults 21 # start on boot\r\nsudo service gitlab_ci start\r\n```\r\n\r\n##### Nginx\r\n\r\nConfigure nginx (an Apache alternative) to host GitLab CI.\r\n\r\n```bash\r\nsudo apt-get install nginx\r\nsudo cp /home/gitlab_ci/gitlab-ci/lib/support/nginx/gitlab_ci /etc/nginx/sites-available/gitlab_ci\r\nsudo vim /etc/nginx/sites-available/gitlab_ci # edit port & fqdn\r\nsudo rm /etc/nginx/sites-enabled/default\r\nsudo ln -s /etc/nginx/sites-available/gitlab_ci /etc/nginx/sites-enabled/gitlab_ci\r\nsudo service nginx start\r\n```\r\n\r\n## Runners\r\n\r\nThe runners perform the actual build and need to be installed on **separate machines**, e.g. on a VPS.\r\nTime to install[3].\r\n\r\n### Installation\r\n\r\n#### Dependencies\r\n\r\n```bash\r\n# update system\r\nsudo apt-get update\r\nsudo apt-get upgrade\r\n\r\n# install dependencies\r\nsudo apt-get install -y wget curl gcc libxml2-dev libxslt-dev libcurl4-openssl-dev libreadline6-dev libc6-dev libssl-dev make build-essential zlib1g-dev openssh-server git-core libyaml-dev postfix libpq-dev libicu-dev\r\n\r\n# install ruby from source\r\nmkdir /tmp/ruby && cd /tmp/ruby\r\ncurl --progress ftp://ftp.ruby-lang.org/pub/ruby/2.0/ruby-2.0.0-p353.tar.gz | tar xz\r\ncd ruby-2.0.0-p353\r\n./configure --disable-install-rdoc\r\nmake\r\nsudo make install\r\n\r\n# install the bundler gem\r\nsudo gem install bundler\r\n\r\n# create a gitlab ci runner user\r\nsudo adduser --disabled-login --gecos \'GitLab CI Runner\' gitlab_ci_runner\r\n```\r\n\r\n#### GitLab CI Runner\r\n\r\nThe registration token can be found at: <http://the-gitlab-ci-domain/admin/runners>, accessible through _Header_ > _Runners_.\r\n\r\n```bash\r\n# get the gitlab ci runner source\r\ncd /home/gitlab_ci_runner/\r\nsudo -u gitlab_ci_runner -H git clone https://gitlab.com/gitlab-org/gitlab-ci-runner.git\r\ncd gitlab-ci-runner\r\n\r\n# install gems\r\nsudo -u gitlab_ci_runner -H bundle install --deployment\r\n\r\n# set-up the bundle interactively\r\nsudo -u gitlab_ci_runner -H bundle exec ./bin/setup\r\n```\r\n\r\n#### Post-installation\r\n\r\nWe need some final configurations.\r\n\r\n##### SSL certificates\r\n\r\n```bash\r\n# see https://github.com/gitlabhq/gitlab-ci-runner/issues/64\r\nsudo su\r\ncp ca-certificates.crt ca-certificates.crt.BAK\r\ncat git-server.crt >> ca-certificates.crt # or rootCA.crt\r\n```\r\n\r\n##### Init.d script\r\n\r\nWe want the GitLab CI Runner to start on boot, so we add an init.d script.\r\n\r\n```bash\r\nsudo cp lib/support/init.d/gitlab_ci_runner /etc/init.d/gitlab-ci-runner\r\nsudo chmod +x /etc/init.d/gitlab-ci-runner\r\nsudo update-rc.d gitlab-ci-runner defaults 21 # start on boot\r\nsudo service gitlab-ci-runner start\r\n```\r\n\r\n### Easily add Runners\r\n\r\nCreating a snapshot enables you to quickly add runners. Have the registration token at hand and:\r\n\r\n* instantiate a new VPS with the snapshot `gitlab-ci-runner-2gb-2gbswap`\r\n* `bundle exec ./bin/setup`\r\n* `sudo service gitlab-ci-runner start`\r\n\r\nNow the runner will start to pick up builds automatically. When you are done with it, you can destroy the VPS without worrying about anything.\r\n\r\n## References\r\n\r\n[1] <https://about.gitlab.com/2013/06/20/integrating-gitlab-ci-with-gitlab/>\r\n[2] <https://gitlab.com/gitlab-org/gitlab-ci/blob/master/doc/install/installation.md>\r\n[3] <https://gitlab.com/gitlab-org/gitlab-ci-runner/blob/master/README.md>','GitLab Continuous Integration','','inherit','open','open','','70-revision-v1','','','2014-10-22 11:57:10','2014-10-22 09:57:10','',70,'http://blog.gingerik.nl/?p=117',0,'revision','',0),(118,1,'2014-10-22 12:01:42','2014-10-22 10:01:42','_The GitLab.com team strongly believes in using feature branches and merge requests in software development. We also think that Test Driven Development (TDD) should be used wherever possible. If you combine these things what follows is that you have to know the testing results of a feature branch before accepting the merge request. GitLab CI was build to offer this functionality and we think most people using GitLab would benefit from using GitLab CI as well._\r\n\r\n> If you are running tests on the CI server you are doing it wrong!\r\n\r\n_Anybody who can push to a branch that is tested on a CI server can easily own that server. So you don\'t want to have projects with different authorization levels being tested on the same CI server._\r\n\r\n_To solve the problem we have split the CI application in two parts, a coordinator and runners. The coordinator enables you to specify how you want to test and stores the results. This is a rack application that communicates with the GitLab API. The runners perform the actual build and they are installed on separate machines. This way you never run tests on the same server that stores all you code._[1]\r\n\r\nTime to install GitLab CI[2]!\r\n\r\n## The Coordinator\r\n\r\nThe Coordinator is installed on the **same** server as GitLab itself. There is no need to put this somewhere else.\r\n\r\n### Installation\r\n\r\nMake sure **all** steps are run successfully!\r\n\r\n#### Dependencies\r\n\r\nFirst we install some packages that are required by GitLab CI.\r\n\r\n```bash\r\n# update the system\r\nsudo apt-get update\r\nsudo apt-get upgrade\r\n\r\n# install dependencies\r\nsudo apt-get install wget curl gcc checkinstall libxml2-dev libxslt-dev libcurl4-openssl-dev libreadline6-dev libc6-dev libssl-dev libmysql++-dev make build-essential zlib1g-dev openssh-server git-core libyaml-dev postfix libpq-dev libicu-dev\r\nsudo apt-get install redis-server\r\n\r\n# install ruby from source\r\nmkdir /tmp/ruby && cd /tmp/ruby\r\ncurl --progress http://cache.ruby-lang.org/pub/ruby/2.0/ruby-2.0.0-p353.tar.bz2 | tar xj\r\ncd ruby-2.0.0-p353\r\n./configure --disable-install-rdoc\r\nmake\r\nsudo make install\r\n\r\n# install the bundler gem\r\nsudo gem install bundler --no-ri --no-rdoc\r\n\r\n# create a gitlab ci user\r\nsudo adduser --disabled-login --gecos \'GitLab CI\' gitlab_ci\r\n\r\n# install & configure postgresql\r\n#   we do not specify a password because we are using peer authentication\r\nsudo apt-get install -y postgresql-9.1 libpq-dev\r\nsudo -u postgres psql -d template1 -c \"CREATE USER gitlab_ci;\"\r\nsudo -u postgres psql -d template1 -c \"CREATE DATABASE gitlab_ci_production OWNER gitlab_ci;\"\r\nsudo -u gitlab_ci -H psql -d gitlab_ci_production -c \"\\du\" # verify you can connect\r\n```\r\n\r\n#### GitLab CI\r\n\r\nNow we have successfully installed all dependencies, it is time to install GitLab CI itself.\r\n\r\n```bash\r\n# get the gitlab ci source\r\ncd /home/gitlab_ci/\r\nsudo -u gitlab_ci -H git clone https://gitlab.com/gitlab-org/gitlab-ci.git\r\ncd gitlab-ci\r\nsudo -u gitlab_ci -H git checkout 5-0-stable\r\n\r\n# set-up gitlab\r\nsudo -u gitlab_ci -H cp config/application.yml.example config/application.yml\r\nsudo -u gitlab_ci -H vim config/application.yml # configure the application (gitlab_server_urls = GitLab [not CI])\r\nsudo -u gitlab_ci -H cp config/unicorn.rb.example config/unicorn.rb\r\nsudo -u gitlab_ci -H vim config/unicorn.rb # configure the server, port -> 8081 (8080 is used by GitLab)\r\n\r\n# create socket and pid directories\r\n# yes, relative paths\r\nsudo -u gitlab_ci -H mkdir -p tmp/sockets/\r\nsudo chmod -R u+rwX tmp/sockets/\r\nsudo -u gitlab_ci -H mkdir -p tmp/pids/\r\nsudo chmod -R u+rwX tmp/pids/\r\n\r\n# install gems\r\nsudo -u gitlab_ci -H bundle install --without development test mysql --deployment # without ... mysql\r\n\r\n# set-up database\r\nsudo -u gitlab_ci -H cp config/database.yml.postgresql config/database.yml\r\nsudo -u gitlab_ci -H bundle exec rake setup RAILS_ENV=production\r\nsudo -u gitlab_ci -H bundle exec whenever -w RAILS_ENV=production\r\n```\r\n\r\n#### Post-installation\r\n\r\nGitLab is now installed! We need some final configurations.\r\n\r\n##### Host\r\n\r\n```bash\r\necho \"127.0.1.1       git-ci.domain.com\" | sudo tee --append /etc/hosts\r\n```\r\n\r\n##### Init.d script\r\n\r\nWe want GitLab CI to start on boot, so we add an init.d script.\r\n\r\n```bash\r\nsudo cp /home/gitlab_ci/gitlab-ci/lib/support/init.d/gitlab_ci /etc/init.d/gitlab_ci\r\nsudo update-rc.d gitlab_ci defaults 21 # start on boot\r\nsudo service gitlab_ci start\r\n```\r\n\r\n##### Nginx\r\n\r\nConfigure nginx (an Apache alternative) to host GitLab CI.\r\n\r\n```bash\r\nsudo apt-get install nginx\r\nsudo cp /home/gitlab_ci/gitlab-ci/lib/support/nginx/gitlab_ci /etc/nginx/sites-available/gitlab_ci\r\nsudo vim /etc/nginx/sites-available/gitlab_ci # edit port & fqdn\r\nsudo rm /etc/nginx/sites-enabled/default\r\nsudo ln -s /etc/nginx/sites-available/gitlab_ci /etc/nginx/sites-enabled/gitlab_ci\r\nsudo service nginx start\r\n```\r\n\r\n## Runners\r\n\r\nThe runners perform the actual build and need to be installed on **separate machines**, e.g. on a VPS.\r\nTime to install[3].\r\n\r\n### Installation\r\n\r\n#### Dependencies\r\n\r\n```bash\r\n# update system\r\nsudo apt-get update\r\nsudo apt-get upgrade\r\n\r\n# install dependencies\r\nsudo apt-get install -y wget curl gcc libxml2-dev libxslt-dev libcurl4-openssl-dev libreadline6-dev libc6-dev libssl-dev make build-essential zlib1g-dev openssh-server git-core libyaml-dev postfix libpq-dev libicu-dev\r\n\r\n# install ruby from source\r\nmkdir /tmp/ruby && cd /tmp/ruby\r\ncurl --progress ftp://ftp.ruby-lang.org/pub/ruby/2.0/ruby-2.0.0-p353.tar.gz | tar xz\r\ncd ruby-2.0.0-p353\r\n./configure --disable-install-rdoc\r\nmake\r\nsudo make install\r\n\r\n# install the bundler gem\r\nsudo gem install bundler\r\n\r\n# create a gitlab ci runner user\r\nsudo adduser --disabled-login --gecos \'GitLab CI Runner\' gitlab_ci_runner\r\necho \"gitlab_ci_runner        ALL=NOPASSWD: ALL\" | sudo tee --append /etc/sudoers # warning\r\n```\r\n\r\n#### GitLab CI Runner\r\n\r\nThe registration token can be found at: <http://the-gitlab-ci-domain/admin/runners>, accessible through _Header_ > _Runners_.\r\n\r\n```bash\r\n# get the gitlab ci runner source\r\ncd /home/gitlab_ci_runner/\r\nsudo -u gitlab_ci_runner -H git clone https://gitlab.com/gitlab-org/gitlab-ci-runner.git\r\ncd gitlab-ci-runner\r\n\r\n# install gems\r\nsudo -u gitlab_ci_runner -H bundle install --deployment\r\n\r\n# set-up the bundle interactively\r\nsudo -u gitlab_ci_runner -H bundle exec ./bin/setup\r\n```\r\n\r\n#### Post-installation\r\n\r\nWe need some final configurations.\r\n\r\n##### SSL certificates\r\n\r\n```bash\r\n# see https://github.com/gitlabhq/gitlab-ci-runner/issues/64\r\nsudo su\r\ncp ca-certificates.crt ca-certificates.crt.BAK\r\ncat git-server.crt >> ca-certificates.crt # or rootCA.crt\r\n```\r\n\r\n##### Init.d script\r\n\r\nWe want the GitLab CI Runner to start on boot, so we add an init.d script.\r\n\r\n```bash\r\nsudo cp lib/support/init.d/gitlab_ci_runner /etc/init.d/gitlab-ci-runner\r\nsudo chmod +x /etc/init.d/gitlab-ci-runner\r\nsudo update-rc.d gitlab-ci-runner defaults 21 # start on boot\r\nsudo service gitlab-ci-runner start\r\n```\r\n\r\n### Easily add Runners\r\n\r\nCreating a snapshot enables you to quickly add runners. Have the registration token at hand and:\r\n\r\n* instantiate a new VPS with the snapshot `gitlab-ci-runner-2gb-2gbswap`\r\n* `bundle exec ./bin/setup`\r\n* `sudo service gitlab-ci-runner start`\r\n\r\nNow the runner will start to pick up builds automatically. When you are done with it, you can destroy the VPS without worrying about anything.\r\n\r\n## References\r\n\r\n[1] <https://about.gitlab.com/2013/06/20/integrating-gitlab-ci-with-gitlab/>\r\n[2] <https://gitlab.com/gitlab-org/gitlab-ci/blob/master/doc/install/installation.md>\r\n[3] <https://gitlab.com/gitlab-org/gitlab-ci-runner/blob/master/README.md>','GitLab Continuous Integration','','inherit','open','open','','70-revision-v1','','','2014-10-22 12:01:42','2014-10-22 10:01:42','',70,'http://blog.gingerik.nl/?p=118',0,'revision','',0),(119,0,'2014-10-23 11:47:55','2014-10-23 09:47:55','','Daily backup - October 23, 2014','','publish','open','open','','daily-backup-october-23-2014','','','2014-10-23 11:47:55','2014-10-23 09:47:55','',0,'http://blog.gingerik.nl/?revisr_commits=daily-backup-october-23-2014',0,'revisr_commits','',0),(120,1,'2014-10-23 11:51:50','2014-10-23 09:51:50','_The GitLab.com team strongly believes in using feature branches and merge requests in software development. We also think that Test Driven Development (TDD) should be used wherever possible. If you combine these things what follows is that you have to know the testing results of a feature branch before accepting the merge request. GitLab CI was build to offer this functionality and we think most people using GitLab would benefit from using GitLab CI as well._\r\n\r\n> If you are running tests on the CI server you are doing it wrong!\r\n\r\n_Anybody who can push to a branch that is tested on a CI server can easily own that server. So you don\'t want to have projects with different authorization levels being tested on the same CI server._\r\n\r\n_To solve the problem we have split the CI application in two parts, a coordinator and runners. The coordinator enables you to specify how you want to test and stores the results. This is a rack application that communicates with the GitLab API. The runners perform the actual build and they are installed on separate machines. This way you never run tests on the same server that stores all you code._[1]\r\n\r\nTime to install GitLab CI[2]!\r\n\r\n## The Coordinator\r\n\r\nThe Coordinator is installed on the **same** server as GitLab itself. There is no need to put this somewhere else.\r\n\r\n### Installation\r\n\r\nMake sure **all** steps are run successfully!\r\n\r\n#### Dependencies\r\n\r\nFirst we install some packages that are required by GitLab CI.\r\n\r\n```bash\r\n# update the system\r\nsudo apt-get update\r\nsudo apt-get upgrade\r\n\r\n# install dependencies\r\nsudo apt-get install wget curl gcc checkinstall libxml2-dev libxslt-dev libcurl4-openssl-dev libreadline6-dev libc6-dev libssl-dev libmysql++-dev make build-essential zlib1g-dev openssh-server git-core libyaml-dev postfix libpq-dev libicu-dev\r\nsudo apt-get install redis-server\r\n\r\n# install ruby from source\r\nmkdir /tmp/ruby && cd /tmp/ruby\r\ncurl --progress http://cache.ruby-lang.org/pub/ruby/2.0/ruby-2.0.0-p353.tar.bz2 | tar xj\r\ncd ruby-2.0.0-p353\r\n./configure --disable-install-rdoc\r\nmake\r\nsudo make install\r\n\r\n# install the bundler gem\r\nsudo gem install bundler --no-ri --no-rdoc\r\n\r\n# create a gitlab ci user\r\nsudo adduser --disabled-login --gecos \'GitLab CI\' gitlab_ci\r\n\r\n# install & configure postgresql\r\n#   we do not specify a password because we are using peer authentication\r\nsudo apt-get install -y postgresql-9.1 libpq-dev\r\nsudo -u postgres psql -d template1 -c \"CREATE USER gitlab_ci;\"\r\nsudo -u postgres psql -d template1 -c \"CREATE DATABASE gitlab_ci_production OWNER gitlab_ci;\"\r\nsudo -u gitlab_ci -H psql -d gitlab_ci_production -c \"\\du\" # verify you can connect\r\n```\r\n\r\n#### GitLab CI\r\n\r\nNow we have successfully installed all dependencies, it is time to install GitLab CI itself.\r\n\r\n```bash\r\n# get the gitlab ci source\r\ncd /home/gitlab_ci/\r\nsudo -u gitlab_ci -H git clone https://gitlab.com/gitlab-org/gitlab-ci.git\r\ncd gitlab-ci\r\nsudo -u gitlab_ci -H git checkout 5-0-stable\r\n\r\n# set-up gitlab\r\nsudo -u gitlab_ci -H cp config/application.yml.example config/application.yml\r\nsudo -u gitlab_ci -H vim config/application.yml # configure the application (gitlab_server_urls = GitLab [not CI])\r\nsudo -u gitlab_ci -H cp config/unicorn.rb.example config/unicorn.rb\r\nsudo -u gitlab_ci -H vim config/unicorn.rb # configure the server, port -> 8081 (8080 is used by GitLab)\r\n\r\n# create socket and pid directories\r\n# yes, relative paths\r\nsudo -u gitlab_ci -H mkdir -p tmp/sockets/\r\nsudo chmod -R u+rwX tmp/sockets/\r\nsudo -u gitlab_ci -H mkdir -p tmp/pids/\r\nsudo chmod -R u+rwX tmp/pids/\r\n\r\n# install gems\r\nsudo -u gitlab_ci -H bundle install --without development test mysql --deployment # without ... mysql\r\n\r\n# set-up database\r\nsudo -u gitlab_ci -H cp config/database.yml.postgresql config/database.yml\r\nsudo -u gitlab_ci -H bundle exec rake setup RAILS_ENV=production\r\nsudo -u gitlab_ci -H bundle exec whenever -w RAILS_ENV=production\r\n```\r\n\r\n#### Post-installation\r\n\r\nGitLab is now installed! We need some final configurations.\r\n\r\n##### Host\r\n\r\n```bash\r\necho \"127.0.1.1       git-ci.domain.com\" | sudo tee --append /etc/hosts\r\n```\r\n\r\n##### Init.d script\r\n\r\nWe want GitLab CI to start on boot, so we add an init.d script.\r\n\r\n```bash\r\nsudo cp /home/gitlab_ci/gitlab-ci/lib/support/init.d/gitlab_ci /etc/init.d/gitlab_ci\r\nsudo update-rc.d gitlab_ci defaults 21 # start on boot\r\nsudo service gitlab_ci start\r\n```\r\n\r\n##### Nginx\r\n\r\nConfigure nginx (an Apache alternative) to host GitLab CI.\r\n\r\n```bash\r\nsudo apt-get install nginx\r\nsudo cp /home/gitlab_ci/gitlab-ci/lib/support/nginx/gitlab_ci /etc/nginx/sites-available/gitlab_ci\r\nsudo vim /etc/nginx/sites-available/gitlab_ci # edit port & fqdn\r\nsudo rm /etc/nginx/sites-enabled/default\r\nsudo ln -s /etc/nginx/sites-available/gitlab_ci /etc/nginx/sites-enabled/gitlab_ci\r\nsudo service nginx start\r\n```\r\n\r\n## Runners\r\n\r\nThe runners perform the actual build and need to be installed on **separate machines**, e.g. on a VPS.\r\nTime to install[3].\r\n\r\n### Installation\r\n\r\n#### Dependencies\r\n\r\n```bash\r\n# update system\r\nsudo apt-get update\r\nsudo apt-get upgrade\r\n\r\n# install dependencies\r\nsudo apt-get install -y wget curl gcc libxml2-dev libxslt-dev libcurl4-openssl-dev libreadline6-dev libc6-dev libssl-dev make build-essential zlib1g-dev openssh-server git-core libyaml-dev postfix libpq-dev libicu-dev\r\n\r\n# install ruby from source\r\nmkdir /tmp/ruby && cd /tmp/ruby\r\ncurl --progress ftp://ftp.ruby-lang.org/pub/ruby/2.0/ruby-2.0.0-p353.tar.gz | tar xz\r\ncd ruby-2.0.0-p353\r\n./configure --disable-install-rdoc\r\nmake\r\nsudo make install\r\n\r\n# install the bundler gem\r\nsudo gem install bundler\r\n\r\n# create a gitlab ci runner user\r\nsudo adduser --disabled-login --gecos \'GitLab CI Runner\' gitlab_ci_runner\r\necho \"gitlab_ci_runner        ALL=NOPASSWD: ALL\" | sudo tee --append /etc/sudoers # warning\r\n```\r\n\r\n#### GitLab CI Runner\r\n\r\nThe registration token can be found at: <http://the-gitlab-ci-domain/admin/runners>, accessible through _Header_ > _Runners_.\r\n\r\n```bash\r\n# get the gitlab ci runner source\r\ncd /home/gitlab_ci_runner/\r\nsudo -u gitlab_ci_runner -H git clone https://gitlab.com/gitlab-org/gitlab-ci-runner.git\r\ncd gitlab-ci-runner\r\n\r\n# install gems\r\nsudo -u gitlab_ci_runner -H bundle install --deployment\r\n\r\n# set-up the bundle interactively\r\nsudo -u gitlab_ci_runner -H bundle exec ./bin/setup\r\n```\r\n\r\n#### Post-installation\r\n\r\nWe need some final configurations.\r\n\r\n##### SSL certificates\r\n\r\n_If your GitLab server is using self-signed SSL certificates then you should make sure the GitLab server certificate is trusted on the runner for the git clone operations to work._ Hence,\r\n\r\n```bash\r\ncd /home/gitlab_ci_runner/\r\nsudo -u gitlab_ci_runner mkdir -p data/certs\r\nsudo -u gitlab_ci_runner cp /somedir/ca.crt data/certs\r\n```\r\n\r\n##### Init.d script\r\n\r\nWe want the GitLab CI Runner to start on boot, so we add an init.d script.\r\n\r\n```bash\r\nsudo cp lib/support/init.d/gitlab_ci_runner /etc/init.d/gitlab-ci-runner\r\nsudo chmod +x /etc/init.d/gitlab-ci-runner\r\nsudo update-rc.d gitlab-ci-runner defaults 21 # start on boot\r\nsudo service gitlab-ci-runner start\r\n```\r\n\r\n### Easily add Runners\r\n\r\nCreating a snapshot enables you to quickly add runners. Have the registration token at hand and:\r\n\r\n* instantiate a new VPS with the snapshot `gitlab-ci-runner-2gb-2gbswap`\r\n* `bundle exec ./bin/setup`\r\n* `sudo service gitlab-ci-runner start`\r\n\r\nNow the runner will start to pick up builds automatically. When you are done with it, you can destroy the VPS without worrying about anything.\r\n\r\n## References\r\n\r\n[1] <https://about.gitlab.com/2013/06/20/integrating-gitlab-ci-with-gitlab/>\r\n[2] <https://gitlab.com/gitlab-org/gitlab-ci/blob/master/doc/install/installation.md>\r\n[3] <https://gitlab.com/gitlab-org/gitlab-ci-runner/blob/master/README.md>','GitLab Continuous Integration','','inherit','open','open','','70-revision-v1','','','2014-10-23 11:51:50','2014-10-23 09:51:50','',70,'http://blog.gingerik.nl/?p=120',0,'revision','',0),(121,1,'2014-10-23 11:52:54','2014-10-23 09:52:54','_The GitLab.com team strongly believes in using feature branches and merge requests in software development. We also think that Test Driven Development (TDD) should be used wherever possible. If you combine these things what follows is that you have to know the testing results of a feature branch before accepting the merge request. GitLab CI was build to offer this functionality and we think most people using GitLab would benefit from using GitLab CI as well._\r\n\r\n> If you are running tests on the CI server you are doing it wrong!\r\n\r\n_Anybody who can push to a branch that is tested on a CI server can easily own that server. So you don\'t want to have projects with different authorization levels being tested on the same CI server._\r\n\r\n_To solve the problem we have split the CI application in two parts, a coordinator and runners. The coordinator enables you to specify how you want to test and stores the results. This is a rack application that communicates with the GitLab API. The runners perform the actual build and they are installed on separate machines. This way you never run tests on the same server that stores all you code._[1]\r\n\r\nTime to install GitLab CI[2]!\r\n\r\n## The Coordinator\r\n\r\nThe Coordinator is installed on the **same** server as GitLab itself. There is no need to put this somewhere else.\r\n\r\n### Installation\r\n\r\nMake sure **all** steps are run successfully!\r\n\r\n#### Dependencies\r\n\r\nFirst we install some packages that are required by GitLab CI.\r\n\r\n```bash\r\n# update the system\r\nsudo apt-get update\r\nsudo apt-get upgrade\r\n\r\n# install dependencies\r\nsudo apt-get install wget curl gcc checkinstall libxml2-dev libxslt-dev libcurl4-openssl-dev libreadline6-dev libc6-dev libssl-dev libmysql++-dev make build-essential zlib1g-dev openssh-server git-core libyaml-dev postfix libpq-dev libicu-dev\r\nsudo apt-get install redis-server\r\n\r\n# install ruby from source\r\nmkdir /tmp/ruby && cd /tmp/ruby\r\ncurl --progress http://cache.ruby-lang.org/pub/ruby/2.0/ruby-2.0.0-p353.tar.bz2 | tar xj\r\ncd ruby-2.0.0-p353\r\n./configure --disable-install-rdoc\r\nmake\r\nsudo make install\r\n\r\n# install the bundler gem\r\nsudo gem install bundler --no-ri --no-rdoc\r\n\r\n# create a gitlab ci user\r\nsudo adduser --disabled-login --gecos \'GitLab CI\' gitlab_ci\r\n\r\n# install & configure postgresql\r\n#   we do not specify a password because we are using peer authentication\r\nsudo apt-get install -y postgresql-9.1 libpq-dev\r\nsudo -u postgres psql -d template1 -c \"CREATE USER gitlab_ci;\"\r\nsudo -u postgres psql -d template1 -c \"CREATE DATABASE gitlab_ci_production OWNER gitlab_ci;\"\r\nsudo -u gitlab_ci -H psql -d gitlab_ci_production -c \"\\du\" # verify you can connect\r\n```\r\n\r\n#### GitLab CI\r\n\r\nNow we have successfully installed all dependencies, it is time to install GitLab CI itself.\r\n\r\n```bash\r\n# get the gitlab ci source\r\ncd /home/gitlab_ci/\r\nsudo -u gitlab_ci -H git clone https://gitlab.com/gitlab-org/gitlab-ci.git\r\ncd gitlab-ci\r\nsudo -u gitlab_ci -H git checkout 5-0-stable\r\n\r\n# set-up gitlab\r\nsudo -u gitlab_ci -H cp config/application.yml.example config/application.yml\r\nsudo -u gitlab_ci -H vim config/application.yml # configure the application (gitlab_server_urls = GitLab [not CI])\r\nsudo -u gitlab_ci -H cp config/unicorn.rb.example config/unicorn.rb\r\nsudo -u gitlab_ci -H vim config/unicorn.rb # configure the server, port -> 8081 (8080 is used by GitLab)\r\n\r\n# create socket and pid directories\r\n# yes, relative paths\r\nsudo -u gitlab_ci -H mkdir -p tmp/sockets/\r\nsudo chmod -R u+rwX tmp/sockets/\r\nsudo -u gitlab_ci -H mkdir -p tmp/pids/\r\nsudo chmod -R u+rwX tmp/pids/\r\n\r\n# install gems\r\nsudo -u gitlab_ci -H bundle install --without development test mysql --deployment # without ... mysql\r\n\r\n# set-up database\r\nsudo -u gitlab_ci -H cp config/database.yml.postgresql config/database.yml\r\nsudo -u gitlab_ci -H bundle exec rake setup RAILS_ENV=production\r\nsudo -u gitlab_ci -H bundle exec whenever -w RAILS_ENV=production\r\n```\r\n\r\n#### Post-installation\r\n\r\nGitLab is now installed! We need some final configurations.\r\n\r\n##### Host\r\n\r\n```bash\r\necho \"127.0.1.1       git-ci.domain.com\" | sudo tee --append /etc/hosts\r\n```\r\n\r\n##### Init.d script\r\n\r\nWe want GitLab CI to start on boot, so we add an init.d script.\r\n\r\n```bash\r\nsudo cp /home/gitlab_ci/gitlab-ci/lib/support/init.d/gitlab_ci /etc/init.d/gitlab_ci\r\nsudo update-rc.d gitlab_ci defaults 21 # start on boot\r\nsudo service gitlab_ci start\r\n```\r\n\r\n##### Nginx\r\n\r\nConfigure nginx (an Apache alternative) to host GitLab CI.\r\n\r\n```bash\r\nsudo apt-get install nginx\r\nsudo cp /home/gitlab_ci/gitlab-ci/lib/support/nginx/gitlab_ci /etc/nginx/sites-available/gitlab_ci\r\nsudo vim /etc/nginx/sites-available/gitlab_ci # edit port & fqdn\r\nsudo rm /etc/nginx/sites-enabled/default\r\nsudo ln -s /etc/nginx/sites-available/gitlab_ci /etc/nginx/sites-enabled/gitlab_ci\r\nsudo service nginx start\r\n```\r\n\r\n## Runners\r\n\r\nThe runners perform the actual build and need to be installed on **separate machines**, e.g. on a VPS.\r\nTime to install[3].\r\n\r\n### Installation\r\n\r\n#### Dependencies\r\n\r\n```bash\r\n# update system\r\nsudo apt-get update\r\nsudo apt-get upgrade\r\n\r\n# install dependencies\r\nsudo apt-get install -y wget curl gcc libxml2-dev libxslt-dev libcurl4-openssl-dev libreadline6-dev libc6-dev libssl-dev make build-essential zlib1g-dev openssh-server git-core libyaml-dev postfix libpq-dev libicu-dev\r\n\r\n# install ruby from source\r\nmkdir /tmp/ruby && cd /tmp/ruby\r\ncurl --progress ftp://ftp.ruby-lang.org/pub/ruby/2.0/ruby-2.0.0-p353.tar.gz | tar xz\r\ncd ruby-2.0.0-p353\r\n./configure --disable-install-rdoc\r\nmake\r\nsudo make install\r\n\r\n# install the bundler gem\r\nsudo gem install bundler\r\n\r\n# create a gitlab ci runner user\r\nsudo adduser --disabled-login --gecos \'GitLab CI Runner\' gitlab_ci_runner\r\necho \"gitlab_ci_runner        ALL=NOPASSWD: ALL\" | sudo tee --append /etc/sudoers # warning\r\n```\r\n\r\n#### GitLab CI Runner\r\n\r\nThe registration token can be found at: <http://the-gitlab-ci-domain/admin/runners>, accessible through _Header_ > _Runners_.\r\n\r\n```bash\r\n# get the gitlab ci runner source\r\ncd /home/gitlab_ci_runner/\r\nsudo -u gitlab_ci_runner -H git clone https://gitlab.com/gitlab-org/gitlab-ci-runner.git\r\ncd gitlab-ci-runner\r\n\r\n# install gems\r\nsudo -u gitlab_ci_runner -H bundle install --deployment\r\n\r\n# set-up the bundle interactively\r\nsudo -u gitlab_ci_runner -H bundle exec ./bin/setup\r\n```\r\n\r\n#### Post-installation\r\n\r\nWe need some final configurations.\r\n\r\n##### SSL certificates\r\n\r\n_If your GitLab server is using self-signed SSL certificates then you should make sure the GitLab server certificate is trusted on the runner for the git clone operations to work._ Hence,\r\n\r\n```bash\r\ncd /home/gitlab_ci_runner/\r\nsudo -u gitlab_ci_runner mkdir -p data/certs\r\nsudo -u gitlab_ci_runner cp /somedir/ca.crt data/certs/\r\n```\r\n\r\n##### Init.d script\r\n\r\nWe want the GitLab CI Runner to start on boot, so we add an init.d script.\r\n\r\n```bash\r\nsudo cp lib/support/init.d/gitlab_ci_runner /etc/init.d/gitlab-ci-runner\r\nsudo chmod +x /etc/init.d/gitlab-ci-runner\r\nsudo update-rc.d gitlab-ci-runner defaults 21 # start on boot\r\nsudo service gitlab-ci-runner start\r\n```\r\n\r\n### Easily add Runners\r\n\r\nCreating a snapshot enables you to quickly add runners. Have the registration token at hand and:\r\n\r\n* instantiate a new VPS with the snapshot `gitlab-ci-runner-2gb-2gbswap`\r\n* `bundle exec ./bin/setup`\r\n* `sudo service gitlab-ci-runner start`\r\n\r\nNow the runner will start to pick up builds automatically. When you are done with it, you can destroy the VPS without worrying about anything.\r\n\r\n## References\r\n\r\n[1] <https://about.gitlab.com/2013/06/20/integrating-gitlab-ci-with-gitlab/>\r\n[2] <https://gitlab.com/gitlab-org/gitlab-ci/blob/master/doc/install/installation.md>\r\n[3] <https://gitlab.com/gitlab-org/gitlab-ci-runner/blob/master/README.md>','GitLab Continuous Integration','','inherit','open','open','','70-revision-v1','','','2014-10-23 11:52:54','2014-10-23 09:52:54','',70,'http://blog.gingerik.nl/?p=121',0,'revision','',0),(123,1,'2014-10-25 18:21:01','2014-10-25 16:21:01','Add your own, or non-default SSL certificates (e.g. [CACert](http://cacert.org/)) [1].\r\n\r\n```\r\nsudo mkdir /usr/local/share/ca-certificates/your-organisation\r\nsudo cp certificate1.crt /usr/local/share/ca-certificates/your-organisation\r\nsudo cp certificate2.crt /usr/local/share/ca-certificates/your-organisation\r\nsudo update-ca-certificates\r\n```\r\n\r\n[1] http://brightbox.com/blog/2014/03/04/add-cacert-ubuntu-debian/','SSL Certificates','','publish','open','open','','ssl-certificates','','','2014-10-25 18:21:01','2014-10-25 16:21:01','',0,'http://blog.gingerik.nl/?p=123',0,'post','',0),(124,1,'2014-10-23 12:11:33','2014-10-23 10:11:33','[1] http://brightbox.com/blog/2014/03/04/add-cacert-ubuntu-debian/','SSL Certificates','','inherit','open','open','','123-revision-v1','','','2014-10-23 12:11:33','2014-10-23 10:11:33','',123,'http://blog.gingerik.nl/?p=124',0,'revision','',0),(125,1,'2014-10-23 12:56:48','2014-10-23 10:56:48','_The GitLab.com team strongly believes in using feature branches and merge requests in software development. We also think that Test Driven Development (TDD) should be used wherever possible. If you combine these things what follows is that you have to know the testing results of a feature branch before accepting the merge request. GitLab CI was build to offer this functionality and we think most people using GitLab would benefit from using GitLab CI as well._\r\n\r\n> If you are running tests on the CI server you are doing it wrong!\r\n\r\n_Anybody who can push to a branch that is tested on a CI server can easily own that server. So you don\'t want to have projects with different authorization levels being tested on the same CI server._\r\n\r\n_To solve the problem we have split the CI application in two parts, a coordinator and runners. The coordinator enables you to specify how you want to test and stores the results. This is a rack application that communicates with the GitLab API. The runners perform the actual build and they are installed on separate machines. This way you never run tests on the same server that stores all you code._[1]\r\n\r\nTime to install GitLab CI[2]!\r\n\r\n## The Coordinator\r\n\r\nThe Coordinator is installed on the **same** server as GitLab itself. There is no need to put this somewhere else.\r\n\r\n### Installation\r\n\r\nMake sure **all** steps are run successfully!\r\n\r\n#### Dependencies\r\n\r\nFirst we install some packages that are required by GitLab CI.\r\n\r\n```bash\r\n# update the system\r\nsudo apt-get update\r\nsudo apt-get upgrade\r\n\r\n# install dependencies\r\nsudo apt-get install wget curl gcc checkinstall libxml2-dev libxslt-dev libcurl4-openssl-dev libreadline6-dev libc6-dev libssl-dev libmysql++-dev make build-essential zlib1g-dev openssh-server git-core libyaml-dev postfix libpq-dev libicu-dev\r\nsudo apt-get install redis-server\r\n\r\n# install ruby from source\r\nmkdir /tmp/ruby && cd /tmp/ruby\r\ncurl --progress http://cache.ruby-lang.org/pub/ruby/2.0/ruby-2.0.0-p353.tar.bz2 | tar xj\r\ncd ruby-2.0.0-p353\r\n./configure --disable-install-rdoc\r\nmake\r\nsudo make install\r\n\r\n# install the bundler gem\r\nsudo gem install bundler --no-ri --no-rdoc\r\n\r\n# create a gitlab ci user\r\nsudo adduser --disabled-login --gecos \'GitLab CI\' gitlab_ci\r\n\r\n# install & configure postgresql\r\n#   we do not specify a password because we are using peer authentication\r\nsudo apt-get install -y postgresql-9.1 libpq-dev\r\nsudo -u postgres psql -d template1 -c \"CREATE USER gitlab_ci;\"\r\nsudo -u postgres psql -d template1 -c \"CREATE DATABASE gitlab_ci_production OWNER gitlab_ci;\"\r\nsudo -u gitlab_ci -H psql -d gitlab_ci_production -c \"\\du\" # verify you can connect\r\n```\r\n\r\n#### GitLab CI\r\n\r\nNow we have successfully installed all dependencies, it is time to install GitLab CI itself.\r\n\r\n```bash\r\n# get the gitlab ci source\r\ncd /home/gitlab_ci/\r\nsudo -u gitlab_ci -H git clone https://gitlab.com/gitlab-org/gitlab-ci.git\r\ncd gitlab-ci\r\nsudo -u gitlab_ci -H git checkout 5-0-stable\r\n\r\n# set-up gitlab\r\nsudo -u gitlab_ci -H cp config/application.yml.example config/application.yml\r\nsudo -u gitlab_ci -H vim config/application.yml # configure the application (gitlab_server_urls = GitLab [not CI])\r\nsudo -u gitlab_ci -H cp config/unicorn.rb.example config/unicorn.rb\r\nsudo -u gitlab_ci -H vim config/unicorn.rb # configure the server, port -> 8081 (8080 is used by GitLab)\r\n\r\n# create socket and pid directories\r\n# yes, relative paths\r\nsudo -u gitlab_ci -H mkdir -p tmp/sockets/\r\nsudo chmod -R u+rwX tmp/sockets/\r\nsudo -u gitlab_ci -H mkdir -p tmp/pids/\r\nsudo chmod -R u+rwX tmp/pids/\r\n\r\n# install gems\r\nsudo -u gitlab_ci -H bundle install --without development test mysql --deployment # without ... mysql\r\n\r\n# set-up database\r\nsudo -u gitlab_ci -H cp config/database.yml.postgresql config/database.yml\r\nsudo -u gitlab_ci -H bundle exec rake setup RAILS_ENV=production\r\nsudo -u gitlab_ci -H bundle exec whenever -w RAILS_ENV=production\r\n```\r\n\r\n#### Post-installation\r\n\r\nGitLab is now installed! We need some final configurations.\r\n\r\n##### Host\r\n\r\n```bash\r\necho \"127.0.1.1       git-ci.domain.com\" | sudo tee --append /etc/hosts\r\n```\r\n\r\n##### Init.d script\r\n\r\nWe want GitLab CI to start on boot, so we add an init.d script.\r\n\r\n```bash\r\nsudo cp /home/gitlab_ci/gitlab-ci/lib/support/init.d/gitlab_ci /etc/init.d/gitlab_ci\r\nsudo update-rc.d gitlab_ci defaults 21 # start on boot\r\nsudo service gitlab_ci start\r\n```\r\n\r\n##### Nginx\r\n\r\nConfigure nginx (an Apache alternative) to host GitLab CI.\r\n\r\n```bash\r\nsudo apt-get install nginx\r\nsudo cp /home/gitlab_ci/gitlab-ci/lib/support/nginx/gitlab_ci /etc/nginx/sites-available/gitlab_ci\r\nsudo vim /etc/nginx/sites-available/gitlab_ci # edit port & fqdn\r\nsudo rm /etc/nginx/sites-enabled/default\r\nsudo ln -s /etc/nginx/sites-available/gitlab_ci /etc/nginx/sites-enabled/gitlab_ci\r\nsudo service nginx start\r\n```\r\n\r\n## Runners\r\n\r\nThe runners perform the actual build and need to be installed on **separate machines**, e.g. on a VPS.\r\nTime to install[3].\r\n\r\n### Installation\r\n\r\n#### Dependencies\r\n\r\n```bash\r\n# update system\r\nsudo apt-get update\r\nsudo apt-get upgrade\r\n\r\n# install dependencies\r\nsudo apt-get install -y wget curl gcc libxml2-dev libxslt-dev libcurl4-openssl-dev libreadline6-dev libc6-dev libssl-dev make build-essential zlib1g-dev openssh-server git-core libyaml-dev postfix libpq-dev libicu-dev\r\n\r\n# install ruby from source\r\nmkdir /tmp/ruby && cd /tmp/ruby\r\ncurl --progress ftp://ftp.ruby-lang.org/pub/ruby/2.0/ruby-2.0.0-p353.tar.gz | tar xz\r\ncd ruby-2.0.0-p353\r\n./configure --disable-install-rdoc\r\nmake\r\nsudo make install\r\n\r\n# install the bundler gem\r\nsudo gem install bundler\r\n\r\n# create a gitlab ci runner user\r\nsudo adduser --disabled-login --gecos \'GitLab CI Runner\' gitlab_ci_runner\r\necho \"gitlab_ci_runner        ALL=NOPASSWD: ALL\" | sudo tee --append /etc/sudoers # warning\r\n```\r\n\r\n#### GitLab CI Runner\r\n\r\nThe registration token can be found at: <http://the-gitlab-ci-domain/admin/runners>, accessible through _Header_ > _Runners_.\r\n\r\n```bash\r\n# get the gitlab ci runner source\r\ncd /home/gitlab_ci_runner/\r\nsudo -u gitlab_ci_runner -H git clone https://gitlab.com/gitlab-org/gitlab-ci-runner.git\r\ncd gitlab-ci-runner\r\n\r\n# install gems\r\nsudo -u gitlab_ci_runner -H bundle install --deployment\r\n\r\n# set-up the bundle interactively\r\nsudo -u gitlab_ci_runner -H bundle exec ./bin/setup\r\n```\r\n\r\n#### Post-installation\r\n\r\nWe need some final configurations.\r\n\r\n##### SSL certificates\r\n\r\n_If your GitLab server is using self-signed SSL certificates then you should make sure the GitLab server certificate is trusted on the runner for the git clone operations to work._ Hence,\r\n\r\n```bash\r\nsudo cp /somedir/ca.crt /usr/local/share/ca-certificates/\r\nsudo update-ca-certificates\r\n```\r\n\r\n##### Init.d script\r\n\r\nWe want the GitLab CI Runner to start on boot, so we add an init.d script.\r\n\r\n```bash\r\nsudo cp lib/support/init.d/gitlab_ci_runner /etc/init.d/gitlab-ci-runner\r\nsudo chmod +x /etc/init.d/gitlab-ci-runner\r\nsudo update-rc.d gitlab-ci-runner defaults 21 # start on boot\r\nsudo service gitlab-ci-runner start\r\n```\r\n\r\n### Easily add Runners\r\n\r\nCreating a snapshot enables you to quickly add runners. Have the registration token at hand and:\r\n\r\n* instantiate a new VPS with the snapshot `gitlab-ci-runner-2gb-2gbswap`\r\n* `bundle exec ./bin/setup`\r\n* `sudo service gitlab-ci-runner start`\r\n\r\nNow the runner will start to pick up builds automatically. When you are done with it, you can destroy the VPS without worrying about anything.\r\n\r\n## References\r\n\r\n[1] <https://about.gitlab.com/2013/06/20/integrating-gitlab-ci-with-gitlab/>\r\n[2] <https://gitlab.com/gitlab-org/gitlab-ci/blob/master/doc/install/installation.md>\r\n[3] <https://gitlab.com/gitlab-org/gitlab-ci-runner/blob/master/README.md>','GitLab Continuous Integration','','inherit','open','open','','70-revision-v1','','','2014-10-23 12:56:48','2014-10-23 10:56:48','',70,'http://blog.gingerik.nl/?p=125',0,'revision','',0),(126,1,'2014-10-25 18:22:08','0000-00-00 00:00:00','```bash\r\n#!/bin/sh\r\n\r\nif [ ! -s lint ]; then\r\n  grunt lint:src | grep \'\\(/home/erik\\|^  \\)\' | sed \'s|.*\\(/home/erik.*\\.js\\).*|\\1|\' > lint\r\nfi\r\n\r\ncat lint | while read line; do\r\n  echo $line | grep \'/home/erik\' > /dev/null\r\n  if [ $? -eq 0 ]; then\r\n    file=$line\r\n    echo \"Processing \\033[1m$file\\033[0m\"\r\n  else\r\n    lineNumber=$(echo $line | sed -n \'s|.*\\[#\\([0-9]\\+\\)\\].*|\\1|p\')\r\n    correctIndentation=$(echo $line | sed -n \'s|.*{\\([0-9]\\+\\)[, 0-9]\\+}.*|\\1|p\')\r\n    currentIndentation=$(echo $line | sed -n \'s|.*but got \\([0-9]\\+\\).*|\\1|p\')\r\n    #echo \"$lineNumber | $currentIndentation -> $correctIndentation\"\r\n    if [ -z \"$lineNumber\" ]; then\r\n      echo -e \"FAILED ON LINENUMBER\\n$line\"\r\n      exit 1\r\n    fi\r\n    if [ -z \"$correctIndentation\" ]; then\r\n      echo -e \"FAILED ON INDENTATION\\n$line\"\r\n      exit 1\r\n    fi\r\n    spaces=$(head -c ${correctIndentation} < /dev/zero | tr \'\\0\' \' \')\r\n    sed -i \"${lineNumber}s/^[ ]\\+/${spaces}/\" ${file}\r\n  fi\r\ndone\r\n```','gjslint','','draft','open','open','','','','','2014-10-25 18:22:08','2014-10-25 16:22:08','',0,'http://blog.gingerik.nl/?p=126',0,'post','',0),(127,1,'2014-10-23 16:14:44','2014-10-23 14:14:44','```bash\r\n#!/bin/sh\r\n\r\nif [ ! -s lint ]; then\r\n  grunt lint:src | grep \'\\(/home/erik\\|^  \\)\' | sed \'s|.*\\(/home/erik.*\\.js\\).*|\\1|\' > lint\r\nfi\r\n\r\ncat lint | while read line; do\r\n  echo $line | grep \'/home/erik\' > /dev/null\r\n  if [ $? -eq 0 ]; then\r\n    file=$line\r\n    echo \"Processing \\033[1m$file\\033[0m\"\r\n  else\r\n    lineNumber=$(echo $line | sed -n \'s|.*\\[#\\([0-9]\\+\\)\\].*|\\1|p\')\r\n    correctIndentation=$(echo $line | sed -n \'s|.*{\\([0-9]\\+\\)[, 0-9]\\+}.*|\\1|p\')\r\n    currentIndentation=$(echo $line | sed -n \'s|.*but got \\([0-9]\\+\\).*|\\1|p\')\r\n    #echo \"$lineNumber | $currentIndentation -> $correctIndentation\"\r\n    if [ -z \"$lineNumber\" ]; then\r\n      echo -e \"FAILED ON LINENUMBER\\n$line\"\r\n      exit 1\r\n    fi\r\n    if [ -z \"$correctIndentation\" ]; then\r\n      echo -e \"FAILED ON INDENTATION$line\"\r\n      exit 1\r\n    fi\r\n    spaces=$(head -c ${correctIndentation} < /dev/zero | tr \'\\0\' \' \')\r\n    sed -i \"${lineNumber}s/^[ ]\\+/__/p\" ${file}\r\n  fi\r\ndone \r\n```','gjslint','','inherit','open','open','','126-revision-v1','','','2014-10-23 16:14:44','2014-10-23 14:14:44','',126,'http://blog.gingerik.nl/?p=127',0,'revision','',0),(128,1,'2014-10-23 16:55:38','2014-10-23 14:55:38','```bash\r\n#!/bin/sh\r\n\r\nif [ ! -s lint ]; then\r\n  grunt lint:src | grep \'\\(/home/erik\\|^  \\)\' | sed \'s|.*\\(/home/erik.*\\.js\\).*|\\1|\' > lint\r\nfi\r\n\r\ncat lint | while read line; do\r\n  echo $line | grep \'/home/erik\' > /dev/null\r\n  if [ $? -eq 0 ]; then\r\n    file=$line\r\n    echo \"Processing \\033[1m$file\\033[0m\"\r\n  else\r\n    lineNumber=$(echo $line | sed -n \'s|.*\\[#\\([0-9]\\+\\)\\].*|\\1|p\')\r\n    correctIndentation=$(echo $line | sed -n \'s|.*{\\([0-9]\\+\\)[, 0-9]\\+}.*|\\1|p\')\r\n    currentIndentation=$(echo $line | sed -n \'s|.*but got \\([0-9]\\+\\).*|\\1|p\')\r\n    #echo \"$lineNumber | $currentIndentation -> $correctIndentation\"\r\n    if [ -z \"$lineNumber\" ]; then\r\n      echo -e \"FAILED ON LINENUMBER\\n$line\"\r\n      exit 1\r\n    fi\r\n    if [ -z \"$correctIndentation\" ]; then\r\n      echo -e \"FAILED ON INDENTATION$line\"\r\n      exit 1\r\n    fi\r\n    spaces=$(head -c ${correctIndentation} < /dev/zero | tr \'\\0\' \' \')\r\n    sed -i \"${lineNumber}s/^[ ]\\+/${spaces}/\" ${file}\r\n  fi\r\ndone\r\n```','gjslint','','inherit','open','open','','126-revision-v1','','','2014-10-23 16:55:38','2014-10-23 14:55:38','',126,'http://blog.gingerik.nl/?p=128',0,'revision','',0),(129,0,'2014-10-24 03:18:24','2014-10-24 01:18:24','','Daily backup - October 24, 2014','','publish','open','open','','daily-backup-october-24-2014','','','2014-10-24 03:18:24','2014-10-24 01:18:24','',0,'http://blog.gingerik.nl/?revisr_commits=daily-backup-october-24-2014',0,'revisr_commits','',0),(130,1,'2014-10-24 15:21:21','0000-00-00 00:00:00','```bash\r\ncd ~/git/eg-libraries/\r\nandroid update lib-project --path .\r\nant clean\r\necho \"local.properties\" >> .gitignore\r\nant mapsforge-map-jar-create\r\nant mapsforge-map-jar-sign\r\ncp mapsforge-map-0.2.4.jar ../eg-main/libs/\r\n\r\ncd ~/git/eg-main/\r\nandroid update project --name \"eg-main\" --library ../eg-libraries/ --path .\r\nant clean\r\necho \"local.properties\" >> .gitignore\r\n\r\ncd ~/git/eg-databasesync/\r\nandroid update project --name \"eg-databasesync\" --library ../eg-libraries/ --path .\r\nant clean\r\necho \"local.properties\" >> .gitignore\r\n```\r\n\r\n[1] <http://www.androidengineer.com/2010/06/using-ant-to-automate-building-android.html>','android ant','','draft','open','open','','','','','2014-10-24 15:21:21','2014-10-24 13:21:21','',0,'http://blog.gingerik.nl/?p=130',0,'post','',0),(131,1,'2014-10-24 14:21:44','2014-10-24 12:21:44','```bash\r\nandroid update project --name \"com.easygis.main\" --library ../eg-libraries/ --path .\r\n```','android ant','','inherit','open','open','','130-revision-v1','','','2014-10-24 14:21:44','2014-10-24 12:21:44','',130,'http://blog.gingerik.nl/?p=131',0,'revision','',0),(132,1,'2014-10-24 14:24:36','2014-10-24 12:24:36','```bash\r\ncd ~/git/eg-libraries/\r\nandroid update lib-project --path .\r\n\r\ncd ~/git/eg-main/\r\nandroid update project --name \"com.easygis.main\" --library ../eg-libraries/ --path .\r\n```','android ant','','inherit','open','open','','130-revision-v1','','','2014-10-24 14:24:36','2014-10-24 12:24:36','',130,'http://blog.gingerik.nl/?p=132',0,'revision','',0),(133,1,'2014-10-24 15:20:31','2014-10-24 13:20:31','```bash\r\ncd ~/git/eg-libraries/\r\nandroid update lib-project --path .\r\nant clean\r\necho \"local.properties\" >> .gitignore\r\nant mapsforge-map-jar-create\r\nant mapsforge-map-jar-sign\r\ncp mapsforge-map-0.2.4.jar ../eg-main/libs/\r\n\r\ncd ~/git/eg-main/\r\nandroid update project --name \"eg-main\" --library ../eg-libraries/ --path .\r\nant clean\r\necho \"local.properties\" >> .gitignore\r\n\r\ncd ~/git/eg-databasesync/\r\nandroid update project --name \"eg-databasesync\" --library ../eg-libraries/ --path .\r\nant clean\r\necho \"local.properties\" >> .gitignore\r\n```','android ant','','inherit','open','open','','130-revision-v1','','','2014-10-24 15:20:31','2014-10-24 13:20:31','',130,'http://blog.gingerik.nl/?p=133',0,'revision','',0),(134,1,'2014-10-24 15:21:21','2014-10-24 13:21:21','```bash\r\ncd ~/git/eg-libraries/\r\nandroid update lib-project --path .\r\nant clean\r\necho \"local.properties\" >> .gitignore\r\nant mapsforge-map-jar-create\r\nant mapsforge-map-jar-sign\r\ncp mapsforge-map-0.2.4.jar ../eg-main/libs/\r\n\r\ncd ~/git/eg-main/\r\nandroid update project --name \"eg-main\" --library ../eg-libraries/ --path .\r\nant clean\r\necho \"local.properties\" >> .gitignore\r\n\r\ncd ~/git/eg-databasesync/\r\nandroid update project --name \"eg-databasesync\" --library ../eg-libraries/ --path .\r\nant clean\r\necho \"local.properties\" >> .gitignore\r\n```\r\n\r\n[1] <http://www.androidengineer.com/2010/06/using-ant-to-automate-building-android.html>','android ant','','inherit','open','open','','130-revision-v1','','','2014-10-24 15:21:21','2014-10-24 13:21:21','',130,'http://blog.gingerik.nl/?p=134',0,'revision','',0),(135,0,'2014-10-25 02:47:46','2014-10-25 00:47:46','','Daily backup - October 25, 2014','','publish','open','open','','daily-backup-october-25-2014','','','2014-10-25 02:47:46','2014-10-25 00:47:46','',0,'http://blog.gingerik.nl/?revisr_commits=daily-backup-october-25-2014',0,'revisr_commits','',0),(136,1,'2014-10-25 17:56:57','2014-10-25 15:56:57','Debian Wheezy comes with Java 6 by default.\r\nTo install Java 7 _and_ set it as the default Java version, run\r\n\r\n```bash\r\nsudo apt-get install -y openjdk-7-jre\r\nsudo update-alternatives --set java /usr/lib/jvm/java-7-openjdk-amd64/jre/bin/java\r\n```','Install Java 7 on Wheezy','','publish','open','open','','install-java-7-on-wheezy','','','2014-10-25 17:57:26','2014-10-25 15:57:26','',0,'http://blog.gingerik.nl/?p=136',0,'post','',0),(137,1,'2014-10-25 17:55:31','2014-10-25 15:55:31','Debian Wheezy comes with Java 6 by default.\r\nTo install Java 7 _and_ set it is as the default java version, run\r\n\r\n```bash\r\nsudo apt-get install -y openjdk-7-jre\r\nsudo update-alternatives --set java /usr/lib/jvm/java-7-openjdk-amd64/jre/bin/java\r\n```','Install Java 7 on Wheezy','','inherit','open','open','','136-revision-v1','','','2014-10-25 17:55:31','2014-10-25 15:55:31','',136,'http://blog.gingerik.nl/?p=137',0,'revision','',0),(138,1,'2014-10-25 17:56:57','2014-10-25 15:56:57','Debian Wheezy comes with Java 6 by default.\r\nTo install Java 7 _and_ set it as the default Java version, run\r\n\r\n```bash\r\nsudo apt-get install -y openjdk-7-jre\r\nsudo update-alternatives --set java /usr/lib/jvm/java-7-openjdk-amd64/jre/bin/java\r\n```','Install Java 7 on Wheezy','','inherit','open','open','','136-revision-v1','','','2014-10-25 17:56:57','2014-10-25 15:56:57','',136,'http://blog.gingerik.nl/?p=138',0,'revision','',0),(139,1,'2014-10-25 18:13:29','2014-10-25 16:13:29','```bash\r\n# list all vm\'s\r\nvboxmanage list [-l] vms\r\n\r\n# list all active vm\'s\r\nvboxmanage list [-l] runningvms\r\n\r\n# run a specific vm\r\nvboxmanage startvm \"<vm-name-or-uid>\"\r\n\r\n# pause a specific vm\r\nvboxmanage controlvm \"<vm-name-or-uid>\" pause\r\n\r\n# resume a paused vm\r\nvboxmanage controlvm \"<vm-name-or-uid>\" resume\r\n\r\n# restart a specific vm\r\nvboxmanage controlvm \"<vm-name-or-uid>\" reset\r\n\r\n# shutdown a specific vm\r\nvboxmanage controlvm \"<vm-name-or-uid>\" poweroff\r\n\r\n# stop a vm and save its state\r\nvboxmanage controlvm \"<vm-name-or-uid>\" savestate\r\n\r\n# make snapshot\r\nvboxmanage snapshot \"<vm-name-or-uid>\" take <name-of-snapshot>\r\n\r\n# revert to a specific snapshot\r\nvboxmanage snapshot \"<vm-name-or-uid>\" restore <name-of-snapshot>\r\n```','VirtualBox','','publish','open','open','','virtualbox','','','2014-10-29 13:50:05','2014-10-29 12:50:05','',0,'http://blog.gingerik.nl/?p=139',0,'post','',0),(140,1,'2014-10-25 18:03:27','2014-10-25 16:03:27','```bash\r\n# list all vm\'s\r\nvboxmanage list vms\r\n\r\n# list all active vm\'s\r\nvboxmanage list runningvms\r\n```','VirtualBox','','inherit','open','open','','139-revision-v1','','','2014-10-25 18:03:27','2014-10-25 16:03:27','',139,'http://blog.gingerik.nl/?p=140',0,'revision','',0),(141,1,'2014-10-25 18:09:36','2014-10-25 16:09:36','```bash\r\n# list all vm\'s\r\nvboxmanage list [-l] vms\r\n\r\n# list all active vm\'s\r\nvboxmanage list [-l] runningvms\r\n\r\n# run a specific vm\r\nvboxmanage startvm \"<vm-name-or-uid>\"\r\n\r\n# pause a specific vm\r\nvboxmanage controlvm \"<vm-name-or-uid>\" pause\r\n\r\n# resume a paused vm\r\nvboxmanage controlvm \"<vm-name-or-uid>\" resume\r\n\r\n# restart a specific vm\r\nvboxmanage controlvm \"<vm-name-or-uid>\" reset\r\n\r\n# shutdown a specific vm\r\nvboxmanage controlvm \"<vm-name-or-uid>\" poweroff\r\n\r\n# stop a vm and save its state\r\nVBoxManage controlvm \"<vm-name-or-uid>\" savestate\r\n```','VirtualBox','','inherit','open','open','','139-revision-v1','','','2014-10-25 18:09:36','2014-10-25 16:09:36','',139,'http://blog.gingerik.nl/?p=141',0,'revision','',0),(142,1,'2014-10-25 18:13:29','2014-10-25 16:13:29','```bash\r\n# list all vm\'s\r\nvboxmanage list [-l] vms\r\n\r\n# list all active vm\'s\r\nvboxmanage list [-l] runningvms\r\n\r\n# run a specific vm\r\nvboxmanage startvm \"<vm-name-or-uid>\"\r\n\r\n# pause a specific vm\r\nvboxmanage controlvm \"<vm-name-or-uid>\" pause\r\n\r\n# resume a paused vm\r\nvboxmanage controlvm \"<vm-name-or-uid>\" resume\r\n\r\n# restart a specific vm\r\nvboxmanage controlvm \"<vm-name-or-uid>\" reset\r\n\r\n# shutdown a specific vm\r\nvboxmanage controlvm \"<vm-name-or-uid>\" poweroff\r\n\r\n# stop a vm and save its state\r\nvboxmanage controlvm \"<vm-name-or-uid>\" savestate\r\n```','VirtualBox','','inherit','open','open','','139-revision-v1','','','2014-10-25 18:13:29','2014-10-25 16:13:29','',139,'http://blog.gingerik.nl/?p=142',0,'revision','',0),(143,1,'2014-10-25 18:18:56','2014-10-25 16:18:56','See [1].\r\n\r\n```\r\nsudo mkdir /usr/local/share/ca-certificates/your-organisation\r\nsudo cp certificate1.crt /usr/local/share/ca-certificates/your-organisation\r\nsudo cp certificate2.crt /usr/local/share/ca-certificates/your-organisation\r\nsudo update-ca-certificates\r\n```\r\n\r\n[1] http://brightbox.com/blog/2014/03/04/add-cacert-ubuntu-debian/','SSL Certificates','','inherit','open','open','','123-revision-v1','','','2014-10-25 18:18:56','2014-10-25 16:18:56','',123,'http://blog.gingerik.nl/?p=143',0,'revision','',0),(144,1,'2014-10-25 18:20:20','2014-10-25 16:20:20','Add your own, or non-default SSL certificates (e.g. [CACert](http://cacert.org/)) [1].\r\n\r\n```\r\nsudo mkdir /usr/local/share/ca-certificates/your-organisation\r\nsudo cp certificate1.crt /usr/local/share/ca-certificates/your-organisation\r\nsudo cp certificate2.crt /usr/local/share/ca-certificates/your-organisation\r\nsudo update-ca-certificates\r\n```\r\n\r\n[1] http://brightbox.com/blog/2014/03/04/add-cacert-ubuntu-debian/','SSL Certificates','','inherit','open','open','','123-revision-v1','','','2014-10-25 18:20:20','2014-10-25 16:20:20','',123,'http://blog.gingerik.nl/?p=144',0,'revision','',0),(145,1,'2014-10-25 18:22:08','2014-10-25 16:22:08','```bash\r\n#!/bin/sh\r\n\r\nif [ ! -s lint ]; then\r\n  grunt lint:src | grep \'\\(/home/erik\\|^  \\)\' | sed \'s|.*\\(/home/erik.*\\.js\\).*|\\1|\' > lint\r\nfi\r\n\r\ncat lint | while read line; do\r\n  echo $line | grep \'/home/erik\' > /dev/null\r\n  if [ $? -eq 0 ]; then\r\n    file=$line\r\n    echo \"Processing \\033[1m$file\\033[0m\"\r\n  else\r\n    lineNumber=$(echo $line | sed -n \'s|.*\\[#\\([0-9]\\+\\)\\].*|\\1|p\')\r\n    correctIndentation=$(echo $line | sed -n \'s|.*{\\([0-9]\\+\\)[, 0-9]\\+}.*|\\1|p\')\r\n    currentIndentation=$(echo $line | sed -n \'s|.*but got \\([0-9]\\+\\).*|\\1|p\')\r\n    #echo \"$lineNumber | $currentIndentation -> $correctIndentation\"\r\n    if [ -z \"$lineNumber\" ]; then\r\n      echo -e \"FAILED ON LINENUMBER\\n$line\"\r\n      exit 1\r\n    fi\r\n    if [ -z \"$correctIndentation\" ]; then\r\n      echo -e \"FAILED ON INDENTATION\\n$line\"\r\n      exit 1\r\n    fi\r\n    spaces=$(head -c ${correctIndentation} < /dev/zero | tr \'\\0\' \' \')\r\n    sed -i \"${lineNumber}s/^[ ]\\+/${spaces}/\" ${file}\r\n  fi\r\ndone\r\n```','gjslint','','inherit','open','open','','126-revision-v1','','','2014-10-25 18:22:08','2014-10-25 16:22:08','',126,'http://blog.gingerik.nl/?p=145',0,'revision','',0),(146,0,'2014-10-26 03:10:10','2014-10-26 02:10:10','','Daily backup - October 26, 2014','','publish','open','open','','daily-backup-october-26-2014','','','2014-10-26 03:10:10','2014-10-26 02:10:10','',0,'http://blog.gingerik.nl/?revisr_commits=daily-backup-october-26-2014',0,'revisr_commits','',0),(147,0,'2014-10-27 16:18:02','2014-10-27 15:18:02','','Daily backup - October 27, 2014','','publish','open','open','','daily-backup-october-27-2014','','','2014-10-27 16:18:02','2014-10-27 15:18:02','',0,'http://blog.gingerik.nl/?revisr_commits=daily-backup-october-27-2014',0,'revisr_commits','',0),(148,0,'2014-10-28 03:15:36','2014-10-28 02:15:36','','Daily backup - October 28, 2014','','publish','open','open','','daily-backup-october-28-2014','','','2014-10-28 03:15:36','2014-10-28 02:15:36','',0,'http://blog.gingerik.nl/?revisr_commits=daily-backup-october-28-2014',0,'revisr_commits','',0),(149,0,'2014-10-29 00:54:00','2014-10-28 23:54:00','','Daily backup - October 28, 2014','','publish','open','open','','daily-backup-october-28-2014-2','','','2014-10-29 00:54:00','2014-10-28 23:54:00','',0,'http://blog.gingerik.nl/?revisr_commits=daily-backup-october-28-2014-2',0,'revisr_commits','',0),(151,1,'2014-10-29 13:48:34','2014-10-29 12:48:34','```bash\n# list all vm\'s\nvboxmanage list [-l] vms\n\n# list all active vm\'s\nvboxmanage list [-l] runningvms\n\n# run a specific vm\nvboxmanage startvm \"<vm-name-or-uid>\"\n\n# pause a specific vm\nvboxmanage controlvm \"<vm-name-or-uid>\" pause\n\n# resume a paused vm\nvboxmanage controlvm \"<vm-name-or-uid>\" resume\n\n# restart a specific vm\nvboxmanage controlvm \"<vm-name-or-uid>\" reset\n\n# shutdown a specific vm\nvboxmanage controlvm \"<vm-name-or-uid>\" poweroff\n\n# stop a vm and save its state\nvboxmanage controlvm \"<vm-name-or-uid>\" savestate\n\n# revert to a specific snapshot\nVBoxManage snapshot $VM restore\n```','VirtualBox','','inherit','open','open','','139-autosave-v1','','','2014-10-29 13:48:34','2014-10-29 12:48:34','',139,'http://blog.gingerik.nl/?p=151',0,'revision','',0),(152,1,'2014-10-29 13:49:11','2014-10-29 12:49:11','```bash\r\n# list all vm\'s\r\nvboxmanage list [-l] vms\r\n\r\n# list all active vm\'s\r\nvboxmanage list [-l] runningvms\r\n\r\n# run a specific vm\r\nvboxmanage startvm \"<vm-name-or-uid>\"\r\n\r\n# pause a specific vm\r\nvboxmanage controlvm \"<vm-name-or-uid>\" pause\r\n\r\n# resume a paused vm\r\nvboxmanage controlvm \"<vm-name-or-uid>\" resume\r\n\r\n# restart a specific vm\r\nvboxmanage controlvm \"<vm-name-or-uid>\" reset\r\n\r\n# shutdown a specific vm\r\nvboxmanage controlvm \"<vm-name-or-uid>\" poweroff\r\n\r\n# stop a vm and save its state\r\nvboxmanage controlvm \"<vm-name-or-uid>\" savestate\r\n\r\n# make snapshot\r\nvboxmanage snapshot \"<vm-name-or-uid>\" make <name-of-snapshot>\r\n\r\n# revert to a specific snapshot\r\nvboxmanage snapshot \"<vm-name-or-uid>\" restore <name-of-snapshot>\r\n```','VirtualBox','','inherit','open','open','','139-revision-v1','','','2014-10-29 13:49:11','2014-10-29 12:49:11','',139,'http://blog.gingerik.nl/?p=152',0,'revision','',0),(153,1,'2014-10-29 13:50:05','2014-10-29 12:50:05','```bash\r\n# list all vm\'s\r\nvboxmanage list [-l] vms\r\n\r\n# list all active vm\'s\r\nvboxmanage list [-l] runningvms\r\n\r\n# run a specific vm\r\nvboxmanage startvm \"<vm-name-or-uid>\"\r\n\r\n# pause a specific vm\r\nvboxmanage controlvm \"<vm-name-or-uid>\" pause\r\n\r\n# resume a paused vm\r\nvboxmanage controlvm \"<vm-name-or-uid>\" resume\r\n\r\n# restart a specific vm\r\nvboxmanage controlvm \"<vm-name-or-uid>\" reset\r\n\r\n# shutdown a specific vm\r\nvboxmanage controlvm \"<vm-name-or-uid>\" poweroff\r\n\r\n# stop a vm and save its state\r\nvboxmanage controlvm \"<vm-name-or-uid>\" savestate\r\n\r\n# make snapshot\r\nvboxmanage snapshot \"<vm-name-or-uid>\" take <name-of-snapshot>\r\n\r\n# revert to a specific snapshot\r\nvboxmanage snapshot \"<vm-name-or-uid>\" restore <name-of-snapshot>\r\n```','VirtualBox','','inherit','open','open','','139-revision-v1','','','2014-10-29 13:50:05','2014-10-29 12:50:05','',139,'http://blog.gingerik.nl/?p=153',0,'revision','',0),(154,0,'2014-10-30 06:34:43','2014-10-30 05:34:43','','Daily backup - October 30, 2014','','publish','open','open','','daily-backup-october-30-2014','','','2014-10-30 06:34:43','2014-10-30 05:34:43','',0,'http://blog.gingerik.nl/?revisr_commits=daily-backup-october-30-2014',0,'revisr_commits','',0),(155,0,'2014-10-31 02:23:40','2014-10-31 01:23:40','','Daily backup - October 31, 2014','','publish','open','open','','daily-backup-october-31-2014','','','2014-10-31 02:23:40','2014-10-31 01:23:40','',0,'http://blog.gingerik.nl/?revisr_commits=daily-backup-october-31-2014',0,'revisr_commits','',0),(156,0,'2014-11-01 11:16:46','2014-11-01 10:16:46','','Daily backup - November 1, 2014','','publish','open','open','','daily-backup-november-1-2014','','','2014-11-01 11:16:46','2014-11-01 10:16:46','',0,'http://blog.gingerik.nl/?revisr_commits=daily-backup-november-1-2014',0,'revisr_commits','',0),(157,0,'2014-11-02 01:16:35','2014-11-02 00:16:35','','Daily backup - November 2, 2014','','publish','open','open','','daily-backup-november-2-2014','','','2014-11-02 01:16:35','2014-11-02 00:16:35','',0,'http://blog.gingerik.nl/?revisr_commits=daily-backup-november-2-2014',0,'revisr_commits','',0),(158,0,'2014-11-02 23:54:47','2014-11-02 22:54:47','','Daily backup - November 2, 2014','','publish','open','open','','daily-backup-november-2-2014-2','','','2014-11-02 23:54:47','2014-11-02 22:54:47','',0,'http://blog.gingerik.nl/?revisr_commits=daily-backup-november-2-2014-2',0,'revisr_commits','',0),(159,0,'2014-11-04 00:17:27','2014-11-03 23:17:27','','Daily backup - November 3, 2014','','publish','open','open','','daily-backup-november-3-2014','','','2014-11-04 00:17:27','2014-11-03 23:17:27','',0,'http://blog.gingerik.nl/?revisr_commits=daily-backup-november-3-2014',0,'revisr_commits','',0),(160,0,'2014-11-05 00:37:12','2014-11-04 23:37:12','','Daily backup - November 4, 2014','','publish','open','open','','daily-backup-november-4-2014','','','2014-11-05 00:37:12','2014-11-04 23:37:12','',0,'http://blog.gingerik.nl/?revisr_commits=daily-backup-november-4-2014',0,'revisr_commits','',0),(161,0,'2014-11-06 00:40:41','2014-11-05 23:40:41','','Daily backup - November 5, 2014','','publish','open','open','','daily-backup-november-5-2014','','','2014-11-06 00:40:41','2014-11-05 23:40:41','',0,'http://blog.gingerik.nl/?revisr_commits=daily-backup-november-5-2014',0,'revisr_commits','',0),(162,0,'2014-11-07 00:06:09','2014-11-06 23:06:09','','Daily backup - November 6, 2014','','publish','open','open','','daily-backup-november-6-2014','','','2014-11-07 00:06:09','2014-11-06 23:06:09','',0,'http://blog.gingerik.nl/?revisr_commits=daily-backup-november-6-2014',0,'revisr_commits','',0),(164,0,'2014-11-08 00:23:35','2014-11-07 23:23:35','','Daily backup - November 7, 2014','','publish','open','open','','daily-backup-november-7-2014','','','2014-11-08 00:23:35','2014-11-07 23:23:35','',0,'http://blog.gingerik.nl/?revisr_commits=daily-backup-november-7-2014',0,'revisr_commits','',0),(165,0,'2014-11-09 03:50:48','2014-11-09 02:50:48','','Daily backup - November 9, 2014','','publish','open','open','','daily-backup-november-9-2014','','','2014-11-09 03:50:48','2014-11-09 02:50:48','',0,'http://blog.gingerik.nl/?revisr_commits=daily-backup-november-9-2014',0,'revisr_commits','',0),(166,0,'2014-11-10 06:31:30','2014-11-10 05:31:30','','Daily backup - November 10, 2014','','publish','open','open','','daily-backup-november-10-2014','','','2014-11-10 06:31:30','2014-11-10 05:31:30','',0,'http://blog.gingerik.nl/?revisr_commits=daily-backup-november-10-2014',0,'revisr_commits','',0),(167,0,'2014-11-11 00:24:08','2014-11-10 23:24:08','','Daily backup - November 10, 2014','','publish','open','open','','daily-backup-november-10-2014-2','','','2014-11-11 00:24:08','2014-11-10 23:24:08','',0,'http://blog.gingerik.nl/?revisr_commits=daily-backup-november-10-2014-2',0,'revisr_commits','',0),(168,0,'2014-11-12 03:51:29','2014-11-12 02:51:29','','Daily backup - November 12, 2014','','publish','open','open','','daily-backup-november-12-2014','','','2014-11-12 03:51:29','2014-11-12 02:51:29','',0,'http://blog.gingerik.nl/?revisr_commits=daily-backup-november-12-2014',0,'revisr_commits','',0),(169,1,'2014-11-12 16:45:06','0000-00-00 00:00:00','**method unavailable**\r\n\r\nAs of Debian Jessie, Nautilus has removed some of its most apreciated functionalities: e.g. split screen (F3) and type-ahead. Time to switch to another file manager.\r\n\r\nThis is how to install Marlin[1]:\r\n\r\n```bash\r\n# add the sources\r\necho -e \"deb http://hadret.rootnode.net/debian/ experimental main\\n\\\r\ndeb-src http://hadret.rootnode.net/debian/ experimental main\" | sudo tee --append /etc/apt/sources.list\r\n\r\n# add the key\r\nwget -O - http://hadret.rootnode.net/debian/duckbill.key | apt-key add -\r\n\r\n# install\r\nsudo apt-get update\r\nsudo apt-get install marlin\r\n```\r\n\r\n[1] <http://blog.desdelinux.net/instala-marlin-en-debian-testing/>','Replacing Nautilus with Marlin','','draft','open','open','','','','','2014-11-12 16:45:06','2014-11-12 15:45:06','',0,'http://blog.gingerik.nl/?p=169',0,'post','',0),(170,1,'2014-11-12 14:46:25','2014-11-12 13:46:25','As of Debian Jessie, Nautilus has removed some of its most apreciated functionalities: e.g. split screen (F3) and type-ahead. Time to switch to another file manager.\r\n\r\nThis is how to install Marlin[1]:\r\n\r\n```bash\r\n# add the sources\r\necho -e \"deb http://hadret.rootnode.net/debian/ experimental main\\n\\\r\ndeb-src http://hadret.rootnode.net/debian/ experimental main\" | sudo tee --append /etc/apt/sources.list\r\n\r\n# add the key\r\nwget -O - http://hadret.rootnode.net/debian/duckbill.key | apt-key add -\r\n\r\n# install\r\nsudo apt-get update\r\nsudo apt-get install marlin\r\n```\r\n\r\n[1] <http://blog.desdelinux.net/instala-marlin-en-debian-testing/>','Replacing Nautilus with Marlin','','inherit','open','open','','169-revision-v1','','','2014-11-12 14:46:25','2014-11-12 13:46:25','',169,'http://blog.gingerik.nl/?p=170',0,'revision','',0),(171,1,'2014-11-12 16:45:01','2014-11-12 15:45:01','**method unavailable**\r\n\r\nAs of Debian Jessie, Nautilus has removed some of its most apreciated functionalities: e.g. split screen (F3) and type-ahead. Time to switch to another file manager.\r\n\r\nThis is how to install Marlin[1]:\r\n\r\n```bash\r\n# add the sources\r\necho -e \"deb http://hadret.rootnode.net/debian/ experimental main\\n\\\r\ndeb-src http://hadret.rootnode.net/debian/ experimental main\" | sudo tee --append /etc/apt/sources.list\r\n\r\n# add the key\r\nwget -O - http://hadret.rootnode.net/debian/duckbill.key | apt-key add -\r\n\r\n# install\r\nsudo apt-get update\r\nsudo apt-get install marlin\r\n```\r\n\r\n[1] <http://blog.desdelinux.net/instala-marlin-en-debian-testing/>','Replacing Nautilus with Marlin','','inherit','open','open','','169-revision-v1','','','2014-11-12 16:45:01','2014-11-12 15:45:01','',169,'http://blog.gingerik.nl/?p=171',0,'revision','',0),(172,0,'2014-11-13 03:49:59','2014-11-13 02:49:59','','Daily backup - November 13, 2014','','publish','open','open','','daily-backup-november-13-2014','','','2014-11-13 03:49:59','2014-11-13 02:49:59','',0,'http://blog.gingerik.nl/?revisr_commits=daily-backup-november-13-2014',0,'revisr_commits','',0),(173,0,'2014-11-14 05:47:54','2014-11-14 04:47:54','','Daily backup - November 14, 2014','','publish','open','open','','daily-backup-november-14-2014','','','2014-11-14 05:47:54','2014-11-14 04:47:54','',0,'http://blog.gingerik.nl/?revisr_commits=daily-backup-november-14-2014',0,'revisr_commits','',0),(174,1,'2014-11-14 09:46:57','2014-11-14 08:46:57','_Note that your device needs to be **rooted** in order for this to work!_\r\n\r\n## Preparation\r\n\r\nFirstly, pull `SystemUI.apk` and the device-specific framework from your device.\r\n\r\n```bash\r\nadb shell cp /system/priv-app/SystemUI.apk /sdcard/\r\nadb shell cp /system/framework/framework-res.apk /sdcard/\r\nadb pull /sdcard/SystemUI.apk .\r\nadb pull /sdcard/framework-res.apk .\r\n```\r\n\r\n## Decompiling\r\n\r\nNext, download `apktool_2.0.0rc2.jar` from [1], set the correct framework and decompile[2] `SystemUI.apk`.\r\n\r\n```bash\r\nwget https://bitbucket.org/iBotPeaches/apktool/downloads/apktool_2.0.0rc2.jar\r\njava -jar apktool_2.0.0rc2.jar if framework-res.apk\r\njava -jar apktool_2.0.0rc2.jar d SystemUI.apk\r\n```\r\n\r\n## Modification\r\n\r\nNow modify the package[3]: search for `onsText` and update the `TextView`\'s appropriate attribute to `android:maxLength=\"0\"`.\r\n\r\n```bash\r\nsed -i \'/onsText/ s/maxLength=\"[0-9]\\+\"/maxLength=\"0\"/\' SystemUI/res/layout/status_bar.xml\r\n```\r\n\r\n## Recompiling\r\n\r\nRecompile the modified version while preserving the signature (using `-c`), which will allow you to replace the APK later on.\r\n\r\n```bash\r\njava -jar apktool_2.0.0rc2.jar b SystemUI -c\r\n```\r\n\r\n## Re-installation\r\n\r\nFinally, push the modified `SystemUI.apk` to the device and install it.\r\n\r\n```bash\r\nadb push SystemUI/dist/SystemUI.apk /sdcard/SystemUI.apk\r\nadb shell su -c \"mount -o remount,rw /system\"\r\nadb shell su -c \"cp /system/priv-app/SystemUI.apk /system/priv-app/SystemUI.apk.BAK\"\r\nadb shell su -c \"cp /system/priv-app/SystemUI.odex /system/priv-app/SystemUI.odex.BAK\"\r\nadb shell su -c \"cp /sdcard/SystemUI.apk /system/priv-app/SystemUI.apk\"\r\nadb shell su -c \"rm /system/priv-app/SystemUI.odex\"\r\nadb shell su -c \"chmod 644 /system/priv-app/SystemUI.apk\"\r\nadb shell su -c \"mount -o remount,ro /system\"\r\nadb shell su -c \"reboot\"\r\n```\r\n\r\n[1] <https://code.google.com/p/android-apktool/>  \r\n[2] <http://forum.xda-developers.com/showthread.php?t=1760133>  \r\n[3] <http://forum.xda-developers.com/showthread.php?t=2021796>  \r\n','Hide the carrier label on your Moto G','','inherit','open','open','','37-revision-v1','','','2014-11-14 09:46:57','2014-11-14 08:46:57','',37,'http://blog.gingerik.nl/?p=174',0,'revision','',0),(175,1,'2014-11-14 12:05:48','2014-11-14 11:05:48','How to fix (without `SystemUI.apk`) from recovery[1].\r\n\r\n```bash\r\nadb devices | grep -q recovery || echo \"Reboot into recovery first!\"\r\nsed -i -e \'$a\\\' ~/.android/adbkey.pub # ensure adbkey.pub ends with a newline\r\nadb push ~/.android/adbkey.pub /tmp/\r\nadb shell mount /data\r\nadb shell \"cat /tmp/adbkey.pub >> /data/misc/adb/adb_keys\"\r\nadb shell reboot\r\n```\r\n\r\n[1] <http://stackoverflow.com/questions/18011685/cant-connect-nexus-4-to-adb-unauthorized>','ADB: unauthorized','','publish','open','open','','adb-unauthorized','','','2014-11-14 12:07:50','2014-11-14 11:07:50','',0,'http://blog.gingerik.nl/?p=175',0,'post','',0),(176,1,'2014-11-14 11:43:28','2014-11-14 10:43:28','How to fix (without `SystemUI.apk`) from recovery.\r\n\r\n```bash\r\nadb devices | grep -q recovery || echo \"Reboot into recovery first!\"\r\nsed \'s/^\\n$/\\n/\' ~/.android/adbkey.pub\r\nadb push ~/.android/adbkey.pub /tmp/\r\ncat /tmp/adbkey.pub >> /data/misc/adb/adb_keys\r\n```\r\n\r\n[1] <http://stackoverflow.com/questions/18011685/cant-connect-nexus-4-to-adb-unauthorized>','ADB: unauthorized','','inherit','open','open','','175-revision-v1','','','2014-11-14 11:43:28','2014-11-14 10:43:28','',175,'http://blog.gingerik.nl/?p=176',0,'revision','',0),(177,1,'2014-11-14 11:43:35','2014-11-14 10:43:35','How to fix (without `SystemUI.apk`) from recovery[1].\r\n\r\n```bash\r\nadb devices | grep -q recovery || echo \"Reboot into recovery first!\"\r\nsed \'s/^\\n$/\\n/\' ~/.android/adbkey.pub\r\nadb push ~/.android/adbkey.pub /tmp/\r\ncat /tmp/adbkey.pub >> /data/misc/adb/adb_keys\r\n```\r\n\r\n[1] <http://stackoverflow.com/questions/18011685/cant-connect-nexus-4-to-adb-unauthorized>','ADB: unauthorized','','inherit','open','open','','175-revision-v1','','','2014-11-14 11:43:35','2014-11-14 10:43:35','',175,'http://blog.gingerik.nl/?p=177',0,'revision','',0),(178,1,'2014-11-14 11:43:58','2014-11-14 10:43:58','How to fix (without `SystemUI.apk`) from recovery[1].\r\n\r\n```bash\r\nadb devices | grep -q recovery || echo \"Reboot into recovery first!\"\r\nsed \'s/^\\n$/\\n/\' ~/.android/adbkey.pub # adbkey.pub must end with a \'\\n\'\r\nadb push ~/.android/adbkey.pub /tmp/\r\ncat /tmp/adbkey.pub >> /data/misc/adb/adb_keys\r\n```\r\n\r\n[1] <http://stackoverflow.com/questions/18011685/cant-connect-nexus-4-to-adb-unauthorized>','ADB: unauthorized','','inherit','open','open','','175-revision-v1','','','2014-11-14 11:43:58','2014-11-14 10:43:58','',175,'http://blog.gingerik.nl/?p=178',0,'revision','',0),(179,1,'2014-11-14 11:44:33','2014-11-14 10:44:33','How to fix (without `SystemUI.apk`) from recovery[1].\r\n\r\n```bash\r\nadb devices | grep -q recovery || echo \"Reboot into recovery first!\"\r\nsed \'s/^\\n$/\\n/\' ~/.android/adbkey.pub # adbkey.pub must end with a \'\\n\'\r\nadb push ~/.android/adbkey.pub /tmp/\r\nadb shell mount /data\r\nadb shell \"cat /tmp/adbkey.pub >> /data/misc/adb/adb_keys\"\r\n```\r\n\r\n[1] <http://stackoverflow.com/questions/18011685/cant-connect-nexus-4-to-adb-unauthorized>','ADB: unauthorized','','inherit','open','open','','175-revision-v1','','','2014-11-14 11:44:33','2014-11-14 10:44:33','',175,'http://blog.gingerik.nl/?p=179',0,'revision','',0),(180,1,'2014-11-14 12:01:50','2014-11-14 11:01:50','How to fix (without `SystemUI.apk`) from recovery[1].\r\n\r\n```bash\r\nadb devices | grep -q recovery || echo \"Reboot into recovery first!\"\r\nvim ~/.android/adbkey.pub # exit with \':wq\' as adbkey.pub must end with a \'\\n\'\r\nadb push ~/.android/adbkey.pub /tmp/\r\nadb shell mount /data\r\nadb shell \"cat /tmp/adbkey.pub >> /data/misc/adb/adb_keys\"\r\nadb shell reboot\r\n```\r\n\r\n[1] <http://stackoverflow.com/questions/18011685/cant-connect-nexus-4-to-adb-unauthorized>','ADB: unauthorized','','inherit','open','open','','175-revision-v1','','','2014-11-14 12:01:50','2014-11-14 11:01:50','',175,'http://blog.gingerik.nl/?p=180',0,'revision','',0),(181,1,'2014-11-14 12:04:34','2014-11-14 11:04:34','How to fix (without `SystemUI.apk`) from recovery[1].\r\n\r\n```bash\r\nadb devices | grep -q recovery || echo \"Reboot into recovery first!\"\r\nsed -i -e \'$a\\\' ~/.android/adbkey.pub # adbkey.pub must end with a \'\\n\'\r\nadb push ~/.android/adbkey.pub /tmp/\r\nadb shell mount /data\r\nadb shell \"cat /tmp/adbkey.pub >> /data/misc/adb/adb_keys\"\r\nadb shell reboot\r\n```\r\n\r\n[1] <http://stackoverflow.com/questions/18011685/cant-connect-nexus-4-to-adb-unauthorized>','ADB: unauthorized','','inherit','open','open','','175-revision-v1','','','2014-11-14 12:04:34','2014-11-14 11:04:34','',175,'http://blog.gingerik.nl/?p=181',0,'revision','',0),(182,1,'2014-11-14 12:07:29','2014-11-14 11:07:29','How to fix (without `SystemUI.apk`) from recovery[1].\r\n\r\n```bash\r\nadb devices | grep -q recovery || echo \"Reboot into recovery first!\"\r\nsed -i -e \'$a\\\' ~/.android/adbkey.pub # ensure adbkey.pub ends with a newline\r\nadb push ~/.android/adbkey.pub /tmp/\r\nadb shell mount /data\r\nadb shell \"cat /tmp/adbkey.pub >> /data/misc/adb/adb_keys\"\r\nadb shell reboot\r\n```\r\n\r\n[1] <http://stackoverflow.com/questions/18011685/cant-connect-nexus-4-to-adb-unauthorized>','ADB: unauthorized','','inherit','open','open','','175-autosave-v1','','','2014-11-14 12:07:29','2014-11-14 11:07:29','',175,'http://blog.gingerik.nl/?p=182',0,'revision','',0),(183,1,'2014-11-14 12:07:50','2014-11-14 11:07:50','How to fix (without `SystemUI.apk`) from recovery[1].\r\n\r\n```bash\r\nadb devices | grep -q recovery || echo \"Reboot into recovery first!\"\r\nsed -i -e \'$a\\\' ~/.android/adbkey.pub # ensure adbkey.pub ends with a newline\r\nadb push ~/.android/adbkey.pub /tmp/\r\nadb shell mount /data\r\nadb shell \"cat /tmp/adbkey.pub >> /data/misc/adb/adb_keys\"\r\nadb shell reboot\r\n```\r\n\r\n[1] <http://stackoverflow.com/questions/18011685/cant-connect-nexus-4-to-adb-unauthorized>','ADB: unauthorized','','inherit','open','open','','175-revision-v1','','','2014-11-14 12:07:50','2014-11-14 11:07:50','',175,'http://blog.gingerik.nl/?p=183',0,'revision','',0),(184,0,'2014-11-15 02:02:20','2014-11-15 01:02:20','','Daily backup - November 15, 2014','','publish','open','open','','daily-backup-november-15-2014','','','2014-11-15 02:02:20','2014-11-15 01:02:20','',0,'http://blog.gingerik.nl/?revisr_commits=daily-backup-november-15-2014',0,'revisr_commits','',0),(185,0,'2014-11-16 07:24:18','2014-11-16 06:24:18','','Daily backup - November 16, 2014','','publish','open','open','','daily-backup-november-16-2014','','','2014-11-16 07:24:18','2014-11-16 06:24:18','',0,'http://blog.gingerik.nl/?revisr_commits=daily-backup-november-16-2014',0,'revisr_commits','',0),(186,0,'2014-11-17 01:10:45','2014-11-17 00:10:45','','Daily backup - November 17, 2014','','publish','open','open','','daily-backup-november-17-2014','','','2014-11-17 01:10:45','2014-11-17 00:10:45','',0,'http://blog.gingerik.nl/?revisr_commits=daily-backup-november-17-2014',0,'revisr_commits','',0),(187,0,'2014-11-18 01:49:28','2014-11-18 00:49:28','','Daily backup - November 18, 2014','','publish','open','open','','daily-backup-november-18-2014','','','2014-11-18 01:49:28','2014-11-18 00:49:28','',0,'http://blog.gingerik.nl/?revisr_commits=daily-backup-november-18-2014',0,'revisr_commits','',0),(188,0,'2014-11-19 01:31:52','2014-11-19 00:31:52','','Daily backup - November 19, 2014','','publish','open','open','','daily-backup-november-19-2014','','','2014-11-19 01:31:52','2014-11-19 00:31:52','',0,'http://blog.gingerik.nl/?revisr_commits=daily-backup-november-19-2014',0,'revisr_commits','',0),(189,0,'2014-11-20 04:46:48','2014-11-20 03:46:48','','Daily backup - November 20, 2014','','publish','open','open','','daily-backup-november-20-2014','','','2014-11-20 04:46:48','2014-11-20 03:46:48','',0,'http://blog.gingerik.nl/?revisr_commits=daily-backup-november-20-2014',0,'revisr_commits','',0),(190,0,'2014-11-20 23:39:48','2014-11-20 22:39:48','','Daily backup - November 20, 2014','','publish','open','open','','daily-backup-november-20-2014-2','','','2014-11-20 23:39:48','2014-11-20 22:39:48','',0,'http://blog.gingerik.nl/?revisr_commits=daily-backup-november-20-2014-2',0,'revisr_commits','',0),(191,0,'2014-11-22 05:05:10','2014-11-22 04:05:10','','Daily backup - November 22, 2014','','publish','open','open','','daily-backup-november-22-2014','','','2014-11-22 05:05:10','2014-11-22 04:05:10','',0,'http://blog.gingerik.nl/?revisr_commits=daily-backup-november-22-2014',0,'revisr_commits','',0),(193,1,'2014-11-22 14:01:54','2014-11-22 13:01:54','','Update to 4.0.1','','publish','closed','closed','','update-to-4-0-1','','','2014-11-22 14:01:54','2014-11-22 13:01:54','',0,'http://blog.gingerik.nl/?post_type=revisr_commits&#038;p=193',0,'revisr_commits','',0),(194,0,'2014-11-23 00:23:58','2014-11-22 23:23:58','','Daily backup - November 22, 2014','','publish','open','open','','daily-backup-november-22-2014-2','','','2014-11-23 00:23:58','2014-11-22 23:23:58','',0,'http://blog.gingerik.nl/?revisr_commits=daily-backup-november-22-2014-2',0,'revisr_commits','',0),(195,0,'2014-11-24 06:23:19','2014-11-24 05:23:19','','Daily backup - November 24, 2014','','publish','open','open','','daily-backup-november-24-2014','','','2014-11-24 06:23:19','2014-11-24 05:23:19','',0,'http://blog.gingerik.nl/?revisr_commits=daily-backup-november-24-2014',0,'revisr_commits','',0),(196,0,'2014-11-25 05:03:29','2014-11-25 04:03:29','','Daily backup - November 25, 2014','','publish','open','open','','daily-backup-november-25-2014','','','2014-11-25 05:03:29','2014-11-25 04:03:29','',0,'http://blog.gingerik.nl/?revisr_commits=daily-backup-november-25-2014',0,'revisr_commits','',0),(197,0,'2014-11-26 06:44:46','2014-11-26 05:44:46','','Daily backup - November 26, 2014','','publish','open','open','','daily-backup-november-26-2014','','','2014-11-26 06:44:46','2014-11-26 05:44:46','',0,'http://blog.gingerik.nl/?revisr_commits=daily-backup-november-26-2014',0,'revisr_commits','',0),(198,0,'2014-12-21 15:44:21','2014-12-21 14:44:21','','Daily backup - December 21, 2014','','publish','open','open','','daily-backup-december-21-2014','','','2014-12-21 15:44:21','2014-12-21 14:44:21','',0,'http://blog.gingerik.nl/?revisr_commits=daily-backup-december-21-2014',0,'revisr_commits','',0),(199,0,'2014-12-22 14:01:06','2014-12-22 13:01:06','','Daily backup - December 22, 2014','','publish','open','open','','daily-backup-december-22-2014','','','2014-12-22 14:01:06','2014-12-22 13:01:06','',0,'http://blog.gingerik.nl/?revisr_commits=daily-backup-december-22-2014',0,'revisr_commits','',0),(200,0,'2014-12-23 06:33:16','2014-12-23 05:33:16','','Daily backup - December 23, 2014','','publish','open','open','','daily-backup-december-23-2014','','','2014-12-23 06:33:16','2014-12-23 05:33:16','',0,'http://blog.gingerik.nl/?revisr_commits=daily-backup-december-23-2014',0,'revisr_commits','',0),(201,0,'2014-12-24 14:14:45','2014-12-24 13:14:45','','Daily backup - December 24, 2014','','publish','open','open','','daily-backup-december-24-2014','','','2014-12-24 14:14:45','2014-12-24 13:14:45','',0,'http://blog.gingerik.nl/?revisr_commits=daily-backup-december-24-2014',0,'revisr_commits','',0),(202,0,'2014-12-25 16:14:49','2014-12-25 15:14:49','','Daily backup - December 25, 2014','','publish','open','open','','daily-backup-december-25-2014','','','2014-12-25 16:14:49','2014-12-25 15:14:49','',0,'http://blog.gingerik.nl/?revisr_commits=daily-backup-december-25-2014',0,'revisr_commits','',0),(203,0,'2014-12-26 20:16:40','2014-12-26 19:16:40','','Daily backup - December 26, 2014','','publish','open','open','','daily-backup-december-26-2014','','','2014-12-26 20:16:40','2014-12-26 19:16:40','',0,'http://blog.gingerik.nl/?revisr_commits=daily-backup-december-26-2014',0,'revisr_commits','',0),(204,0,'2014-12-27 11:36:32','2014-12-27 10:36:32','','Daily backup - December 27, 2014','','publish','open','open','','daily-backup-december-27-2014','','','2014-12-27 11:36:32','2014-12-27 10:36:32','',0,'http://blog.gingerik.nl/?revisr_commits=daily-backup-december-27-2014',0,'revisr_commits','',0),(205,0,'2014-12-27 23:43:57','2014-12-27 22:43:57','','Daily backup - December 27, 2014','','publish','open','open','','daily-backup-december-27-2014-2','','','2014-12-27 23:43:57','2014-12-27 22:43:57','',0,'http://blog.gingerik.nl/?revisr_commits=daily-backup-december-27-2014-2',0,'revisr_commits','',0),(206,0,'2014-12-29 00:29:47','2014-12-28 23:29:47','','Daily backup - December 28, 2014','','publish','open','open','','daily-backup-december-28-2014','','','2014-12-29 00:29:47','2014-12-28 23:29:47','',0,'http://blog.gingerik.nl/?revisr_commits=daily-backup-december-28-2014',0,'revisr_commits','',0),(208,1,'2014-12-29 11:51:00','2014-12-29 10:51:00','','Update to WordPress 4.1','','publish','closed','closed','','update-to-wordpress-4-1','','','2014-12-29 11:51:00','2014-12-29 10:51:00','',0,'http://blog.gingerik.nl/?post_type=revisr_commits&#038;p=208',0,'revisr_commits','',0),(209,1,'2014-12-29 11:58:07','2014-12-29 10:58:07','> My internet provider does not provide a static IP address. This post describes a simple functionality that makes the server send me a mail in case my IP address has changed (provided that _crontab_ is configured to send mails).\r\n\r\nCreate a file `/usr/local/sbin/ip-check` with the following contents:\r\n\r\n```bash\r\n#!/bin/sh\r\n\r\nip_file=\"/var/tmp/ip\"\r\ncurrent_ip=$(dig +short myip.opendns.com @resolver1.opendns.com)\r\nstored_ip=$(cat $ip_file 2>/dev/null)\r\n\r\nif [ \"$current_ip\" != \"$stored_ip\" ]; then\r\n	echo \"Stored new IP address: $current_ip\"\r\n	echo \"$current_ip\" > $ip_file\r\nfi\r\n```\r\n\r\nCheck whether the IP address has changed every 4 hours:\r\n\r\n```bash\r\necho \"0 */4   * * *	root	/usr/local/sbin/ip-check\" | sudo tee --append /etc/crontab\r\n```','Dynamic IP address','','publish','open','open','','dynamic-ip-address','','','2014-12-29 11:58:54','2014-12-29 10:58:54','',0,'http://blog.gingerik.nl/?p=209',0,'post','',0),(210,1,'2014-12-29 11:53:31','2014-12-29 10:53:31','`cat /usr/local/sbin/ip-check`\r\n\r\n```bash\r\n#!/bin/sh\r\n\r\nip_file=\"/var/tmp/ip\"\r\ncurrent_ip=$(dig +short myip.opendns.com @resolver1.opendns.com)\r\nstored_ip=$(cat $ip_file 2>/dev/null)\r\n\r\nif [ \"$current_ip\" != \"$stored_ip\" ]; then\r\n	echo \"Stored new IP address: $current_ip\"\r\n	echo \"$current_ip\" > $ip_file\r\nfi\r\n```','Dynamic IP address','','inherit','open','open','','209-revision-v1','','','2014-12-29 11:53:31','2014-12-29 10:53:31','',209,'http://blog.gingerik.nl/?p=210',0,'revision','',0),(211,1,'2014-12-29 11:57:10','2014-12-29 10:57:10','> My internet provider does not provide a static IP address. This post describes a simple functionality that make the server send me a mail in case my IP address has changed (provided that _crontab_ is configured to send mails_).\r\n\r\nCreate a file `/usr/local/sbin/ip-check` with the following contents:\r\n\r\n```bash\r\n#!/bin/sh\r\n\r\nip_file=\"/var/tmp/ip\"\r\ncurrent_ip=$(dig +short myip.opendns.com @resolver1.opendns.com)\r\nstored_ip=$(cat $ip_file 2>/dev/null)\r\n\r\nif [ \"$current_ip\" != \"$stored_ip\" ]; then\r\n	echo \"Stored new IP address: $current_ip\"\r\n	echo \"$current_ip\" > $ip_file\r\nfi\r\n```\r\n\r\nCheck whether the IP address has changed every 4 hours:\r\n\r\n```bash\r\necho \"0 */4   * * *	root	/usr/local/sbin/ip-check\" | sudo tee --append /etc/crontab\r\n```','Dynamic IP address','','inherit','open','open','','209-revision-v1','','','2014-12-29 11:57:10','2014-12-29 10:57:10','',209,'http://blog.gingerik.nl/?p=211',0,'revision','',0),(212,1,'2014-12-29 11:57:42','2014-12-29 10:57:42','> My internet provider does not provide a static IP address. This post describes a simple functionality that makes the server send me a mail in case my IP address has changed (provided that _crontab_ is configured to send mails).\r\n\r\nCreate a file `/usr/local/sbin/ip-check` with the following contents:\r\n\r\n```bash\r\n#!/bin/sh\r\n\r\nip_file=\"/var/tmp/ip\"\r\ncurrent_ip=$(dig +short myip.opendns.com @resolver1.opendns.com)\r\nstored_ip=$(cat $ip_file 2>/dev/null)\r\n\r\nif [ \"$current_ip\" != \"$stored_ip\" ]; then\r\n	echo \"Stored new IP address: $current_ip\"\r\n	echo \"$current_ip\" > $ip_file\r\nfi\r\n```\r\n\r\nCheck whether the IP address has changed every 4 hours:\r\n\r\n```bash\r\necho \"0 */4   * * *	root	/usr/local/sbin/ip-check\" | sudo tee --append /etc/crontab\r\n```','Dynamic IP address','','inherit','open','open','','209-revision-v1','','','2014-12-29 11:57:42','2014-12-29 10:57:42','',209,'http://blog.gingerik.nl/?p=212',0,'revision','',0),(213,1,'2013-07-07 09:32:37','2013-07-07 07:32:37','> `android-tools-adb` happened to contain a bug in a release to _Debian Sid_. This is how to downgrade a package in such a situation.\r\n\r\n```bash\r\n$ ls /var/cache/apt/archives/ | grep adb\r\nandroid-tools-adb_4.2.2+git20130218-3_amd64.deb\r\nandroid-tools-adb_4.2.2+git20130529-1_amd64.deb\r\nandroid-tools-adb_4.2.2+git20130529-2.1_amd64.deb\r\nandroid-tools-adb_4.2.2+git20130529-2_amd64.deb\r\nmobile-broadband-provider-info_20130506-1_all.deb\r\nxul-ext-adblock-plus_2.2.3-1_all.deb\r\nxul-ext-adblock-plus_2.2.4-1_all.deb\r\n$ sudo dpkg -i /var/cache/apt/archives/android-tools-adb_4.2.2+git20130529-2_amd64.debdpkg: warning: downgrading android-tools-adb from 4.2.2+git20130529-2.1 to 4.2.2+git20130529-2\r\n(Reading database ... 172252 files and directories currently installed.)\r\nPreparing to replace android-tools-adb 4.2.2+git20130529-2.1 (using .../android-tools-adb_4.2.2+git20130529-2_amd64.deb) ...\r\nUnpacking replacement android-tools-adb ...\r\nSetting up android-tools-adb (4.2.2+git20130529-2) ...\r\nProcessing triggers for man-db ...\r\n```','Downgrade Debian package','','publish','open','open','','downgrade-debian-package','','','2014-12-29 12:33:30','2014-12-29 11:33:30','',0,'http://blog.gingerik.nl/?p=213',0,'post','',0),(214,1,'2014-12-29 12:30:24','2014-12-29 11:30:24','> `android-tools-adb` happened to contain a bug in a release to _Debian Sid_. This is how to downgrade a package in such a situation.\r\n\r\n```bash\r\n$ ls /var/cache/apt/archives/ | grep adb\r\nandroid-tools-adb_4.2.2+git20130218-3_amd64.deb\r\nandroid-tools-adb_4.2.2+git20130529-1_amd64.deb\r\nandroid-tools-adb_4.2.2+git20130529-2.1_amd64.deb\r\nandroid-tools-adb_4.2.2+git20130529-2_amd64.deb\r\nmobile-broadband-provider-info_20130506-1_all.deb\r\nxul-ext-adblock-plus_2.2.3-1_all.deb\r\nxul-ext-adblock-plus_2.2.4-1_all.deb\r\n$ sudo dpkg -i /var/cache/apt/archives/android-tools-adb_4.2.2+git20130529-2_amd64.debdpkg: warning: downgrading android-tools-adb from 4.2.2+git20130529-2.1 to 4.2.2+git20130529-2\r\n(Reading database ... 172252 files and directories currently installed.)\r\nPreparing to replace android-tools-adb 4.2.2+git20130529-2.1 (using .../android-tools-adb_4.2.2+git20130529-2_amd64.deb) ...\r\nUnpacking replacement android-tools-adb ...\r\nSetting up android-tools-adb (4.2.2+git20130529-2) ...\r\nProcessing triggers for man-db ...\r\n```','Downgrade Debian package','','inherit','open','open','','213-revision-v1','','','2014-12-29 12:30:24','2014-12-29 11:30:24','',213,'http://blog.gingerik.nl/?p=214',0,'revision','',0),(215,0,'2014-12-30 07:18:04','2014-12-30 06:18:04','','Daily backup - December 30, 2014','','publish','open','open','','daily-backup-december-30-2014','','','2014-12-30 07:18:04','2014-12-30 06:18:04','',0,'http://blog.gingerik.nl/?p=215',0,'revisr_commits','',0),(216,0,'2014-12-31 01:40:41','2014-12-31 00:40:41','','Daily backup - December 31, 2014','','publish','open','open','','daily-backup-december-31-2014','','','2014-12-31 01:40:41','2014-12-31 00:40:41','',0,'http://blog.gingerik.nl/?p=216',0,'revisr_commits','',0),(217,0,'2015-01-01 01:27:59','2015-01-01 00:27:59','','Daily backup - January 1, 2015','','publish','open','open','','daily-backup-january-1-2015','','','2015-01-01 01:27:59','2015-01-01 00:27:59','',0,'http://blog.gingerik.nl/?p=217',0,'revisr_commits','',0),(218,0,'2015-01-01 23:56:26','2015-01-01 22:56:26','','Daily backup - January 1, 2015','','publish','open','open','','daily-backup-january-1-2015-2','','','2015-01-01 23:56:26','2015-01-01 22:56:26','',0,'http://blog.gingerik.nl/?p=218',0,'revisr_commits','',0),(219,0,'2015-01-03 00:33:10','2015-01-02 23:33:10','','Daily backup - January 2, 2015','','publish','open','open','','daily-backup-january-2-2015','','','2015-01-03 00:33:10','2015-01-02 23:33:10','',0,'http://blog.gingerik.nl/?p=219',0,'revisr_commits','',0),(220,0,'2015-01-03 23:53:48','2015-01-03 22:53:48','','Daily backup - January 3, 2015','','publish','open','open','','daily-backup-january-3-2015','','','2015-01-03 23:53:48','2015-01-03 22:53:48','',0,'http://blog.gingerik.nl/?p=220',0,'revisr_commits','',0),(221,0,'2015-01-05 11:17:20','2015-01-05 10:17:20','','Daily backup - January 5, 2015','','publish','open','open','','daily-backup-january-5-2015','','','2015-01-05 11:17:20','2015-01-05 10:17:20','',0,'http://blog.gingerik.nl/?p=221',0,'revisr_commits','',0),(222,0,'2015-01-06 00:25:04','2015-01-05 23:25:04','','Daily backup - January 5, 2015','','publish','open','open','','daily-backup-january-5-2015-2','','','2015-01-06 00:25:04','2015-01-05 23:25:04','',0,'http://blog.gingerik.nl/?p=222',0,'revisr_commits','',0),(223,0,'2015-01-06 23:55:17','2015-01-06 22:55:17','','Daily backup - January 6, 2015','','publish','open','open','','daily-backup-january-6-2015','','','2015-01-06 23:55:17','2015-01-06 22:55:17','',0,'http://blog.gingerik.nl/?p=223',0,'revisr_commits','',0),(225,1,'2015-01-07 14:06:04','2015-01-07 13:06:04','','Update revisr','','publish','closed','closed','','update-revisr','','','2015-01-07 14:06:04','2015-01-07 13:06:04','',0,'http://blog.gingerik.nl/?post_type=revisr_commits&#038;p=225',0,'revisr_commits','',0),(226,1,'2015-01-07 14:11:43','0000-00-00 00:00:00','You\'ll need an offical MS Office CD for this.\n\n```bash\nsudo apt-get install playonlinux\n```','MS Office','','draft','open','open','','','','','2015-01-07 14:11:43','2015-01-07 13:11:43','',0,'http://blog.gingerik.nl/?p=226',0,'post','',0),(227,1,'2015-01-07 14:06:42','2015-01-07 13:06:42','```bash\r\nsudo apt-get install playonlinux\r\n```','MS Office','','inherit','open','open','','226-revision-v1','','','2015-01-07 14:06:42','2015-01-07 13:06:42','',226,'http://blog.gingerik.nl/?p=227',0,'revision','',0),(228,0,'2015-01-08 01:00:59','2015-01-08 00:00:59','','Daily backup - January 8, 2015','','publish','open','open','','daily-backup-january-8-2015','','','2015-01-08 01:00:59','2015-01-08 00:00:59','',0,'http://blog.gingerik.nl/?p=228',0,'revisr_commits','',0),(229,0,'2015-01-09 00:40:54','2015-01-08 23:40:54','','Daily backup - January 8, 2015','','publish','open','open','','daily-backup-january-8-2015-2','','','2015-01-09 00:40:54','2015-01-08 23:40:54','',0,'http://blog.gingerik.nl/?p=229',0,'revisr_commits','',0),(230,0,'2015-01-10 04:40:07','2015-01-10 03:40:07','','Daily backup - January 10, 2015','','publish','open','open','','daily-backup-january-10-2015','','','2015-01-10 04:40:07','2015-01-10 03:40:07','',0,'http://blog.gingerik.nl/?p=230',0,'revisr_commits','',0),(231,0,'2015-01-11 02:11:19','2015-01-11 01:11:19','','Daily backup - January 11, 2015','','publish','open','open','','daily-backup-january-11-2015','','','2015-01-11 02:11:19','2015-01-11 01:11:19','',0,'http://blog.gingerik.nl/?p=231',0,'revisr_commits','',0),(232,0,'2015-01-12 02:32:29','2015-01-12 01:32:29','','Daily backup - January 12, 2015','','publish','open','open','','daily-backup-january-12-2015','','','2015-01-12 02:32:29','2015-01-12 01:32:29','',0,'http://blog.gingerik.nl/?p=232',0,'revisr_commits','',0),(233,0,'2015-01-13 00:31:50','2015-01-12 23:31:50','','Daily backup - January 12, 2015','','publish','open','open','','daily-backup-january-12-2015-2','','','2015-01-13 00:31:50','2015-01-12 23:31:50','',0,'http://blog.gingerik.nl/?p=233',0,'revisr_commits','',0),(234,0,'2015-01-14 03:30:39','2015-01-14 02:30:39','','Daily backup - January 14, 2015','','publish','open','open','','daily-backup-january-14-2015','','','2015-01-14 03:30:39','2015-01-14 02:30:39','',0,'http://blog.gingerik.nl/?p=234',0,'revisr_commits','',0),(235,0,'2015-01-14 23:37:20','2015-01-14 22:37:20','','Daily backup - January 14, 2015','','publish','open','open','','daily-backup-january-14-2015-2','','','2015-01-14 23:37:20','2015-01-14 22:37:20','',0,'http://blog.gingerik.nl/?p=235',0,'revisr_commits','',0),(236,0,'2015-01-16 01:07:36','2015-01-16 00:07:36','','Daily backup - January 16, 2015','','publish','open','open','','daily-backup-january-16-2015','','','2015-01-16 01:07:36','2015-01-16 00:07:36','',0,'http://blog.gingerik.nl/?p=236',0,'revisr_commits','',0),(237,0,'2015-01-17 00:38:47','2015-01-16 23:38:47','','Daily backup - January 16, 2015','','publish','open','open','','daily-backup-january-16-2015-2','','','2015-01-17 00:38:47','2015-01-16 23:38:47','',0,'http://blog.gingerik.nl/?p=237',0,'revisr_commits','',0),(238,0,'2015-01-18 07:55:45','2015-01-18 06:55:45','','Daily backup - January 18, 2015','','publish','open','open','','daily-backup-january-18-2015','','','2015-01-18 07:55:45','2015-01-18 06:55:45','',0,'http://blog.gingerik.nl/?p=238',0,'revisr_commits','',0),(239,0,'2015-01-18 23:42:56','2015-01-18 22:42:56','','Daily backup - January 18, 2015','','publish','open','open','','daily-backup-january-18-2015-2','','','2015-01-18 23:42:56','2015-01-18 22:42:56','',0,'http://blog.gingerik.nl/?p=239',0,'revisr_commits','',0),(240,0,'2015-01-20 07:27:51','2015-01-20 06:27:51','','Daily backup - January 20, 2015','','publish','open','open','','daily-backup-january-20-2015','','','2015-01-20 07:27:51','2015-01-20 06:27:51','',0,'http://blog.gingerik.nl/?p=240',0,'revisr_commits','',0),(241,0,'2015-01-20 23:31:05','2015-01-20 22:31:05','','Daily backup - January 20, 2015','','publish','open','open','','daily-backup-january-20-2015-2','','','2015-01-20 23:31:05','2015-01-20 22:31:05','',0,'http://blog.gingerik.nl/?p=241',0,'revisr_commits','',0),(242,0,'2015-01-22 06:47:37','2015-01-22 05:47:37','','Daily backup - January 22, 2015','','publish','open','open','','daily-backup-january-22-2015','','','2015-01-22 06:47:37','2015-01-22 05:47:37','',0,'http://blog.gingerik.nl/?p=242',0,'revisr_commits','',0),(243,0,'2015-01-22 23:40:05','2015-01-22 22:40:05','','Daily backup - January 22, 2015','','publish','open','open','','daily-backup-january-22-2015-2','','','2015-01-22 23:40:05','2015-01-22 22:40:05','',0,'http://blog.gingerik.nl/?p=243',0,'revisr_commits','',0),(244,0,'2015-01-24 02:42:42','2015-01-24 01:42:42','','Daily backup - January 24, 2015','','publish','open','open','','daily-backup-january-24-2015','','','2015-01-24 02:42:42','2015-01-24 01:42:42','',0,'http://blog.gingerik.nl/?p=244',0,'revisr_commits','',0),(245,0,'2015-01-25 10:38:51','2015-01-25 09:38:51','','Daily backup - January 25, 2015','','publish','open','open','','daily-backup-january-25-2015','','','2015-01-25 10:38:51','2015-01-25 09:38:51','',0,'http://blog.gingerik.nl/?p=245',0,'revisr_commits','',0),(246,0,'2015-01-26 17:53:08','2015-01-26 16:53:08','','Daily backup - January 26, 2015','','publish','open','open','','daily-backup-january-26-2015','','','2015-01-26 17:53:08','2015-01-26 16:53:08','',0,'http://blog.gingerik.nl/?p=246',0,'revisr_commits','',0),(247,0,'2015-01-26 23:56:37','2015-01-26 22:56:37','','Daily backup - January 26, 2015','','publish','open','open','','daily-backup-january-26-2015-2','','','2015-01-26 23:56:37','2015-01-26 22:56:37','',0,'http://blog.gingerik.nl/?p=247',0,'revisr_commits','',0),(248,0,'2015-01-28 18:32:55','2015-01-28 17:32:55','','Daily backup - January 28, 2015','','publish','open','open','','daily-backup-january-28-2015','','','2015-01-28 18:32:55','2015-01-28 17:32:55','',0,'http://blog.gingerik.nl/?p=248',0,'revisr_commits','',0),(249,0,'2015-01-29 01:33:26','2015-01-29 00:33:26','','Daily backup - January 29, 2015','','publish','open','open','','daily-backup-january-29-2015','','','2015-01-29 01:33:26','2015-01-29 00:33:26','',0,'http://blog.gingerik.nl/?p=249',0,'revisr_commits','',0),(250,0,'2015-01-30 04:12:52','2015-01-30 03:12:52','','Daily backup - January 30, 2015','','publish','open','open','','daily-backup-january-30-2015','','','2015-01-30 04:12:52','2015-01-30 03:12:52','',0,'http://blog.gingerik.nl/?p=250',0,'revisr_commits','',0),(251,0,'2015-01-31 08:15:50','2015-01-31 07:15:50','','Daily backup - January 31, 2015','','publish','open','open','','daily-backup-january-31-2015','','','2015-01-31 08:15:50','2015-01-31 07:15:50','',0,'http://blog.gingerik.nl/?p=251',0,'revisr_commits','',0),(252,0,'2015-01-31 23:46:15','2015-01-31 22:46:15','','Daily backup - January 31, 2015','','publish','open','open','','daily-backup-january-31-2015-2','','','2015-01-31 23:46:15','2015-01-31 22:46:15','',0,'http://blog.gingerik.nl/?p=252',0,'revisr_commits','',0),(253,0,'2015-02-02 14:19:56','2015-02-02 13:19:56','','Daily backup - February 2, 2015','','publish','open','open','','daily-backup-february-2-2015','','','2015-02-02 14:19:56','2015-02-02 13:19:56','',0,'http://blog.gingerik.nl/?p=253',0,'revisr_commits','',0),(254,0,'2015-02-03 00:34:07','2015-02-02 23:34:07','','Daily backup - February 2, 2015','','publish','open','open','','daily-backup-february-2-2015-2','','','2015-02-03 00:34:07','2015-02-02 23:34:07','',0,'http://blog.gingerik.nl/?p=254',0,'revisr_commits','',0),(255,0,'2015-02-04 05:00:32','2015-02-04 04:00:32','','Daily backup - February 4, 2015','','publish','open','open','','daily-backup-february-4-2015','','','2015-02-04 05:00:32','2015-02-04 04:00:32','',0,'http://blog.gingerik.nl/?p=255',0,'revisr_commits','',0),(256,0,'2015-02-05 01:43:19','2015-02-05 00:43:19','','Daily backup - February 5, 2015','','publish','open','open','','daily-backup-february-5-2015','','','2015-02-05 01:43:19','2015-02-05 00:43:19','',0,'http://blog.gingerik.nl/?p=256',0,'revisr_commits','',0),(257,0,'2015-02-05 23:52:44','2015-02-05 22:52:44','','Daily backup - February 5, 2015','','publish','open','open','','daily-backup-february-5-2015-2','','','2015-02-05 23:52:44','2015-02-05 22:52:44','',0,'http://blog.gingerik.nl/?p=257',0,'revisr_commits','',0),(258,0,'2015-02-07 04:36:27','2015-02-07 03:36:27','','Daily backup - February 7, 2015','','publish','open','open','','daily-backup-february-7-2015','','','2015-02-07 04:36:27','2015-02-07 03:36:27','',0,'http://blog.gingerik.nl/?p=258',0,'revisr_commits','',0),(259,0,'2015-02-08 01:00:36','2015-02-08 00:00:36','','Daily backup - February 8, 2015','','publish','open','open','','daily-backup-february-8-2015','','','2015-02-08 01:00:36','2015-02-08 00:00:36','',0,'http://blog.gingerik.nl/?p=259',0,'revisr_commits','',0),(260,0,'2015-02-09 00:32:36','2015-02-08 23:32:36','','Daily backup - February 8, 2015','','publish','open','open','','daily-backup-february-8-2015-2','','','2015-02-09 00:32:36','2015-02-08 23:32:36','',0,'http://blog.gingerik.nl/?p=260',0,'revisr_commits','',0),(261,0,'2015-02-10 00:36:34','2015-02-09 23:36:34','','Daily backup - February 9, 2015','','publish','open','open','','daily-backup-february-9-2015','','','2015-02-10 00:36:34','2015-02-09 23:36:34','',0,'http://blog.gingerik.nl/?p=261',0,'revisr_commits','',0),(262,0,'2015-02-11 00:13:44','2015-02-10 23:13:44','','Daily backup - February 10, 2015','','publish','open','open','','daily-backup-february-10-2015','','','2015-02-11 00:13:44','2015-02-10 23:13:44','',0,'http://blog.gingerik.nl/?p=262',0,'revisr_commits','',0),(263,0,'2015-02-12 01:12:17','2015-02-12 00:12:17','','Daily backup - February 12, 2015','','publish','open','open','','daily-backup-february-12-2015','','','2015-02-12 01:12:17','2015-02-12 00:12:17','',0,'http://blog.gingerik.nl/?p=263',0,'revisr_commits','',0),(264,0,'2015-02-12 23:55:21','2015-02-12 22:55:21','','Daily backup - February 12, 2015','','publish','open','open','','daily-backup-february-12-2015-2','','','2015-02-12 23:55:21','2015-02-12 22:55:21','',0,'http://blog.gingerik.nl/?p=264',0,'revisr_commits','',0),(265,0,'2015-02-14 00:10:11','2015-02-13 23:10:11','','Daily backup - February 13, 2015','','publish','open','open','','daily-backup-february-13-2015','','','2015-02-14 00:10:11','2015-02-13 23:10:11','',0,'http://blog.gingerik.nl/?p=265',0,'revisr_commits','',0),(266,0,'2015-02-15 03:43:48','2015-02-15 02:43:48','','Daily backup - February 15, 2015','','publish','open','open','','daily-backup-february-15-2015','','','2015-02-15 03:43:48','2015-02-15 02:43:48','',0,'http://blog.gingerik.nl/?p=266',0,'revisr_commits','',0),(267,0,'2015-02-16 03:40:47','2015-02-16 02:40:47','','Daily backup - February 16, 2015','','publish','open','open','','daily-backup-february-16-2015','','','2015-02-16 03:40:47','2015-02-16 02:40:47','',0,'http://blog.gingerik.nl/?p=267',0,'revisr_commits','',0),(268,0,'2015-02-16 23:56:07','2015-02-16 22:56:07','','Daily backup - February 16, 2015','','publish','open','open','','daily-backup-february-16-2015-2','','','2015-02-16 23:56:07','2015-02-16 22:56:07','',0,'http://blog.gingerik.nl/?p=268',0,'revisr_commits','',0),(269,0,'2015-02-18 02:36:48','2015-02-18 01:36:48','','Daily backup - February 18, 2015','','publish','open','open','','daily-backup-february-18-2015','','','2015-02-18 02:36:48','2015-02-18 01:36:48','',0,'http://blog.gingerik.nl/?p=269',0,'revisr_commits','',0),(270,0,'2015-02-28 11:18:01','2015-02-28 10:18:01','','Daily backup - February 28, 2015','','publish','open','open','','daily-backup-february-28-2015','','','2015-02-28 11:18:01','2015-02-28 10:18:01','',0,'http://blog.gingerik.nl/?p=270',0,'revisr_commits','',0),(271,0,'2015-02-28 23:49:14','2015-02-28 22:49:14','','Daily backup - February 28, 2015','','publish','open','open','','daily-backup-february-28-2015-2','','','2015-02-28 23:49:14','2015-02-28 22:49:14','',0,'http://blog.gingerik.nl/?p=271',0,'revisr_commits','',0),(272,0,'2015-03-02 01:22:54','2015-03-02 00:22:54','','Daily backup - March 2, 2015','','publish','open','open','','daily-backup-march-2-2015','','','2015-03-02 01:22:54','2015-03-02 00:22:54','',0,'http://blog.gingerik.nl/?p=272',0,'revisr_commits','',0);
/*!40000 ALTER TABLE `wp_posts` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

